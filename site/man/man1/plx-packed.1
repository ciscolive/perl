.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PLX-PACKED 1"
.TH PLX-PACKED 1 "2020-05-30" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
App::plx \- Perl Layout Executor
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  plx \-\-help                             # This output
\&
\&  plx \-\-init <perl>                      # Initialize layout config
\&  plx \-\-perl                             # Show layout perl binary
\&  plx \-\-libs                             # Show layout $PERL5LIB entries
\&  plx \-\-paths                            # Show layout additional $PATH entries
\&  plx \-\-env                              # Show layout env var changes
\&  plx \-\-cpanm \-llocal \-\-installdeps .    # Run cpanm from outside $PATH
\& 
\&  plx perl <args>                        # Run perl within layout
\&  plx \-E \*(Aq...\*(Aq                           # (ditto)
\&  plx script\-in\-dev <args>               # Run dev/ script within layout
\&  plx script\-in\-bin <args>               # Run bin/ script within layout
\&  plx ./script <args>                    # Run script within layout
\&  plx script/in/cwd <args>               # (ditto)
\&  plx program <args>                     # Run program from layout $PATH
.Ve
.SH "WHY PLX"
.IX Header "WHY PLX"
While perl has many tools for configuring per-project development
environments, using them can still be a little on the lumpy side. With
Carton, you find yourself running one of
.PP
.Vb 2
\&  perl \-Ilocal/lib/perl \-Ilib bin/myapp
\&  carton exec perl \-Ilib bin/myapp
.Ve
.PP
With App::perlbrew,
.PP
.Vb 2
\&  perlbrew switch perl\-5.28.0@libname
\&  perl \-Ilib bin/myapp
.Ve
.PP
With <https://github.com/tokuhirom/plenv>,
.PP
.Vb 1
\&  plenv exec perl \-Ilib bin/myapp
.Ve
.PP
and if you have more than one distinct layer of dependencies, while
local::lib will happily handle that, integrating it with everything else
becomes a pain in the buttocks.
.PP
As a result of this, your not-so-humble author found himself regularly having
a miniature perl executor script at the root of git clones that looked
something like:
.PP
.Vb 6
\&  #!/bin/sh
\&  eval $(perl \-Mlocal::lib=\-\-deactivate\-all)
\&  export PERL5LIB=$PWD/local/lib/perl5
\&  bin=$1
\&  shift
\&  ~/perl5/perlbrew/perls/perl\-5.28.0/bin/$bin "$@"
.Ve
.PP
and then running:
.PP
.Vb 1
\&  ./pl perl \-Ilib bin/myapp
.Ve
.PP
However, much like back in 2007 frustration with explaining to other
developers how to set up \s-1CPAN\s0 to install into \f(CW\*(C`~/perl5\*(C'\fR and how to
set up one's environment variables to then find the modules so installed
led to the exercise in rage driven development that first created
local::lib, walking newbies through the creation and subsequent use of
such a script was not the most enjoyable experience for anybody involved.
.PP
Thus, the creation of this module to reduce the setup process to:
.PP
.Vb 4
\&  cpanm App::plx
\&  cd MyProject
\&  plx \-\-init 5.28.0
\&  plx \-\-cpanm \-llocal \-\-notest \-\-installdeps .
.Ve
.PP
Follwed by being able to immediately (and even more concisely) run:
.PP
.Vb 1
\&  plx myapp
.Ve
.PP
which will execute \f(CW\*(C`perl \-Ilib bin/myapp\*(C'\fR with the correct \f(CW\*(C`perl\*(C'\fR and the
relevant local::lib already in scope.
.PP
If this seems of use to you, the \*(L"\s-1QUICKSTART\*(R"\s0 is next and the \*(L"\s-1ACTIONS\*(R"\s0
section of this document lists the full capabilities of plx. Onwards!
.SH "QUICKSTART"
.IX Header "QUICKSTART"
Let's assume we're going to be working on Foo-Bar, so we start with:
.PP
.Vb 2
\&  git clone git@github.com:arthur\-nonymous/Foo\-Bar.git
\&  cd Foo\-Bar
.Ve
.PP
Assuming the perl we'd get from running just \f(CW\*(C`perl\*(C'\fR suffices, then we
next run:
.PP
.Vb 1
\&  plx \-\-init
.Ve
.PP
If we want a different perl \- say, we have a \f(CW\*(C`perl5.30.1\*(C'\fR in our path, or
a \f(CW\*(C`perl\-5.30.1\*(C'\fR built in perlbrew, we'd instead run:
.PP
.Vb 1
\&  plx \-\-init 5.30.1
.Ve
.PP
To quickly get our dependencies available, we then run:
.PP
.Vb 1
\&  plx \-\-cpanm \-llocal \-\-notest \-\-installdeps .
.Ve
.PP
If the project is designed to use Carton and has a \f(CW\*(C`cpanfile.snapshot\*(C'\fR,
instead we would run:
.PP
.Vb 2
\&  plx \-\-cpanm \-ldevel \-\-notest Carton
\&  plx carton install
.Ve
.PP
If the goal is to test this against our current development version of another
library, then we'd also want to run:
.PP
.Vb 1
\&  plx \-\-config libspec add 40otherlib.dir ../Other\-Lib/lib
.Ve
.PP
If we want our ~/perl local::lib available within the plx environment, we
can add that as the least significant libspec with:
.PP
.Vb 1
\&  plx \-\-config libspec add 00tilde.ll $HOME/perl5
.Ve
.PP
At which point, we're ready to go, and can run:
.PP
.Vb 4
\&  plx myapp              # to run bin/myapp
\&  plx t/foo.t            # to run one test file
\&  plx prove              # to run all t/*.t test files
\&  plx \-E \*(Aqsay for @INC\*(Aq  # to run a one liner within the layout
.Ve
.PP
To learn everything else plx is capable of, read on to the \*(L"\s-1ACTIONS\*(R"\s0 section
coming next.
.PP
Have fun!
.SH "BOOTSTRAP"
.IX Header "BOOTSTRAP"
Under normal circumstances, one would run something like:
.PP
.Vb 1
\&  cpanm App::plx
.Ve
.PP
However, if you want a self-contained plx script without having a cpan
installer available, you can run:
.PP
.Vb 2
\&  mkdir bin
\&  wget https://raw.githubusercontent.com/shadowcat\-mst/plx/master/bin/plx\-packed \-O bin/plx
.Ve
.PP
to get the current latest packed version.
.PP
The packed version bundled local::lib and File::Which, and also includes
a modified \f(CW\*(C`\-\-cpanm\*(C'\fR action that uses an inline \f(CW\*(C`App::cpanminus\*(C'\fR.
.SH "ACTIONS"
.IX Header "ACTIONS"
.Vb 2
\&  plx \-\-help                             # Print synopsis
\&  plx \-\-version                          # Print plx version
\&
\&  plx \-\-init <perl>                      # Initialize layout config for .
\&  plx \-\-bareinit <perl>                  # Initialize bare layout config for .
\&  plx \-\-base                             # Show layout base dir 
\&  plx \-\-base <base> <action> <args>      # Run action with specified base dir
\&  
\&  plx \-\-perl                             # Show layout perl binary
\&  plx \-\-libs                             # Show layout $PERL5LIB entries
\&  plx \-\-paths                            # Show layout additional $PATH entries
\&  plx \-\-env                              # Show layout env var changes
\&  plx \-\-cpanm \-llocal \-\-installdeps .    # Run cpanm from outside $PATH
\&
\&  plx \-\-config perl                      # Show perl binary
\&  plx \-\-config perl set /path/to/perl    # Select exact perl binary
\&  plx \-\-config perl set perl\-5.xx.y      # Select perl via $PATH or perlbrew
\&
\&  plx \-\-config libspec                   # Show lib specifications
\&  plx \-\-config libspec add <name> <path> # Add lib specification
\&  plx \-\-config libspec del <name> <path> # Delete lib specification
\&  
\&  plx \-\-config env                       # Show additional env vars
\&  plx \-\-config env add <name> <path>     # Add env var
\&  plx \-\-config env del <name> <path>     # Delete env var
\&
\&  plx \-\-exec <cmd> <args>                # exec()s with env vars set
\&  plx \-\-perl <args>                      # Run perl with args
\&
\&  plx \-\-cmd <cmd> <args>                 # DWIM command:
\&  
\&    cmd = perl           \-> \-\-perl <args>
\&    cmd = \-<flag>        \-> \-\-perl \-<flag> <args>
\&    cmd = some/file      \-> \-\-perl some/file <args>
\&    cmd = ./file         \-> \-\-perl ./file <args>
\&    cmd = name \->
\&      exists .plx/cmd/<name> \-> \-\-perl .plx/cmd/<name> <args>
\&      exists dev/<name>      \-> \-\-perl dev/<name> <args>
\&      exists bin/<name>      \-> \-\-perl bin/<name> <args>
\&      else                   \-> \-\-exec <name> <args>
\&
\&  plx \-\-which <cmd>                      # Expands \-\-cmd <cmd> without running
\&  
\&  plx <something> <args>                 # Shorthand for plx \-\-cmd
\&  
\&  plx \-\-commands <filter>?               # List available commands
\&  
\&  plx \-\-multi [ <cmd1> <args1> ] [ ... ] # Run multiple actions
\&  plx \-\-showmulti [ ... ] [ ... ]        # Show multiple action running
\&  plx [ ... ] [ ... ]                    # Shorthand for plx \-\-multi
\&  
\&  plx \-\-userinit <perl>                  # Init ~/.plx with ~/perl5 ll
\&  plx \-\-installself                      # Installs plx and cpanm into layout
\&  plx \-\-installenv                       # Appends plx \-\-env call to .bashrc
\&  plx \-\-userstrap <perl>                 # userinit+installself+installenv
.Ve
.SS "\-\-help"
.IX Subsection "--help"
Prints out the usage information (i.e. the \*(L"\s-1SYNOPSIS\*(R"\s0) for plx.
.SS "\-\-init"
.IX Subsection "--init"
.Vb 5
\&  plx \-\-init                     # resolve \*(Aqperl\*(Aq in $PATH
\&  plx \-\-init perl                # (ditto)
\&  plx \-\-init 5.28.0              # looks for perl5.28.0 in $PATH
\&                                 # or perl\-5.28.0 in perlbrew
\&  plx \-\-init /path/to/some/perl  # uses the absolute path directly
.Ve
.PP
Initializes the layout.
.PP
If a perl name is passed, attempts to resolve it via \f(CW$PATH\fR and \f(CW\*(C`perlbrew\*(C'\fR
and sets the result as the layout perl; if not looks for just \f(CW\*(C`perl\*(C'\fR.
.PP
Creates the following libspec config:
.PP
.Vb 3
\&  25\-local.ll  local
\&  50\-devel.ll  devel
\&  75\-lib.dir   lib
.Ve
.SS "\-\-bareinit"
.IX Subsection "--bareinit"
Identical to \f(CW\*(C`\-\-init\*(C'\fR but creates no default configs except for \f(CW\*(C`perl\*(C'\fR.
.SS "\-\-base"
.IX Subsection "--base"
.Vb 2
\&  plx \-\-base
\&  plx \-\-base <base> <action> <args>
.Ve
.PP
Without arguments, shows the selected base dir \- \f(CW\*(C`plx\*(C'\fR finds this by
checking for a \f(CW\*(C`.plx\*(C'\fR directory in the current directory, and if not tries
the parent directory, recursively. The search stops either when \f(CW\*(C`plx\*(C'\fR finds
a \f(CW\*(C`.git\*(C'\fR directory, to avoid accidentally escaping a project repository, or
at the last directory before the root \- i.e. \f(CW\*(C`plx\*(C'\fR will test \f(CW\*(C`/home\*(C'\fR but
not \f(CW\*(C`/\*(C'\fR.
.PP
With arguments, specifies a base dir to use, and then invokes the rest of the
arguments with that base dir selected \- so for example one can make a default
configuration in \f(CW$HOME\fR available as \f(CW\*(C`plh\*(C'\fR by running:
.PP
.Vb 2
\&  plx \-\-init $HOME
\&  alias plh=\*(Aqplx \-\-base $HOME\*(Aq
.Ve
.SS "\-\-libs"
.IX Subsection "--libs"
Prints the directories that will be added to \f(CW\*(C`PERL5LIB\*(C'\fR, one per line.
.PP
These will include the \f(CW\*(C`lib/perl5\*(C'\fR subdirectory for each \f(CW\*(C`ll\*(C'\fR entry in the
libspecs, and the directory for each \f(CW\*(C`dir\*(C'\fR entry.
.SS "\-\-paths"
.IX Subsection "--paths"
Prints the directories that will be added to \f(CW\*(C`PATH\*(C'\fR, one per line.
.PP
These will include the containing directory of the environment's perl binary
if not already in \f(CW\*(C`PATH\*(C'\fR, followed by the \f(CW\*(C`bin\*(C'\fR directories of any \f(CW\*(C`ll\*(C'\fR
entries in the libspecs.
.SS "\-\-env"
.IX Subsection "--env"
Prints the changes that will be made to your environment variables, in a
syntax that is (hopefully) correct for your current shell.
.SS "\-\-cpanm"
.IX Subsection "--cpanm"
.Vb 2
\&  plx \-\-cpanm \-Llocal \-\-installdeps .
\&  plx \-\-cpanm \-ldevel App::Ack
.Ve
.PP
Finds the \f(CW\*(C`cpanm\*(C'\fR binary in the \f(CW\*(C`PATH\*(C'\fR that \f(CW\*(C`plx\*(C'\fR was executed \fIfrom\fR,
and executes it using the layout's perl binary and environment variables.
.PP
Requires the user to specify a local::lib to install into via \f(CW\*(C`\-l\*(C'\fR or
\&\f(CW\*(C`\-L\*(C'\fR in order to avoid installing modules into unexpected places.
.PP
Note that this action exists primarily for bootstrapping, and if you want
to use a different installer such as App::cpm, you'd install it with:
.PP
.Vb 1
\&  plx \-\-cpanm \-ldevel App::cpm
.Ve
.PP
and then subsequently run e.g.
.PP
.Vb 1
\&  plx cpm install App::Ack
.Ve
.PP
to install modules.
.SS "\-\-exec"
.IX Subsection "--exec"
.Vb 1
\&  plx \-\-exec <command> <args>
.Ve
.PP
Sets up the layout's environment variables and \f(CW\*(C`exec\*(C'\fRs the command.
.SS "\-\-perl"
.IX Subsection "--perl"
.Vb 2
\&  plx \-\-perl
\&  plx \-\-perl <options> <script> <args>
.Ve
.PP
Without arguments, sugar for \f(CW\*(C`\-\-config perl\*(C'\fR.
.PP
Otherwise, sets up the layout's environment variables and \f(CW\*(C`exec\*(C'\fRs the
layout's perl with the given options and arguments.
.SS "\-\-cmd"
.IX Subsection "--cmd"
.Vb 1
\&  plx \-\-cmd <cmd> <args>
\&  
\&    cmd = perl           \-> \-\-perl <args>
\&    cmd = \-<flag>        \-> \-\-perl \-<flag> <args>
\&    cmd = some/file      \-> \-\-perl some/file <args>
\&    cmd = ./file         \-> \-\-perl ./file <args>
\&    cmd = name \->
\&      exists .plx/cmd/<name> \-> \-\-perl .plx/cmd/<name> <args>
\&      exists dev/<name>      \-> \-\-perl dev/<name> <args>
\&      exists bin/<name>      \-> \-\-perl bin/<name> <args>
\&      else                   \-> \-\-exec <name> <args>
.Ve
.PP
\&\fBNote\fR: Much like the \f(CW\*(C`devel\*(C'\fR local::lib is created to allow for the
installation of out-of-band dependencies that aren't going to be needed in
production, the \f(CW\*(C`dev\*(C'\fR directory is supported to allow for the easy addition
of development time only sugar commands. Note that since \f(CW\*(C`perl\*(C'\fR will re-exec
anything with a non-perl shebang, one can add wrappers here ala:
.PP
.Vb 3
\&  $ cat dev/prove
\&  #!/bin/sh
\&  exec prove \-j8 "$@"
.Ve
.SS "\-\-which"
.IX Subsection "--which"
.Vb 1
\&  plx \-\-which <cmd>
.Ve
.PP
Outputs the expanded form of a \f(CW\*(C`\-\-cmd\*(C'\fR invocation without running it.
.SS "\-\-config"
.IX Subsection "--config"
.Vb 3
\&  plx \-\-config                     # Show current config
\&  plx \-\-config <name>              # Show current <name> config
\&  plx \-\-config <name> <operation>  # Invoke config operation
.Ve
.PP
\fIperl\fR
.IX Subsection "perl"
.PP
.Vb 2
\&  plx \-\-config perl
\&  plx \-\-config perl set <spec>
.Ve
.PP
If the spec passed to \f(CW\*(C`set\*(C'\fR contains a \f(CW\*(C`/\*(C'\fR character, plx assumes that it's
an absolute bath and records it as-is.
.PP
If not, we go a\-hunting.
.PP
First, if the spec begins with a \f(CW5\fR, we replace it with \f(CW\*(C`perl5\*(C'\fR.
.PP
Second, we search \f(CW$PATH\fR for a binary of that name, and record it if so.
.PP
Third, if the (current) spec begins \f(CW\*(C`perl5\*(C'\fR, we replace it with \f(CW\*(C`perl\-5\*(C'\fR.
.PP
Fourth, we search \f(CW$PATH\fR for a \f(CW\*(C`perlbrew\*(C'\fR binary, and ask it if it has a
perl named after the spec, and record that if so.
.PP
Fifth, we shrug and hope the user can come up with an absolute path next time.
.PP
\&\fBNote:\fR The original spec passed to \f(CW\*(C`set\*(C'\fR is recorded in \f(CW\*(C`.plx/perl.spec\*(C'\fR,
so if you intend to share the \f(CW\*(C`.plx\*(C'\fR directory across multiple machines via
version control or otherwise, remove/exclude the \f(CW\*(C`.plx/perl\*(C'\fR file and plx
will automatically attempt to re-locate the perl on first invocation.
.PP
\fIlibspec\fR
.IX Subsection "libspec"
.PP
.Vb 3
\&  plx \-\-config libspec
\&  plx \-\-config libspec add <name> <spec>
\&  plx \-\-config libspec del <name> <spec>
.Ve
.PP
A libspec config entry consists of a name and a spec, and the show output
prints them space separated one per line, with enough spaces to make the
specs align:
.PP
.Vb 3
\&  25\-local.ll  local
\&  50\-devel.ll  devel
\&  75\-lib.dir   lib
.Ve
.PP
The part of the name before the last \f(CW\*(C`.\*(C'\fR is not semantically significant to
plx, but is used for asciibetical sorting of the libspec entries to determine
in which order to apply them.
.PP
The part after must be either \f(CW\*(C`ll\*(C'\fR for a local::lib, or \f(CW\*(C`dir\*(C'\fR for a bare
lib directory.
.PP
When loaded, the spec is (if relative) resolved to an absolute path relative
to the layout root, then all \f(CW\*(C`..\*(C'\fR entries and symlinks resolved to give a
final path used to set up the layout environment.
.PP
\fIenv\fR
.IX Subsection "env"
.PP
.Vb 3
\&  plx \-\-config env
\&  plx \-\-config env add <name> <value>
\&  plx \-\-config env del <name> <value>
.Ve
.PP
Manages additional environment variables, which are set immediately before
any environment changes required for the current \*(L"libspec\*(R" and \*(L"perl\*(R"
settings are processed.
.SS "\-\-commands"
.IX Subsection "--commands"
.Vb 3
\&  plx \-\-commands         # all commands
\&  plx \-\-commands c       # all commands starting with c
\&  plx \-\-commands /json/  # all commands matching /json/
.Ve
.PP
Lists available commands, name first, then full path.
.PP
If a filter argument is given, treats it as a fixed prefix to filter the
command list, unless the filter is \f(CW\*(C`/re/\*(C'\fR in which case the slashes are
stripped and the filter is treated as a regexp.
.SS "\-\-multi"
.IX Subsection "--multi"
.Vb 1
\&  plx \-\-multi [ \-\-init ] [ \-\-config perl set 5.28.0 ]
.Ve
.PP
Runs multiple plx commands from a single invocation delimited by \f(CW\*(C`[ ... ]\*(C'\fR.
.SS "\-\-showmulti"
.IX Subsection "--showmulti"
.Vb 1
\&  plx \-\-showmulti [ \-\-init ] [ \-\-config perl set 5.28.0 ]
.Ve
.PP
Outputs approximate plx invocations that would be run by \f(CW\*(C`\-\-multi\*(C'\fR.
.SS "\-\-userinit"
.IX Subsection "--userinit"
Same as \f(CW\*(C`\-\-init\*(C'\fR but assumes \f(CW$HOME\fR as base and sets up only a single
libspec pointing at \f(CW\*(C`$HOME/perl5\*(C'\fR.
.SS "\-\-installself"
.IX Subsection "--installself"
Installs App::plx and App::cpanminus into the highest-numbered
local::lib within the layout.
.SS "\-\-installenv"
.IX Subsection "--installenv"
(bash only currently)
.PP
Appends an eval line to set up the layout environment to the user's bashrc.
.SS "\-\-userstrap"
.IX Subsection "--userstrap"
Convenience command for \f(CW\*(C`\-\-userinit\*(C'\fR plus \f(CW\*(C`\-\-installself\*(C'\fR plus
\&\f(CW\*(C`\-\-installenv\*(C'\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 1
\& mst \- Matt S. Trout (cpan:MSTROUT) <mst@shadowcat.co.uk>
.Ve
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
None yet \- maybe this software is perfect! (ahahahahahahahahaha)
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2020 the App::plx \*(L"\s-1AUTHOR\*(R"\s0 and \*(L"\s-1CONTRIBUTORS\*(R"\s0
as listed above.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software and may be distributed under the same terms
as perl itself.
