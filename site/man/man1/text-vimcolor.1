.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "TEXT-VIMCOLOR 1"
.TH TEXT-VIMCOLOR 1 "2018-12-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
text\-vimcolor \- Use Text:VimColor from the command line
.SH "VERSION"
.IX Header "VERSION"
version 0.29
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&   $ text\-vimcolor FILENAME
\&     # (like a colored "cat" (same as "text\-vimcolor \-\-format ansi FILENAME"))
\&   $ text\-vimcolor \-\-format html \-\-full\-page FILENAME > OUTPUT.html
\&   $ text\-vimcolor \-\-format xml FILENAME > OUTPUT.xml
\&   $ text\-vimcolor \-\-format pdf FILENAME \-\-output OUTPUT.pdf
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This program uses the Vim text editor to highlight text according to its
syntax, and turn the highlighting into \s-1ANSI, HTML, XML\s0 or \s-1PDF\s0 output.  It works
with any file type which Vim itself can highlight.  Usually Vim will be
able to auto-detect the file format based on the filename (and sometimes the
contents of the file).
.PP
Exactly one filename should be given on the command line to name the input
file.  If none is given input will instead be read from \f(CW\*(C`STDIN\*(C'\fR.
.PP
If Vim can't guess the file type automatically, it can be specified explicitly
using the \f(CW\*(C`\-\-filetype\*(C'\fR option.  For example:
.PP
.Vb 1
\&   $ text\-vimcolor \-\-format html \-\-filetype prolog foo.pl > foo.html
.Ve
.PP
This program is a command line interface to the Perl module Text::VimColor.
.SH "OPTIONS"
.IX Header "OPTIONS"
The following options are understood:
.IP "\-\-help" 4
.IX Item "--help"
Show a summary of the usage, including a list of options.
.IP "\-\-debug" 4
.IX Item "--debug"
Turns on debugging in the underlying Perl module.  This makes it print
the command used to run Vim.
.IP "\-\-all\-syntax\-groups" 4
.IX Item "--all-syntax-groups"
Enables additional syntax groups instead of just the primary ones.
See \*(L"all_syntax_groups\*(R" in Text::VimColor for more information.
.IP "\-\-filetype \fIfile-type\fR" 4
.IX Item "--filetype file-type"
Set the type of the file explicitly.  The \fIfile-type\fR argument should be
something which Vim will recognize when set with its \f(CW\*(C`filetype\*(C'\fR option.
Examples are \f(CW\*(C`perl\*(C'\fR, \f(CW\*(C`cpp\*(C'\fR (for \*(C+) and \f(CW\*(C`sh\*(C'\fR (for Unix shell scripts).
These names are case sensitive, and should usually be all-lowercase.
.IP "\-\-format \fIoutput-format\fR" 4
.IX Item "--format output-format"
The output format to generate.  Must be one of the following:
.RS 4
.IP "ansi" 4
.IX Item "ansi"
Output text marked up with \s-1ANSI\s0 escape sequences (using Term::ANSIColor).
This is like a colorized version of \f(CWcat(1)\fR.
.Sp
You can alter the color scheme using the \f(CW\*(C`TEXT_VIMCOLOR_ANSI\*(C'\fR
environment variable in the format of \f(CW"SynGroup=color;"\fR.
For example:
.Sp
.Vb 1
\&   TEXT_VIMCOLOR_ANSI=\*(AqComment=green;Statement = magenta; \*(Aq
.Ve
.Sp
On windows the script will attempt to load Win32::Console::ANSI
if the output is to \s-1STDOUT\s0 in an attempt to make the output more useful.
You can disable this by setting \f(CW\*(C`TEXT_VIMCOLOR_NO_WIN32_ANSI=1\*(C'\fR.
.IP "html" 4
.IX Item "html"
Generate \s-1XHTML\s0 output, with text marked with \f(CW\*(C`<span>\*(C'\fR elements
with \f(CW\*(C`class\*(C'\fR attributes.  A \s-1CSS\s0 stylesheet should be used to define the
coloring, etc., for the output.  See the \f(CW\*(C`\-\-full\-page\*(C'\fR option below.
.IP "xml" 4
.IX Item "xml"
Output is in a simple \s-1XML\s0 vocabulary.  This can then be used by other
software to do further transformations (e.g., using \s-1XSLT\s0).
.IP "pdf" 4
.IX Item "pdf"
\&\s-1XML\s0 output is generated and fed to the \s-1FOP\s0 XSL-FO processor, with an
appropriate \s-1XSL\s0 style sheet.  The stylesheet uses \s-1XSLT\s0 to transform the
normal \s-1XML\s0 output into XSL-FO, which is then rendered to \s-1PDF.\s0  For this
to work, the command \f(CW\*(C`fop\*(C'\fR must be available.  An output file must be
specified with \f(CW\*(C`\-\-output\*(C'\fR with this format.
.RE
.RS 4
.Sp
Full details of the \s-1HTML\s0 and \s-1XML\s0 output formats can be found in the
documentation for Text::VimColor.
.RE
.IP "\-\-output \fIoutput-filename\fR" 4
.IX Item "--output output-filename"
Specifies the name of the output file.
If this option is omitted, the output will be sent
to <\s-1STDOUT\s0>.  This option is required when the output
format is \s-1PDF\s0 (because of limitations in \s-1FOP\s0).
.IP "\-\-full\-page" 4
.IX Item "--full-page"
When the output format is \s-1HTML,\s0 this option will make the output a complete
\&\s-1HTML\s0 page, rather than just a fragment of \s-1HTML.\s0  A \s-1CSS\s0 stylesheet will be
inserted inline into the output, so the output will be usable as it is.
.IP "\-\-no\-inline\-stylesheet" 4
.IX Item "--no-inline-stylesheet"
When the output format is \s-1HTML\s0 and \f(CW\*(C`\-\-fullpage\*(C'\fR is given, a stylesheet
is normally inserted in-line in the output file.  If this option is given it
will instead be referenced with a \f(CW\*(C`<link>\*(C'\fR element.
.IP "\-\-let \fIname\fR=\fIvalue\fR" 4
.IX Item "--let name=value"
When Vim is run the value of \fIname\fR will be set to \fIvalue\fR using
Vim's \f(CW\*(C`let\*(C'\fR command.  More than one of these options can be set.
The value is not quoted or escaped in any way, so it can be an expression.
These settings take precedence over \f(CW\*(C`\-\-unlet\*(C'\fR options.
.Sp
This option corresponds to the \f(CW\*(C`vim_let\*(C'\fR setting and method in
the Perl module.
.IP "\-\-unlet \fIname\fR" 4
.IX Item "--unlet name"
Prevent the value of \fIname\fR being set with Vim's \f(CW\*(C`let\*(C'\fR command.
This can be used to turn off default settings.
.Sp
This option corresponds to the \f(CW\*(C`vim_let\*(C'\fR setting and method in
the Perl module, when used with a value of \f(CW\*(C`undef\*(C'\fR.
.SH "BUGS"
.IX Header "BUGS"
.IP "\(bu" 4
The \s-1PDF\s0 output option often doesn't work, because it is dependent on \s-1FOP,\s0
which often doesn't work.  This is also why it is mind numbingly slow.
.IP "\(bu" 4
\&\s-1FOP\s0 (0.20.3) seems to ignore the \f(CW\*(C`background\-color\*(C'\fR property on
\&\f(CW\*(C`<fo:inline>\*(C'\fR.  If that's what it's meant to do, how do you set the
background color on part of a line?
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
Text::VimColor
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Geoff Richards <qef@laxan.com>
.IP "\(bu" 4
Randy Stauner <rwstauner@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2002\-2006 by Geoff Richards.
.PP
This software is copyright (c) 2011 by Randy Stauner.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
