.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "INTERNALS 1"
.TH INTERNALS 1 "2019-12-08" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PDL::Internals \- description of some aspects of the current internals
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Intro"
.IX Subsection "Intro"
This document explains various aspects of the current implementation
of \s-1PDL.\s0 If you just want to use \s-1PDL\s0 for something, you definitely
do not need to read this. Even if you want to interface your C routines
to \s-1PDL\s0 or create new \s-1PDL::PP\s0 functions, you do not need to read this
man page (though it may be informative). This document is primarily
intended for people interested in debugging or changing the internals
of \s-1PDL.\s0 To read this, a good understanding of the C language
and programming and data structures in general is required, as well
as some Perl understanding. If you read through this document
and understand all of it and are able to point what any part of
this document refers to in the \s-1PDL\s0 core sources and additionally
struggle to understand \s-1PDL::PP\s0, you will be awarded the title
\&\*(L"\s-1PDL\s0 Guru\*(R" (of course, the current version of this document
is so incomplete that this is next to impossible from just these notes).
.PP
\&\fBWarning:\fR If it seems that this document has gotten out of date,
please inform the \s-1PDL\s0 porters email list (pdl\-devel@lists.sourceforge.net).
This may well happen.
.SS "Piddles"
.IX Subsection "Piddles"
The pdl data object is generally an opaque scalar reference into a 
pdl structure in memory. Alternatively, it may be a hash reference with
the \f(CW\*(C`PDL\*(C'\fR field containing the scalar reference (this makes overloading
piddles easy, see PDL::Objects). You can easily find out
at the Perl level which type of piddle you are dealing with. The example
code below demonstrates how to do it:
.PP
.Vb 11
\&   # check if this a piddle
\&   die "not a piddle" unless UNIVERSAL::isa($pdl, \*(AqPDL\*(Aq);
\&   # is it a scalar ref or a hash ref?
\&   if (UNIVERSAL::isa($pdl, "HASH")) {
\&     die "not a valid PDL" unless exists $pdl\->{PDL} &&
\&        UNIVERSAL::isa($pdl\->{PDL},\*(AqPDL\*(Aq);
\&     print "This is a hash reference,",
\&        " the PDL field contains the scalar ref\en";
\&   } else {
\&        print "This is a scalar ref that points to address $$pdl in memory\en";
\&   }
.Ve
.PP
The scalar reference points to the numeric address of a C structure of
type \f(CW\*(C`pdl\*(C'\fR which is defined in \fIpdl.h\fR. The mapping between the
object at the Perl level and the C structure containing the actual
data and structural that makes up a piddle is done by the \s-1PDL\s0 typemap.
The functions used in the \s-1PDL\s0 typemap are defined pretty much at the top
of the file \fIpdlcore.h\fR. So what does the structure look like:
.PP
.Vb 4
\&        struct pdl {
\&           unsigned long magicno; /* Always stores PDL_MAGICNO as a sanity check */
\&             /* This is first so most pointer accesses to wrong type are caught */
\&           int state;        /* What\*(Aqs in this pdl */
\&
\&           pdl_trans *trans; /* Opaque pointer to internals of transformation from
\&                                parent */
\&
\&           pdl_vaffine *vafftrans;
\&
\&           void*    sv;      /* (optional) pointer back to original sv.
\&                                  ALWAYS check for non\-null before use.
\&                                  We cannot inc refcnt on this one or we\*(Aqd
\&                                  never get destroyed */
\&
\&           void *datasv;        /* Pointer to SV containing data. Refcnt inced */
\&           void *data;            /* Null: no data alloced for this one */
\&           PDL_Indx nvals;           /* How many values allocated */
\&           int datatype;
\&           PDL_Indx   *dims;      /* Array of data dimensions */
\&           PDL_Indx   *dimincs;   /* Array of data default increments */
\&           short    ndims;     /* Number of data dimensions */
\&
\&           unsigned char *threadids;  /* Starting index of the thread index set n */
\&           unsigned char nthreadids;
\&
\&           pdl_children children;
\&
\&           PDL_Indx   def_dims[PDL_NDIMS];   /* Preallocated space for efficiency */
\&           PDL_Indx   def_dimincs[PDL_NDIMS];   /* Preallocated space for efficiency */
\&           unsigned char def_threadids[PDL_NTHREADIDS];
\&
\&           struct pdl_magic *magic;
\&
\&           void *hdrsv; /* "header", settable from outside */
\&        };
.Ve
.PP
This is quite a structure for just storing some data in \- what is going on?
.IP "Data storage" 5
.IX Item "Data storage"
We are going to start with some of the simpler members: first of all,
there is the member
.Sp
.Vb 1
\&        void *datasv;
.Ve
.Sp
which is really a pointer to a Perl \s-1SV\s0 structure (\f(CW\*(C`SV *\*(C'\fR). The \s-1SV\s0 is
expected to be representing a string, in which the data of the piddle
is stored in a tightly packed form. This pointer counts as a reference
to the \s-1SV\s0 so the reference count has been incremented when the \f(CW\*(C`SV *\*(C'\fR
was placed here (this reference count business has to do with Perl's
garbage collection mechanism \*(-- don't worry if this doesn't mean much
to you). This pointer is allowed to have the value \f(CW\*(C`NULL\*(C'\fR which 
means that there is no actual Perl \s-1SV\s0 for this data \- for instance, the data
might be allocated by a \f(CW\*(C`mmap\*(C'\fR operation. Note the use of an SV*
was purely for convenience, it allows easy transformation of
packed data from files into piddles. Other implementations are not
excluded.
.Sp
The actual pointer to data is stored in the member
.Sp
.Vb 1
\&        void *data;
.Ve
.Sp
which contains a pointer to a memory area with space for
.Sp
.Vb 1
\&        PDL_Indx nvals;
.Ve
.Sp
data items of the data type of this piddle.  PDL_Indx is either 'long' or
\&'long long' depending on whether your perl is 64bit or not.
.Sp
The data type of the data is stored in the variable
.Sp
.Vb 1
\&        int datatype;
.Ve
.Sp
the values for this member are given in the enum \f(CW\*(C`pdl_datatypes\*(C'\fR (see
\&\fIpdl.h\fR). Currently we have byte, short, unsigned short, long, float and
double types, see also PDL::Types.
.IP "Dimensions" 5
.IX Item "Dimensions"
The number of dimensions in the piddle is given by the member
.Sp
.Vb 1
\&        int ndims;
.Ve
.Sp
which shows how many entries there are in the arrays
.Sp
.Vb 2
\&        PDL_Indx   *dims;      
\&        PDL_Indx   *dimincs;
.Ve
.Sp
These arrays are intimately related: \f(CW\*(C`dims\*(C'\fR gives the sizes of the dimensions
and \f(CW\*(C`dimincs\*(C'\fR is always calculated by the code
.Sp
.Vb 4
\&        PDL_Indx inc = 1;
\&        for(i=0; i<it\->ndims; i++) {
\&                it\->dimincs[i] = inc; inc *= it\->dims[i];
\&        }
.Ve
.Sp
in the routine \f(CW\*(C`pdl_resize_defaultincs\*(C'\fR in \f(CW\*(C`pdlapi.c\*(C'\fR.
What this means is that the dimincs can be used to calculate the offset
by code like
.Sp
.Vb 4
\&        PDL_Indx offs = 0;
\&        for(i=0; i<it\->ndims; i++) {
\&                offs += it\->dimincs[i] * index[i];
\&        }
.Ve
.Sp
but this is not always the right thing to do,
at least without checking for certain things first.
.IP "Default storage" 5
.IX Item "Default storage"
Since the vast majority of piddles don't have more than 6 dimensions,
it is more efficient to have default storage for the dimensions and dimincs
inside the \s-1PDL\s0 struct.
.Sp
.Vb 2
\&        PDL_Indx   def_dims[PDL_NDIMS];   
\&        PDL_Indx   def_dimincs[PDL_NDIMS];
.Ve
.Sp
The \f(CW\*(C`dims\*(C'\fR and \f(CW\*(C`dimincs\*(C'\fR may be set to point to the beginning of these
arrays if \f(CW\*(C`ndims\*(C'\fR is smaller than or equal to the compile-time constant
\&\f(CW\*(C`PDL_NDIMS\*(C'\fR. This is important to note when freeing a piddle struct.
The same applies for the threadids:
.Sp
.Vb 1
\&        unsigned char def_threadids[PDL_NTHREADIDS];
.Ve
.IP "Magic" 5
.IX Item "Magic"
It is possible to attach magic to piddles, much like Perl's own magic
mechanism. If the member pointer
.Sp
.Vb 1
\&           struct pdl_magic *magic;
.Ve
.Sp
is nonzero, the \s-1PDL\s0 has some magic attached to it. The implementation
of magic can be gleaned from the file \fIpdlmagic.c\fR in the distribution.
.IP "State" 5
.IX Item "State"
One of the first members of the structure is
.Sp
.Vb 1
\&        int state;
.Ve
.Sp
The possible flags and their meanings are given in \f(CW\*(C`pdl.h\*(C'\fR.
These are mainly used to implement the lazy evaluation mechanism
and keep track of piddles in these operations.
.IP "Transformations and virtual affine transformations" 5
.IX Item "Transformations and virtual affine transformations"
As you should already know, piddles often carry information about
where they come from. For example, the code
.Sp
.Vb 2
\&        $y = $x\->slice("2:5");
\&        $y .= 1;
.Ve
.Sp
will alter \f(CW$x\fR. So \f(CW$y\fR and \f(CW$x\fR \fIknow\fR that they are connected
via a \f(CW\*(C`slice\*(C'\fR\-transformation. This information is stored in the members
.Sp
.Vb 2
\&        pdl_trans *trans; 
\&        pdl_vaffine *vafftrans;
.Ve
.Sp
Both \f(CW$x\fR (the \fIparent\fR) and \f(CW$y\fR (the child) store this information
about the transformation in appropriate slots of the \f(CW\*(C`pdl\*(C'\fR structure.
.Sp
\&\f(CW\*(C`pdl_trans\*(C'\fR and \f(CW\*(C`pdl_vaffine\*(C'\fR are structures that we will look at in
more detail below.
.IP "The Perl SVs" 5
.IX Item "The Perl SVs"
When piddles are referred to through Perl SVs, we store an additional
reference to it in the member
.Sp
.Vb 1
\&        void*    sv;
.Ve
.Sp
in order to be able to return a reference to the user when he wants to 
inspect the transformation structure on the Perl side.
.Sp
Also, we store an opaque
.Sp
.Vb 1
\&        void *hdrsv;
.Ve
.Sp
which is just for use by the user to hook up arbitrary data with this sv.
This one is generally manipulated through sethdr and
gethdr calls.
.SS "Smart references and transformations: slicing and dicing"
.IX Subsection "Smart references and transformations: slicing and dicing"
Smart references and most other fundamental functions
operating on piddles are implemented via \fItransformations\fR
(as mentioned above) which are represented by the type \f(CW\*(C`pdl_trans\*(C'\fR in \s-1PDL.\s0
.PP
A transformation links input and output piddles and contains
all the infrastructure that defines how:
.IP "\(bu" 4
output piddles are obtained from input piddles;
.IP "\(bu" 4
changes in smartly linked output piddles (e.g. the \fIchild\fR
of a sliced \fIparent\fR piddle) are flown back to the input
piddle in transformations where this is supported (the most
often used example being \f(CW\*(C`slice\*(C'\fR here);
.IP "\(bu" 4
datatype and size of output piddles that need to be created
are obtained.
.PP
In general, executing a \s-1PDL\s0 function on a group of piddles
results in creation of a transformation of the requested
type that links all input and output arguments (at least
those that are piddles). In \s-1PDL\s0 functions that support
data flow between input and output args (e.g. \f(CW\*(C`slice\*(C'\fR,
\&\f(CW\*(C`index\*(C'\fR) this transformation links \fIparent\fR (input) and
\&\fIchild\fR (output) piddles permanently until either the link is
explicitly broken by user request (\f(CW\*(C`sever\*(C'\fR at the Perl level)
or all parents and children have been destroyed. In those
cases the transformation is lazy-evaluated, e.g. only executed
when piddle values are actually accessed.
.PP
In \fInon-flowing\fR functions, for example addition (\f(CW\*(C`+\*(C'\fR) and inner
products (\f(CW\*(C`inner\*(C'\fR), the transformation is installed just as
in flowing functions but then the transformation is immediately
executed and destroyed (breaking the link between input and output args)
before the function returns.
.PP
It should be noted that the close link between input and output args
of a flowing function (like slice) requires
that piddle objects that are linked in
such a way be kept alive beyond the point where they have gone
out of scope from the point of view of Perl:
.PP
.Vb 3
\&  $x = zeroes(20);
\&  $y = $x\->slice(\*(Aq2:4\*(Aq);
\&  undef $x;    # last reference to $x is now destroyed
.Ve
.PP
Although \f(CW$x\fR should now be destroyed according to Perl's rules
the underlying \f(CW\*(C`pdl\*(C'\fR structure must actually only be freed when \f(CW$y\fR
also goes out of scope (since it still references
internally some of \f(CW$x\fR's data). This example demonstrates that such
a dataflow paradigm between \s-1PDL\s0 objects necessitates a special
destruction algorithm that takes the links between piddles
into account and couples the lifespan of those objects. The
non-trivial algorithm is implemented in the function
\&\f(CW\*(C`pdl_destroy\*(C'\fR in \fIpdlapi.c\fR. In fact, most of the code
in \fIpdlapi.c\fR and \fIpdlfamily.c\fR is concerned with
making sure that piddles (\f(CW\*(C`pdl *\*(C'\fRs) are created, updated
and freed at the right times depending on interactions
with other piddles via \s-1PDL\s0 transformations (remember, \f(CW\*(C`pdl_trans\*(C'\fR).
.SS "Accessing children and parents of a piddle"
.IX Subsection "Accessing children and parents of a piddle"
When piddles are dynamically linked via transformations as
suggested above input and output piddles are referred to as parents
and children, respectively.
.PP
An example of processing the children of a piddle is provided
by the \f(CW\*(C`baddata\*(C'\fR method of PDL::Bad (only available if you
have compiled \s-1PDL\s0 with the \f(CW\*(C`WITH_BADVAL\*(C'\fR option set to 1,
but still useful as an example!).
.PP
Consider the following situation:
.PP
.Vb 4
\& pdl> $x = rvals(7,7,{Centre=>[3,4]});
\& pdl> $y = $x\->slice(\*(Aq2:4,3:5\*(Aq);
\& pdl> ? vars
\& PDL variables in package main::
\&
\& Name         Type   Dimension       Flow  State          Mem
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& $x           Double D [7,7]                P            0.38Kb 
\& $y           Double D [3,3]                \-C           0.00Kb
.Ve
.PP
Now, if I suddenly decide that \f(CW$x\fR should be flagged as possibly
containing bad values, using
.PP
.Vb 1
\& pdl> $x\->badflag(1)
.Ve
.PP
then I want the state of \f(CW$y\fR \- it's \fIchild\fR \- to be changed as
well (since it will either share or inherit some of \f(CW$x\fR's data and
so be also \fIbad\fR), so that I get a 'B' in the \fIState\fR field:
.PP
.Vb 2
\& pdl> ? vars                    
\& PDL variables in package main::
\&
\& Name         Type   Dimension       Flow  State          Mem
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& $x           Double D [7,7]                PB           0.38Kb 
\& $y           Double D [3,3]                \-CB          0.00Kb
.Ve
.PP
This bit of magic is performed by the \f(CW\*(C`propagate_badflag\*(C'\fR function,
which is listed below:
.PP
.Vb 2
\& /* newval = 1 means set flag, 0 means clear it */
\& /* thanks to Christian Soeller for this */
\&
\& void propagate_badflag( pdl *it, int newval ) {
\&    PDL_DECL_CHILDLOOP(it)
\&    PDL_START_CHILDLOOP(it)
\&    {
\&        pdl_trans *trans = PDL_CHILDLOOP_THISCHILD(it);
\&        int i;
\&        for( i = trans\->vtable\->nparents;
\&             i < trans\->vtable\->npdls;
\&             i++ ) {
\&            pdl *child = trans\->pdls[i];
\&
\&            if ( newval ) child\->state |=  PDL_BADVAL;
\&            else          child\->state &= ~PDL_BADVAL;
\&
\&            /* make sure we propagate to grandchildren, etc */
\&            propagate_badflag( child, newval );
\&
\&        } /* for: i */
\&    }
\&    PDL_END_CHILDLOOP(it)
\& } /* propagate_badflag */
.Ve
.PP
Given a piddle (\f(CW\*(C`pdl *it\*(C'\fR), the routine loops through each 
\&\f(CW\*(C`pdl_trans\*(C'\fR structure, where access to this structure is provided by the 
\&\f(CW\*(C`PDL_CHILDLOOP_THISCHILD\*(C'\fR macro.
The \fIchildren\fR of the piddle are stored in the \f(CW\*(C`pdls\*(C'\fR array, after the
\&\fIparents\fR, hence the loop from \f(CW\*(C`i = ...nparents\*(C'\fR to 
\&\f(CW\*(C`i = ...npdls \- 1\*(C'\fR.
Once we have the pointer to the child piddle, we can do what we want to 
it; here we change the value of the \f(CW\*(C`state\*(C'\fR variable, but the details
are unimportant).
What \fBis\fR important is that we call \f(CW\*(C`propagate_badflag\*(C'\fR on this
piddle, to ensure we loop through its children. This recursion
ensures we get to all the \fIoffspring\fR of a particular piddle.
.PP
Access to \fIparents\fR is similar, with the \f(CW\*(C`for\*(C'\fR loop replaced by:
.PP
.Vb 5
\&        for( i = 0;
\&             i < trans\->vtable\->nparents;
\&             i++ ) {
\&           /* do stuff with parent #i: trans\->pdls[i] */
\&        }
.Ve
.ie n .SS "What's in a transformation (""pdl_trans"")"
.el .SS "What's in a transformation (\f(CWpdl_trans\fP)"
.IX Subsection "What's in a transformation (pdl_trans)"
All transformations are implemented as structures
.PP
.Vb 12
\&  struct XXX_trans {
\&        int magicno; /* to detect memory overwrites */
\&        short flags; /* state of the trans */
\&        pdl_transvtable *vtable;   /* the all important vtable */
\&        void (*freeproc)(struct pdl_trans *);  /* Call to free this trans
\&                (in case we had to malloc some stuff for this trans) */
\&        pdl *pdls[NP]; /* The pdls involved in the transformation */
\&        int _\|_datatype; /* the type of the transformation */
\&        /* in general more members
\&        /* depending on the actual transformation (slice, add, etc)
\&         */
\&  };
.Ve
.PP
The transformation identifies all \f(CW\*(C`pdl\*(C'\fRs involved in the trans
.PP
.Vb 1
\&  pdl *pdls[NP];
.Ve
.PP
with \f(CW\*(C`NP\*(C'\fR depending on the number of piddle args of the particular
trans. It records a state
.PP
.Vb 1
\&  short flags;
.Ve
.PP
and the datatype
.PP
.Vb 1
\&  int _\|_datatype;
.Ve
.PP
of the trans (to which all piddles must be converted unless
they are explicitly typed, \s-1PDL\s0 functions created with \s-1PDL::PP\s0
make sure that these conversions are done as necessary). Most important is
the pointer to the vtable (virtual table) that contains the actual
functionality
.PP
.Vb 1
\& pdl_transvtable *vtable;
.Ve
.PP
The vtable structure in turn looks something like (slightly
simplified from \fIpdl.h\fR for clarity)
.PP
.Vb 10
\&  typedef struct pdl_transvtable {
\&        pdl_transtype transtype;
\&        int flags;
\&        int nparents;   /* number of parent pdls (input) */
\&        int npdls;      /* number of child pdls (output) */
\&        char *per_pdl_flags;  /* optimization flags */
\&        void (*redodims)(pdl_trans *tr);  /* figure out dims of children */
\&        void (*readdata)(pdl_trans *tr);  /* flow parents to children  */
\&        void (*writebackdata)(pdl_trans *tr); /* flow backwards */
\&        void (*freetrans)(pdl_trans *tr); /* Free both the contents and it of
\&                                        the trans member */
\&        pdl_trans *(*copy)(pdl_trans *tr); /* Full copy */
\&        int structsize;
\&        char *name; /* For debuggers, mostly */
\&  } pdl_transvtable;
.Ve
.PP
We focus on the callback functions:
.PP
.Vb 1
\&        void (*redodims)(pdl_trans *tr);
.Ve
.PP
\&\f(CW\*(C`redodims\*(C'\fR will work out the dimensions of piddles that need
to be created and is called from within the \s-1API\s0 function that
should be called to ensure that the dimensions of a piddle are
accessible (\fIpdlapi.c\fR):
.PP
.Vb 1
\&   void pdl_make_physdims(pdl *it)
.Ve
.PP
\&\f(CW\*(C`readdata\*(C'\fR and \f(CW\*(C`writebackdata\*(C'\fR are responsible for the actual
computations of the child data from the parents or parent data
from those of the children, respectively (the dataflow aspect).
The \s-1PDL\s0 core makes sure that these are called as needed when
piddle data is accessed (lazy-evaluation). The general \s-1API\s0
function to ensure that a piddle is up-to-date is
.PP
.Vb 1
\&  void pdl_make_physvaffine(pdl *it)
.Ve
.PP
which should be called before accessing piddle data from
\&\s-1XS/C\s0 (see \fICore.xs\fR for some examples).
.PP
\&\f(CW\*(C`freetrans\*(C'\fR frees dynamically allocated memory associated
with the trans as needed and \f(CW\*(C`copy\*(C'\fR can copy the transformation.
Again, functions built with \s-1PDL::PP\s0 make sure that copying
and freeing via these callbacks happens at the right times. (If they
fail to do that we have got a memory leak \*(-- this has happened in
the past ;).
.PP
The transformation and vtable code is hardly ever written by
hand but rather generated by \s-1PDL::PP\s0 from concise descriptions.
.PP
Certain types of transformations can be optimized very
efficiently obviating the need for explicit \f(CW\*(C`readdata\*(C'\fR
and \f(CW\*(C`writebackdata\*(C'\fR methods. Those transformations are
called \fIpdl_vaffine\fR. Most dimension manipulating
functions (e.g., \f(CW\*(C`slice\*(C'\fR, \f(CW\*(C`xchg\*(C'\fR) belong to this class.
.PP
The basic trick is that parent and child of such a transformation work
on the same (shared) block of data which they just choose
to interpret differently (by using different \f(CW\*(C`dims\*(C'\fR, \f(CW\*(C`dimincs\*(C'\fR and
\&\f(CW\*(C`offs\*(C'\fR on the same data, compare the \f(CW\*(C`pdl\*(C'\fR structure above).
Each operation on a piddle sharing
data with another one in this way is therefore automatically flown
from child to parent and back \*(-- after all they are reading and writing
the same block of memory. This is currently not Perl thread safe \*(--
no big loss since the whole \s-1PDL\s0 core is not reentrant
(Perl threading \f(CW\*(C`!=\*(C'\fR \s-1PDL\s0 threading!).
.SS "Signatures: threading over elementary operations"
.IX Subsection "Signatures: threading over elementary operations"
Most of that functionality of \s-1PDL\s0 threading (automatic iteration
of elementary operations over multi-dim piddles) is implemented in the
file \fIpdlthread.c\fR.
.PP
The \s-1PDL::PP\s0 generated functions (in particular the
\&\f(CW\*(C`readdata\*(C'\fR and \f(CW\*(C`writebackdata\*(C'\fR callbacks) use this infrastructure to 
make sure that the fundamental operation implemented by the
trans is performed in agreement with \s-1PDL\s0's threading semantics.
.SS "Defining new \s-1PDL\s0 functions \*(-- Glue code generation"
.IX Subsection "Defining new PDL functions Glue code generation"
Please, see \s-1PDL::PP\s0 and examples in the \s-1PDL\s0 distribution. Implementation
and syntax are currently far from perfect but it does a good job!
.SS "The Core struct"
.IX Subsection "The Core struct"
As discussed in \s-1PDL::API\s0, \s-1PDL\s0 uses a pointer to a structure
to allow \s-1PDL\s0 modules access to its core routines. The definition of this
structure (the \f(CW\*(C`Core\*(C'\fR struct) is in \fIpdlcore.h\fR (created by 
\&\fIpdlcore.h.PL\fR in \fIBasic/Core\fR) and looks something like
.PP
.Vb 10
\& /* Structure to hold pointers core PDL routines so as to be used by 
\&  * many modules
\&  */
\& struct Core {
\&    I32    Version;
\&    pdl*   (*SvPDLV)      ( SV*  );
\&    void   (*SetSV_PDL)   ( SV *sv, pdl *it );
\& #if defined(PDL_clean_namespace) || defined(PDL_OLD_API)
\&    pdl*   (*new)      ( );     /* make it work with gimp\-perl */
\& #else
\&    pdl*   (*pdlnew)      ( );  /* renamed because of C++ clash */
\& #endif
\&    pdl*   (*tmp)         ( );
\&    pdl*   (*create)      (int type);
\&    void   (*destroy)     (pdl *it);
\&    ...
\& }
\& typedef struct Core Core;
.Ve
.PP
The first field of the structure (\f(CW\*(C`Version\*(C'\fR) is used to ensure 
consistency between modules at run time; the following code
is placed in the \s-1BOOT\s0 section of the generated xs code:
.PP
.Vb 2
\& if (PDL\->Version != PDL_CORE_VERSION)
\&   Perl_croak(aTHX_ "Foo needs to be recompiled against the newly installed PDL");
.Ve
.PP
If you add a new field to the \fICore\fR struct you should:
.IP "\(bu" 5
discuss it on the pdl porters email list (pdl\-devel@lists.sourceforge.net)
[with the possibility of making your changes to a separate
branch of the \s-1CVS\s0 tree if it's a change that will take time to complete]
.IP "\(bu" 5
increase by 1 the value of the \f(CW$pdl_core_version\fR variable in 
\&\fIpdlcore.h.PL\fR. This sets the value of the
\&\f(CW\*(C`PDL_CORE_VERSION\*(C'\fR C macro used to populate the Version field
.IP "\(bu" 5
add documentation (e.g. to \s-1PDL::API\s0) if it's a
\&\*(L"useful\*(R" function for external module writers (as well as
ensuring the code is as well documented as the rest of \s-1PDL\s0
;)
.SH "BUGS"
.IX Header "BUGS"
This description is far from perfect. If you need more details
or something is still unclear please ask on the pdl-devel
mailing list (pdl\-devel@lists.sourceforge.net).
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright(C) 1997 Tuomas J. Lukka (lukka@fas.harvard.edu),
2000 Doug Burke (djburke@cpan.org), 2002 Christian Soeller & Doug Burke,
2013 Chris Marshall.
.PP
Redistribution in the same form is allowed but reprinting requires
a permission from the author.
