.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "CRYPT_FILE 1"
.TH CRYPT_FILE 1 "2018-07-31" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
crypt_file \- Encrypt (and decrypt) Perl files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&    crypt_file [\-\-list\-file=<file>]
\&               [\-\-dir=<dir>]... [\-\-recurse]
\&               [\-\-test] [\-\-silent]
\&               [\-\-in\-place] [\-\-edit\-mode=<mode>] [\-\-bak\-file\-expr[=<expr>]]
\&               [\-\-out\-file\-expr=<expr>]
\&               [\-\-crypt\-mode=<mode>]
\&               [\-\-version] [\-\-help] [\-\-manpage]
\&               [<file\-spec>...]
.Ve
.SH "ARGUMENTS"
.IX Header "ARGUMENTS"
.IP "<file\-spec>" 4
.IX Item "<file-spec>"
Specify one or more files on which to perform the encryption or decryption.
Each file specifier may be one of:
.RS 4
.IP "\(bu" 4
An absolute file path;
.IP "\(bu" 4
A relative file path;
.IP "\(bu" 4
A shell-style file glob expression.
.RE
.RS 4
.Sp
This list of file specifiers, together with any more read from the file
specified by the \fB\-\-list\-file\fR option (if present), is used to build the input
file list as follows:
.IP "\(bu" 4
Each absolute file path is added directly to the input file list;
.IP "\(bu" 4
Each relative file path is tested against each directory in the search directory
list in turn until the first existing file path is found, which is then added to
the input file list;
.IP "\(bu" 4
Each file glob expression is expanded against every directory in the search
directory list in turn, and all the resulting file paths are then added to the
input file list.
.Sp
Note that typical \s-1UNIX\s0 shells will expand glob expressions before calling the
program unless the expressions are quoted (normally with single quotes).  The
default Win32 \fBcmd.exe\fR shell does not do this, and does not remove single
quotes from arguments either, so beware!
.RE
.RS 4
.Sp
By default, the search directory list is just the current working directory, but
other directories may be specified instead by using one or more \fB\-\-dir\fR
options.
.RE
.PP
If there are no file specifiers given, or if there is a single input file
specifier consisting of just a single dash given, then input is read from
<\s-1STDIN\s0> instead.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-l <file>\fR, \fB\-\-list\-file=<file>\fR" 4
.IX Item "-l <file>, --list-file=<file>"
Specify a file that lists file specifiers to use in building the input file list
(one file specifier per line).
.Sp
This file may be used as well as, or instead of, file specifiers given as
arguments to this script.
.Sp
See \*(L"\s-1ARGUMENTS\*(R"\s0 for more details on file specifiers.
.IP "\fB\-d <dir>\fR, \fB\-\-dir=<dir>\fR" 4
.IX Item "-d <dir>, --dir=<dir>"
Specify one or more directories to assign to the search directory list that is
used to resolve relative file paths and/or expand file glob expressions in the
list of input file specifiers.
.Sp
Multiple directories can be assigned to the list by specifying multiple \fB\-\-dir\fR
options and/or specifying multiple directories separated by the path separator
character with a single \fB\-\-dir\fR option.
.Sp
To determine what the path separator character is on your system type the
following:
.Sp
.Vb 1
\&    perl \-V:path_sep
.Ve
.Sp
By default, the search directory list is just the current working directory.  If
one or more directories are specified via this option then they replace the
default, so if you want to include the current working directory as well as
other directories then you will have to explicitly specify that too.
.IP "\fB\-r\fR, \fB\-\-recurse\fR" 4
.IX Item "-r, --recurse"
Specify that when expanding any file glob expressions in the list of input file
specifiers, each glob should be expanded in all sub-directories (recursively) of
each directory in the search directory list.
.Sp
This option does not affect the resolution of relative file paths in the list
of input file specifiers.
.IP "\fB\-t\fR, \fB\-\-test\fR" 4
.IX Item "-t, --test"
Run the script in test-only mode.
.Sp
The input file list will be printed to \f(CW\*(C`STDOUT\*(C'\fR, but no other action is taken.
No input files are edited, and no backup files or output files are created.
.IP "\fB\-s\fR, \fB\-\-silent\fR" 4
.IX Item "-s, --silent"
Run the script in silent mode.
.Sp
The name of each input file is normally printed on \f(CW\*(C`STDERR\*(C'\fR before it is
processed, followed by an \*(L"\s-1OK\*(R"\s0 message (and/or a warning or error message if
anything went wrong) when the processing of that file is complete.  Running in
silent mode suppresses the output of the filename and \*(L"\s-1OK\*(R"\s0 message; any relevant
warnings and/or error messages are still output.
.IP "\fB\-i\fR, \fB\-\-in\-place\fR" 4
.IX Item "-i, --in-place"
Specify that each input file should be processed \*(L"in-place\*(R", i.e. the input file
is overwritten with the output, rather than the output being sent either to
\&\f(CW\*(C`STDOUT\*(C'\fR or else to an output file as specified by the \fB\-\-out\-file\-expr\fR
option.
.Sp
This option is ignored if the input file list is empty and input is being read
from \f(CW\*(C`STDIN\*(C'\fR instead.
.IP "\fB\-e <mode>\fR, \fB\-\-edit\-mode=<mode>\fR" 4
.IX Item "-e <mode>, --edit-mode=<mode>"
Specify how in-place editing should be performed:
.RS 4
.IP "memory" 4
.IX Item "memory"
The entire contents of the input file are read into memory, processed in memory,
and then written back out to the input file.
.IP "tempfile" 4
.IX Item "tempfile"
The contents of the input file are processed and written out to a temporary file
in chunks of at most \f(CW\*(C`BUFSIZ\*(C'\fR bytes at a time, and then the temporary file is
renamed to the input file.
.RE
.RS 4
.Sp
The default mode is \*(L"memory\*(R", which should be safe for most purposes given that
Perl source code files are typically not very large, but the \*(L"tempfile\*(R" mode
should be considered instead if this is likely to cause out-of-memory errors due
to the size of the files, e.g. if the files have very large \f(CW\*(C`_\|_DATA_\|_\*(C'\fR
sections.
.Sp
The \*(L"tempfile\*(R" mode also has another useful advantage when combined with the
\&\*(L"encrypted\*(R" or \*(L"decrypted\*(R" \fB\-\-crypt\-mode\fR option values:  The file processing
becomes safely re-runnable in the event of any errors on a first run because
each input file is not touched until the final step in its processing when the
temporary file that has been used up until then is renamed to it.  Renaming a
file is normally an atomic operation at the filesystem level, so even if the
processing is interrupted or killed part-way through, each input file will be
left either untouched or else fully encrypted or decrypted; there will be no
partially written files left (other than temporary files, which are cleaned up
if at all possible).  Combined with, say, \fB\-\-crypt\-mode=encrypted\fR, this mode
can therefore safely be used to run, and, if necessary, re-run, on a set of
input files until they have all be successfully encrypted.
.Sp
This option only applies when input files are being processed \*(L"in-place\*(R", and
implies the \fB\-\-in\-place\fR option if that is not already present.
.RE
.IP "\fB\-b [<expr>]\fR, \fB\-\-bak\-file\-expr[=<expr>]\fR" 4
.IX Item "-b [<expr>], --bak-file-expr[=<expr>]"
Specify an expression from which to determine the name of a backup file to
create before processing each input file.
.Sp
The optional \fBexpr\fR value works in a similar way to the value for \fBperl\fR's own
\&\fB\-i\fR option, with a couple of enhancements:
.RS 4
.IP "\(bu" 4
If the \fBexpr\fR contains one or more \*(L"*\*(R", \*(L"?\*(R" or \*(L"[\*(R" characters then
.RS 4
.IP "\(bu" 4
Each \*(L"*\*(R" character is replaced with the input file's basename (i.e. with the
directory path removed from the start);
.IP "\(bu" 4
Each \*(L"?\*(R" character is replaced with the input file's basename minus the
extension (i.e. the same as the basename used above, but with whatever matches
\&\f(CW\*(C`/\e..*?$/\*(C'\fR removed from the end);
.IP "\(bu" 4
Each \*(L"[\*(R" character is replaced with the input file's extension (i.e. the part
that was removed from the basename above).
.RE
.RS 4
.Sp
The resulting expression is then used as the name of the backup file.
.RE
.IP "\(bu" 4
Otherwise, the \fBexpr\fR is appended to the input filename to make the name of the
backup file.
.RE
.RS 4
.Sp
In each case, the backup file is created in the same directory as the input file
itself.
.Sp
The default \fBexpr\fR value is \*(L"*.bak\*(R".
.Sp
This option only applies when input files are being processed \*(L"in-place\*(R", and
implies the \fB\-\-in\-place\fR option if that is not already present.
.RE
.IP "\fB\-o <expr>\fR, \fB\-\-out\-file\-expr=<expr>\fR" 4
.IX Item "-o <expr>, --out-file-expr=<expr>"
Specify an expression from which to determine the name of an output file to
send the output to when processing each input file.
.Sp
The mandatory \fBexpr\fR value works in exactly the same way as the \fBexpr\fR value
to the \fB\-\-bak\-file\-expr\fR option described above, except that if the input file
list is empty and input is being read from \f(CW\*(C`STDIN\*(C'\fR instead then the \fBexpr\fR is
used as the actual path (either absolute or relative to the current directory)
of the output file itself.
.Sp
This option is mutually exclusive with the \fB\-\-in\-place\fR option; if both options
are specified then \fB\-\-in\-place\fR will be used and \fB\-\-out\-file\-expr\fR is ignored.
.Sp
The output is written to \f(CW\*(C`STDOUT\*(C'\fR by default.
.IP "\fB\-c <mode>\fR, \fB\-\-crypt\-mode=<mode>\fR" 4
.IX Item "-c <mode>, --crypt-mode=<mode>"
Specify what action, if any, to perform on each file:
.RS 4
.IP "auto" 4
.IX Item "auto"
The crypt mode is determined automatically on a per-file basis by reading the
beginning of the file.  If the beginning is
.Sp
.Vb 1
\&    use Filter::Crypto::Decrypt;
.Ve
.Sp
then the file is presumed to be in an encrypted state already so the mode will
be set to \*(L"decrypt\*(R"; otherwise the mode will be set to \*(L"encrypt\*(R".
.IP "encrypt" 4
.IX Item "encrypt"
Each input file is encrypted.  Produces a warning if a file looks like it is
already in an encrypted state, i.e. already begins with a
\&\f(CW\*(C`use Filter::Crypto::Decrypt;\*(C'\fR statement.
.IP "decrypt" 4
.IX Item "decrypt"
Each input file is decrypted.  Produces a warning if a file looks like it is
already in a decrypted state, i.e. does not begin with a
\&\f(CW\*(C`use Filter::Crypto::Decrypt;\*(C'\fR statement.
.IP "encrypted" 4
.IX Item "encrypted"
Each input file is encrypted unless it looks like it is already in an encrypted
state, i.e. already begins with a \f(CW\*(C`use Filter::Crypto::Decrypt;\*(C'\fR statement.
.IP "decrypted" 4
.IX Item "decrypted"
Each input file is decrypted unless it looks like it is already in a decrypted
state, i.e. does not begin with a \f(CW\*(C`use Filter::Crypto::Decrypt;\*(C'\fR statement.
.RE
.RS 4
.Sp
The default mode is \*(L"auto\*(R".
.RE
.IP "\fB\-v\fR, \fB\-\-version\fR" 4
.IX Item "-v, --version"
Display the script name and version, and then exit.
.IP "\fB\-h\fR, \fB\-\-help\fR | \fB\-\-?\fR" 4
.IX Item "-h, --help | --?"
Display a help page listing the arguments and options, and then exit.
.IP "\fB\-m\fR, \fB\-\-manpage\fR | \fB\-\-doc\fR" 4
.IX Item "-m, --manpage | --doc"
Display the entire manual page, and then exit.
.PP
Options may be introduced with a double dash, a single dash, a plus sign or
(on Win32) a forward slash; case does not matter; an equals sign may be used or
omitted between option names and values; long option names may be abbreviated to
uniqueness.
.PP
Options may also be placed between non-option arguments, and option processing
may be stopped at any point in the command-line by inserting a double dash.
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
.Vb 1
\&    0   The script exited normally.
\&
\&    1   The script exited after printing the version, help or manpage.
\&
\&    2   Invalid command\-line arguments.
\&
\&    >2  An error occurred.
.Ve
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.SS "Warnings and Error Messages"
.IX Subsection "Warnings and Error Messages"
This script may produce the following diagnostic messages.  They are classified
as follows (a la perldiag):
.PP
.Vb 3
\&    (W) A warning (optional).
\&    (F) A fatal error (trappable).
\&    (I) An internal error that you should never see (trappable).
.Ve
.PP
Warnings of the format \f(CW\*(C`%s: Error: ...\*(C'\fR and \f(CW\*(C`%s: Warning: ...\*(C'\fR are produced
from within the main loop over the input file list.  Those that say \*(L"Error:\*(R" are
severe warnings that result in the processing of the specified input file to be
aborted; in such cases, the script moves onto the next file in the list.  Those
that say \*(L"Warning:\*(R" are less serious warnings; in those cases, the script
continues the processing of the file concerned.  Other messages come from
elsewhere in the script.
.ie n .IP "Can't cd back to '%s': %s" 4
.el .IP "Can't cd back to '%s': \f(CW%s\fR" 4
.IX Item "Can't cd back to '%s': %s"
(F) Could not change back to the specified directory after changing into one of
its sub-directories during a (possibly recursive) scan of the search directory
list while attempting to expand a file glob expression in the list of input file
specifiers.  The system error message corresponding to the standard C library
\&\f(CW\*(C`errno\*(C'\fR variable is also given.
.ie n .IP "Can't cd to '%s' from '%s': %s" 4
.el .IP "Can't cd to '%s' from '%s': \f(CW%s\fR" 4
.IX Item "Can't cd to '%s' from '%s': %s"
(W) Could not change directory as indicated during a (possibly recursive) scan
of the search directory list while attempting to expand a file glob expression
in the list of input file specifiers.  The search down that particular branch of
the directory tree will be aborted, but other branches and search directories
will continue to be scanned.  The system error message corresponding to the
standard C library \f(CW\*(C`errno\*(C'\fR variable is also given.
.ie n .IP "Can't close list file '%s' after reading: %s" 4
.el .IP "Can't close list file '%s' after reading: \f(CW%s\fR" 4
.IX Item "Can't close list file '%s' after reading: %s"
(W) The specified list file (i.e. the file given by the \fB\-\-list\-file\fR option)
could not be closed after reading the list of input file specifiers from it.
The system error message corresponding to the standard C library \f(CW\*(C`errno\*(C'\fR
variable is also given.
.ie n .IP "Can't close temporary file '%s': %s" 4
.el .IP "Can't close temporary file '%s': \f(CW%s\fR" 4
.IX Item "Can't close temporary file '%s': %s"
(W) The specified temporary file could not be closed during the clean up of
temporary files just before exiting when a \s-1SIGINT\s0 has been caught.  The system
error message corresponding to the standard C library \f(CW\*(C`errno\*(C'\fR variable is also
given.
.ie n .IP "Can't delete temporary file '%s': %s" 4
.el .IP "Can't delete temporary file '%s': \f(CW%s\fR" 4
.IX Item "Can't delete temporary file '%s': %s"
(W) The specified temporary file could not be deleted during the clean up of
temporary files just before exiting when a \s-1SIGINT\s0 has been caught, or when
removing an unneeded temporary file when an input file was found to already be
in the requested state.  The system error message corresponding to the standard
C library \f(CW\*(C`errno\*(C'\fR variable is also given.
.ie n .IP "Can't open list file '%s' for reading: %s" 4
.el .IP "Can't open list file '%s' for reading: \f(CW%s\fR" 4
.IX Item "Can't open list file '%s' for reading: %s"
(F) The specified list file (i.e. the file given by the \fB\-\-list\-file\fR option)
from which to read the list of input file specifiers could not be opened for
reading.  The system error message corresponding to the standard C library
\&\f(CW\*(C`errno\*(C'\fR variable is also given.
.IP "Caught \s-1SIGINT.\s0 Cleaning up temporary files before exiting" 4
.IX Item "Caught SIGINT. Cleaning up temporary files before exiting"
(W) The script has received an \*(L"interrupt\*(R" signal, e.g. the user may have
pressed Ctrl+C.  The signal is caught so that temporary files, used when editing
files in-place with \fB\-\-edit\-mode=tempfile\fR, can be cleaned up before exiting.
.ie n .IP "%s: Error: Can't copy to backup file '%s': %s" 4
.el .IP "\f(CW%s:\fR Error: Can't copy to backup file '%s': \f(CW%s\fR" 4
.IX Item "%s: Error: Can't copy to backup file '%s': %s"
(W) The specified input file could not be copied to the specified backup file.
The system error message corresponding to the standard C library \f(CW\*(C`errno\*(C'\fR
variable is also given.
.ie n .IP "%s: Error: Can't make file writable: %s" 4
.el .IP "\f(CW%s:\fR Error: Can't make file writable: \f(CW%s\fR" 4
.IX Item "%s: Error: Can't make file writable: %s"
(W) [Win32 only.]  The specified input file could not be made writable.  On
Win32 (only), the input file must be writable when editing files in-place using
temporary files in order for the final step (in which the temporary file is
renamed to the input file) to succeed.  (On other systems, the ability to
perform a rename is controlled by the permissions on the parent directory.)  The
system error message corresponding to the standard C library \f(CW\*(C`errno\*(C'\fR variable
is also given.
.ie n .IP "%s: Error: Can't rename temporary file '%s' to input file: %s" 4
.el .IP "\f(CW%s:\fR Error: Can't rename temporary file '%s' to input file: \f(CW%s\fR" 4
.IX Item "%s: Error: Can't rename temporary file '%s' to input file: %s"
(W) The specified temporary file could not be renamed to the specified input
file.  This is the final step of the process when editing files in-place using
temporary files.  The system error message corresponding to the standard C
library \f(CW\*(C`errno\*(C'\fR variable is also given.
.ie n .IP "%s: Error: Can't stat file: %s" 4
.el .IP "\f(CW%s:\fR Error: Can't stat file: \f(CW%s\fR" 4
.IX Item "%s: Error: Can't stat file: %s"
(W) Could not retrieve file information about the specified input file.  This
information is required when editing files in-place using temporary files in
order to set the same file permissions on the temporary file as are on the input
file before renaming the temporary file to the input file.  The system error
message corresponding to the standard C library \f(CW\*(C`errno\*(C'\fR variable is also given.
.ie n .IP "%s: Error: \fBcrypt_file()\fR failed: %s" 4
.el .IP "\f(CW%s:\fR Error: \fBcrypt_file()\fR failed: \f(CW%s\fR" 4
.IX Item "%s: Error: crypt_file() failed: %s"
(W) The call to the \f(CW\*(C`crypt_file()\*(C'\fR function to perform the actual encryption or
decryption failed.  The last error message from the Filter::Crypto::CryptFile
module is also given.
.IP "No such file '%s'" 4
.IX Item "No such file '%s'"
(W) The specified input file specifier could not be resolved, either as an
absolute file path, or as a relative file path or a file glob expression with
respect to the current working directory or any of the directories specified
with the \fB\-\-dir\fR option.
.IP "Unknown edit mode '%s'" 4
.IX Item "Unknown edit mode '%s'"
(I) The mode specified for editing files in-place (i.e. the mode given by the
\&\fB\-\-edit\-mode\fR option) was not recognized and was not caught by the option
processing code run at the start of the script, causing an unexpected error
later on.
.IP "Unknown warning type '%s'" 4
.IX Item "Unknown warning type '%s'"
(I) The subroutine called internally when outputting warning messages was passed
a warning type that it does not recognize.
.ie n .IP "%s: Warning: Can't close temporary file '%s' after writing: %s" 4
.el .IP "\f(CW%s:\fR Warning: Can't close temporary file '%s' after writing: \f(CW%s\fR" 4
.IX Item "%s: Warning: Can't close temporary file '%s' after writing: %s"
(W) The filehandle opened on the temporary file being used to edit the specified
input file in-place could not be closed after writing data to it.  The system
error message corresponding to the standard C library \f(CW\*(C`errno\*(C'\fR variable is also
given.
.ie n .IP "%s: Warning: Can't set permissions on temporary file '%s': %s" 4
.el .IP "\f(CW%s:\fR Warning: Can't set permissions on temporary file '%s': \f(CW%s\fR" 4
.IX Item "%s: Warning: Can't set permissions on temporary file '%s': %s"
(W) Could not set the file permissions on the temporary file to be the same as
are on the specified input file.  This is done when editing files in-place using
temporary files so that the file permissions are left unchanged after the
editing has been completed.  The system error message corresponding to the
standard C library \f(CW\*(C`errno\*(C'\fR variable is also given.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
These examples assume standard \s-1UNIX\s0 shell quoting and redirection syntax apply.
On Win32, you should replace single-quoted arguments with double-quoted
arguments.  (The redirection syntax is unchanged.)
.IP "Process \fBtest.pl\fR, writing output to \fBtestenc.pl\fR:" 4
.IX Item "Process test.pl, writing output to testenc.pl:"
.Vb 1
\&    crypt_file <test.pl >testenc.pl
\&
\&    crypt_file test.pl >testenc.pl
\&
\&    crypt_file \-o \*(Aq?enc.pl\*(Aq test.pl
.Ve
.IP "Process \fBtest.pl\fR in-place, making a backup copy as \fBtest.pl.bak\fR:" 4
.IX Item "Process test.pl in-place, making a backup copy as test.pl.bak:"
.Vb 1
\&    crypt_file \-i \-b \*(Aq*.bak\*(Aq test.pl
.Ve
.IP "Process \fBtest.pl\fR in-place, with no backup copy:" 4
.IX Item "Process test.pl in-place, with no backup copy:"
.Vb 1
\&    crypt_file \-i test.pl
.Ve
.IP "Process all \fB*.pl\fR files within \fI/tmp\fR and all sub-directories in-place:" 4
.IX Item "Process all *.pl files within /tmp and all sub-directories in-place:"
.Vb 1
\&    crypt_file \-i \-d /tmp \-r \*(Aq*.pl\*(Aq
.Ve
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.IP "\s-1PERL_CRYPT_FILE_OPTS\s0" 4
.IX Item "PERL_CRYPT_FILE_OPTS"
Specify options to be prepended to the list of command-line options before the
option processing takes place.
.Sp
Note that as far as quoting and escaping is concerned, the environment variable
value is interpreted in the same way as the Bourne shell would interpret the
corresponding command-line.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Filter::Crypto,
Filter::Crypto::CryptFile.
.SH "AUTHOR"
.IX Header "AUTHOR"
Steve Hay <shay@cpan.org <mailto:shay@cpan.org>>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2004\-2006, 2012, 2014 Steve Hay.  All rights reserved.
.SH "LICENCE"
.IX Header "LICENCE"
This script is free software; you can redistribute it and/or modify it under the
same terms as Perl itself, i.e. under the terms of either the \s-1GNU\s0 General Public
License or the Artistic License, as specified in the \fI\s-1LICENCE\s0\fR file.
.SH "VERSION"
.IX Header "VERSION"
Version 2.08
.SH "DATE"
.IX Header "DATE"
31 Jul 2018
.SH "HISTORY"
.IX Header "HISTORY"
See the \fIChanges\fR file.
