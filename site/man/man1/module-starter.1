.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MODULE-STARTER 1"
.TH MODULE-STARTER 1 "2020-09-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
module\-starter \- creates a skeleton module distribution
.SH "VERSION"
.IX Header "VERSION"
version 1.77
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
module-starter [options]
.PP
Options:
.PP
.Vb 3
\&    \-\-module=module  Module name (required, repeatable)
\&    \-\-distro=name    Distribution name (optional)
\&    \-\-dir=dirname    Directory name to create new module in (optional)
\&
\&    \-\-builder=module Build with \*(AqExtUtils::MakeMaker\*(Aq or \*(AqModule::Build\*(Aq
\&    \-\-eumm           Same as \-\-builder=ExtUtils::MakeMaker
\&    \-\-mb             Same as \-\-builder=Module::Build
\&    \-\-mi             Same as \-\-builder=Module::Install (discouraged)
\&
\&    \-\-author=name    Author\*(Aqs name (taken from getpwuid if not provided)
\&    \-\-email=email    Author\*(Aqs email (taken from EMAIL if not provided)
\&
\&    \-\-ignores=type   Ignore type files to include (repeatable)
\&    \-\-license=type   License under which the module will be distributed
\&                     (default is artistic2)
\&    \-\-genlicense     Generate LICENSE file according to specified license
\&    \-\-minperl=ver    Minimum Perl version required (optional;
\&                     default is 5.006)
\&
\&    \-\-fatalize       Generate code that causes all warnings to be fatal with:
\&                     use warnings FATAL => \*(Aqall\*(Aq
\&
\&    \-\-verbose        Print progress messages while working
\&    \-\-force          Delete pre\-existing files if needed
\&
\&    \-\-help           Show this message
.Ve
.PP
Available Licenses:
.PP
.Vb 2
\&    perl, artistic, artistic2, mit, mozilla, mozilla2, bsd, freebsd, cc0,
\&    gpl, lgpl, gpl3, lgpl3, agpl3, apache, qpl
.Ve
.PP
You may also specify any Software::License subclass or
\&\s-1CPAN\s0 Meta Spec license string.
.PP
Available Ignore Types:
.PP
.Vb 3
\&    cvs, git, hg, manifest, generic
\&    (NOTE: If manifest is included, the MANIFEST file will be skipped
\&    and only a MANIFEST.SKIP file will be included.)
.Ve
.PP
Example:
.PP
.Vb 2
\&    module\-starter \-\-module=Foo::Bar,Foo::Bat \e
\&        \-\-author="Andy Lester" \-\-email=andy@petdance.com
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`module\-starter\*(C'\fR is a command-line interface to Module::Starter, which it
uses to perform all the work of creating distributions.  An alternate backend
for \f(CW\*(C`module\-starter\*(C'\fR can be specified with the \f(CW\*(C`\-\-class\*(C'\fR option.  Plugins to
the standard Module::Starter module can be specified with one or more
\&\f(CW\*(C`\-\-plugin\*(C'\fR options.
.PP
If no directory name is supplied, the distribution name will be used for the
directory.  If no distribution name is supplied, the first listed module name
will be used as the distribution name.
.PP
Multiple \-\-builder options may be supplied to produce the files for multiple
builders.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
module-starter will look for a configuration file before reading its command
line parameters.  The default location is \f(CW\*(C`$HOME/.module\-starter/config\*(C'\fR but
if the \s-1MODULE_STARTER_DIR\s0 environment variable is set, module-starter will look
for \f(CW\*(C`config\*(C'\fR in that directory.
.PP
The configuration file is just a list of names and values, separated by
colons.  Values that take lists are just space separated. Note that the
\&\f(CW\*(C`\-\-ignores\*(C'\fR command line parameter corresponds to the \f(CW\*(C`ignores_type\*(C'\fR
configuration file entry. A sample configuration file might read:
.PP
.Vb 5
\& author: Ricardo SIGNES
\& email:  rjbs@cpan.org
\& ignores_type: git
\& plugins: Module::Starter::Simple Module::Starter::Plugin::XYZ
\& xyz_option: red green blue
.Ve
.PP
This format may become more elaborate in the future, but a file of this type
should remain valid.
