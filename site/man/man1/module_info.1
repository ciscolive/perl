.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MODULE_INFO 1"
.TH MODULE_INFO 1 "2015-06-15" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
module_info \- find information about modules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  module_info [B<\-a>] [B<\-s>] [B<\-p>] [B<\-m>] MODULE|FILE...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
List information about the arguments (either module names in the form
\&\f(CW\*(C`Module::Name\*(C'\fR or paths in the form \f(CW\*(C`Foo/Bar.pm\*(C'\fR or \f(CW\*(C`foo/bar.pl\*(C'\fR).
.PP
By default only shows module name, version, directory, absolute path
and a flag indicating if it is a core module. Additional information
can be requested through command line switches.
.IP "\fB\-s\fR" 4
.IX Item "-s"
Show subroutines created by the module.
.IP "\fB\-p\fR" 4
.IX Item "-p"
Show packages created by the module.
.IP "\fB\-m\fR" 4
.IX Item "-m"
Show modules \f(CW\*(C`use()\*(C'\fRd by the module.
.IP "\fB\-a\fR" 4
.IX Item "-a"
Equivalent to \f(CW\*(C`\-s \-p \-m\*(C'\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Mattia Barbon <mbarbon@cpan.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Module::Info
