.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "NAS 1"
.TH NAS 1 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
nas \- Create Reusable Session Scripts
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& $ nas \-\-help
\&
\&  nas [options] [hostname or IP]
\&
\&  \-p, \-\-personality  Device <personality> (default: "ios")
\&  \-t, \-\-transport    <transport> method (Serial, Telnet, default: SSH)
\&  \-u, \-\-username     <username> to connect as on device (default: $USER)
\&                     
\&  \-R, \-\-record       Record session
\&  \-P, \-\-playback     Play back session
\&  \-s, \-\-script       When recording, save playback script to this <filename>
\&  \-l, \-\-cmdlog       NAS <file> to record commands to, or play them back from
\&                     
\&  \-e, \-\-exit\-last    Num. of output lines from last command is program exit status
\&  \-c, \-\-cloginrc     RANCID cloginrc <file> with device credentials
\&  \-z, \-\-nopassword   Do not ask for device password (if not using cloginrc)
\&  \-o, \-\-echo         Echo commands sent, when playing back the recorded script/cmdlog
\&  \-M, \-\-paging       Do not attempt to disable command output paging
\&  \-B, \-\-nobanner     Suppress display of any login banner received from the device
\&                     
\&  \-q, \-\-quiet        Hide informational messages
\&  \-v, \-\-verbose      NCI log <level> ("debug", "notice", "info", etc)
\&  \-V, \-\-version      Display this program\*(Aqs version number
\&  \-h, \-\-help         Display this help text
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Use this program to help write reusable Net::Appliance::Session scripts,
play them back, and also to more easily connect to network devices.
.IP "\(bu" 4
Start a connection to a network device using \s-1CLI\s0 switches, and prompts for
credentials. This is easier than writing short Perl programs.
.IP "\(bu" 4
Record a set of commands issued to one network device into a command log, then
replay that log against other devices (\f(CW\*(C`\-R \-l <log>\*(C'\fR and \f(CW\*(C`\-P \-l <log>\*(C'\fR).
.IP "\(bu" 4
Record a session and produce a Perl script which when run, replays the session
to the same host, or overridable to other devices (\f(CW\*(C`\-R \-s <script>\*(C'\fR and
then run the script).
.PP
Once connected to the device you can enter any command and it will be run.
.SH "GENERAL USAGE NOTES"
.IX Header "GENERAL USAGE NOTES"
The \f(CW\*(C`exit\-last\*(C'\fR option can be useful for creating a session script which
checks for some error condition. Assuming the last command should have no
output on success, then the exit status of the script will be non-zero when
there's a problem. Use this with \f(CW\*(C`\-R\*(C'\fR to make a reuseable script.
.PP
To play a script with no output other than that returned from the device in
response to sent commands, use the switch combination \f(CW\*(C`\-Bqoz\*(C'\fR. Note that you
will need to be able to login automatically, and \s-1RANCID\s0 config isn't yet
supported.
.PP
If you don't provide a hostname or \s-1IP\s0 then the script goes into a loop waiting
for the hostname on standard input. This way, you can pipe a list of device
names to the script and it will execute the commands on each one.
.PP
In case you didn't know, the library has support for connecting to linux boxes
using the \f(CW\*(C`\-p bash\*(C'\fR setting to chose the Bash shell personality.
.PP
Getting to be a super-user is a little clunky at the moment. I need to work on
that a little more. Take care that your scripts don't contain any passwords!
.SH "SPECIAL FEATURES"
.IX Header "SPECIAL FEATURES"
The methods of Net::Appliance::Session are available by using the command
\&\f(CW\*(C`!s <method\-name>\*(C'\fR. The best use of this is to gracefully disconnect, by
issuing:
.PP
.Vb 1
\& !s close
.Ve
.PP
You can also enter the command \f(CW\*(C`!m\*(C'\fR to see a list of available Macros. If you
don't know what a Macro is, please move a long, there's nothing to see here.
You run a Macro with the \f(CW\*(C`!m <macro\-name> [params]\*(C'\fR command.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
https://github.com/aol/trigger
.IP "\(bu" 4
http://www.shrubbery.net/rancid/
.SH "AUTHOR"
.IX Header "AUTHOR"
Oliver Gorwits <oliver@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2019 by Oliver Gorwits.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
