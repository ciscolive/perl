.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "CPANM-REPORTER 1"
.TH CPANM-REPORTER 1 "2016-04-23" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
cpanm\-reporter \- send cpanm output to CPAN Testers
.SH "SETUP"
.IX Header "SETUP"
New to \s-1CPAN\s0 Testers' reporting? No problem! Just run:
.PP
.Vb 1
\&   > cpanm\-reporter \-\-setup
.Ve
.PP
And we will walk you through everything you need :)
.PP
(if you already use CPAN::Reporter, you can safely skip the setup)
.SH "USAGE"
.IX Header "USAGE"
Call cpanm as you normally would:
.PP
.Vb 1
\&   > cpanm Moose Catalyst::Runtime Data::Printer ...
.Ve
.PP
then, just call cpanm-reporter:
.PP
.Vb 1
\&   > cpanm\-reporter
.Ve
.SS "\s-1OPTIONAL ARGUMENTS\s0"
.IX Subsection "OPTIONAL ARGUMENTS"
.Vb 1
\&   \-\-version              Shows version number and exits
\&
\&   \-\-help                 Shows basic usage help and exits
\&
\&   \-\-build_dir=PATH       Where your build directory is, containing
\&                          each dist\*(Aqs subdir. Default: $HOME/.cpanm/latest\-build
\&
\&   \-\-build_logfile=PATH   Where the build.log is. Default: $BUILD_DIR/build.log
\&
\&   \-\-verbose (or \-v)      Extra output
\&
\&   \-\-quiet (or \-q)        As little output as possible (voids \-v)
\&
\&   \-\-setup                Sets up the CPAN Testers configuration for you
\&
\&   \-\-only=A::B,C::D,...   Only send reports for these modules
\&
\&   \-\-exclude=A::B,...     Don\*(Aqt send reports for these modules
\&   
\&   \-\-dry\-run              Prepare, but do not actually send reports
\&
\&   \-\-skip\-history         Do not read nor write to the history file
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This app properly parses the output of cpanm (\f(CW\*(C`build.log\*(C'\fR) to
automatically generate and send reports to the \s-1CPAN\s0 Testers database.
.PP
\&\f(CW\*(C`cpanm\*(C'\fR has quickly become one of the most used \s-1CPAN\s0 clients out there, but
it doesn't come with a native way to generate and send test reports to the
\&\s-1CPAN\s0 Testers infrastructure. This standalone app is able to interact with
your cpanm after you install a module, and do that for you.
.SS "\s-1CONFIGURATION AND ENVIRONMENT\s0"
.IX Subsection "CONFIGURATION AND ENVIRONMENT"
You can use configuration files with different names and locations by setting
the following environment variables:
.IP "\(bu" 4
\&\s-1PERL_CPAN_REPORTER_DIR\s0
.Sp
The base directory in which your '\f(CW\*(C`config.ini\*(C'\fR' file resides. Defaults to
your home directory (if you're using Linux or \s-1OS X\s0) or to the 'my documents'
folder (if you're running Windows).
.IP "\(bu" 4
\&\s-1PERL_CPAN_REPORTER_CONFIG\s0
.Sp
In case you don't want to change just the base directory but the entire file's
path and name, you can set this variable to point at the new 'config.ini' file.
.PP
If you called \f(CW\*(C`cpanm\-reporter \-\-setup\*(C'\fR, you can also set \f(CW\*(C`PERL_MM_USE_DEFAULT\*(C'\fR
to true and it will answer any prompted question automatically with its default
value, if possible.
.SH "CAVEATS"
.IX Header "CAVEATS"
.IP "\(bu" 4
This is a standalone tool that reads cpanm's \f(CW\*(C`build.log\*(C'\fR file,
meaning it can potentially be run any time after cpanm has done its thing.
As such, you must be cautious to only run this tool \fIright after\fR you run
cpanm, otherwise your whole environment may have changed, rendering the
report useless \- maybe even turning it into a disservice.
.Sp
\&\fBAs such, we will *only* parse build.log files last modified up to 30
minutes before.\fR You can override this by passing the \f(CW\*(C`\-\-force\*(C'\fR flag
to cpanm-reporter, but please take good care to avoid sending bogus reports.
.IP "\(bu" 4
cpanm currently does \fBnot\fR record the output into your build.log file
if you pass the \*(L"verbose\*(R" argument to it, either \f(CW\*(C`\-\-verbose\*(C'\fR or \f(CW\*(C`\-v\*(C'\fR. If
you used those when installing dists, \f(CW\*(C`cpanm\-reporter\*(C'\fR won't find anything
to send :(
.IP "\(bu" 4
cpanm-reporter is an external, auxiliary tool to cpanm. Since they're
not attached, you must take care not to change perls or local-libs between
installing distributions with \f(CW\*(C`cpanm\*(C'\fR and generating/sending the reports with
\&\f(CW\*(C`cpanm\-reporter\*(C'\fR. If you're not a power user, you don't have to worry about
this. Just remember to run cpanm-reporter immediately after cpanm and
everything will be fine :)
.Sp
As an added precaution, cpanm-reporter will skip build.log entries in which
the Perl version recorded in the build.log is different than the Perl version
that is generating the report. The entries will be skipped silently unless
the \f(CW\*(C`\-\-verbose\*(C'\fR or \f(CW\*(C`\-v\*(C'\fR flag is passed. This version check can be ignored
by passing the \f(CW\*(C`\-\-ignore\-versions\*(C'\fR flag to cpanm-reporter. Obviously, this
is discouraged since it would result in the sending of bogus reports.
.SH "AUTHOR"
.IX Header "AUTHOR"
Breno G. de Oliveira  \f(CW\*(C`<garu@cpan.org>\*(C'\fR
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2012\-2015, Breno G. de Oliveira \f(CW\*(C`<garu@cpan.org>\*(C'\fR. All rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
.SH "DISCLAIMER OF WARRANTY"
.IX Header "DISCLAIMER OF WARRANTY"
\&\s-1BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE SOFTWARE \*(L"AS IS\*(R" WITHOUT WARRANTY OF ANY KIND, EITHER
EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE SOFTWARE IS WITH
YOU. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
NECESSARY SERVICING, REPAIR, OR CORRECTION.\s0
.PP
\&\s-1IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENCE, BE
LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL,
OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
THE SOFTWARE\s0 (\s-1INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE\s0), \s-1EVEN IF
SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.\s0
