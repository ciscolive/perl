.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MVERSION 1"
.TH MVERSION 1 "2019-02-24" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
mversion \- Program for querying Perl module versions
.SH "VERSION"
.IX Header "VERSION"
version 0.201
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This program shows you the version of a module or several modules, in a
comfortable manner.
.PP
.Vb 3
\&    mversion Dancer
\&    mversion \-\-dev \-\-full This That Another
\&    mversion \-q \-i modules.txt
.Ve
.PP
In Perl-world, we have many ways to determine a version of a module. You can
run \f(CW\*(C`perl \-MModule \-le\*(Aqprint $Module::Version\*(Aq\*(C'\fR, but once the name is very long
it becomes tiresome to write.
.PP
We can try to load the module in a specific version that is (hopefully) greater
than what we already have installed (if at all). That way we purposely inflict
an error on the compiler and try to read the error msg. \f(CW\*(C`perl \-MModule\e 9999\*(C'\fR.
This does not work on multiple modules at once. Some modules even have long
version numbers, such as a date, and then you need to run \f(CW\*(C`perl
\&\-MModule\e 9999999999\*(C'\fR which is seriously annoying.
.PP
There are a few modules out there that get you the version number of other
modules but none of them are applications, nor do they have enough options for
comfortable day-to-day usage. This is where \f(CW\*(C`mversion\*(C'\fR comes in.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\-f, \-\-full" 4
.IX Item "-f, --full"
This outputs both the name and the version of module, instead of just the
version number.
.Sp
.Vb 2
\&    mversion \-f ThisModule ThatModule
\&    mversion \-\-full ThisModule ThatModule
.Ve
.IP "\-I, \-\-include \s-1DIRECTORY,\s0 \-I \s-1MORE,\s0 \-I \s-1EVENMORE\s0" 4
.IX Item "-I, --include DIRECTORY, -I MORE, -I EVENMORE"
This lets you add any number of directories to include when trying to get a
version number. This is very helpful when you're trying to check if the version
of a module in a specific folder is different than the default one.
.Sp
.Vb 2
\&    # get the version of ThisModule
\&    mversion ThisModule
\&
\&    # get the version of ThisModule from directory dev_releases
\&    mversion \-I dev_releases ThisModule
.Ve
.Sp
You can include more directories by repeating the flag and argument again. There
is no limit to how many directories you can include.
.IP "\-i, \-\-input \s-1FILE\s0" 4
.IX Item "-i, --input FILE"
This reads a list of modules from a file.
.Sp
.Vb 2
\&    mversion \-i my_modules.txt
\&    mversion \-\-input my_modules.txt
.Ve
.IP "\-l, \-\-local\-lib \s-1DIR\s0" 4
.IX Item "-l, --local-lib DIR"
Includes the local::lib \s-1DIR\s0 in the module paths.
.IP "\-d, \-\-dev" 4
.IX Item "-d, --dev"
This shows the developer versions (0.01_01) just as that instead of \fBeval()\fRing
them.
.Sp
.Vb 2
\&    mversion \-d Test::More
\&    mversion \-\-dev Test::More
.Ve
.IP "\-q, \-\-quiet" 4
.IX Item "-q, --quiet"
Usually if a module does not exist, \f(CW\*(C`mversion\*(C'\fR will warn about it. This
allows you to silent those warnings and just carry on.
.Sp
.Vb 2
\&    mversion \-q This::Does::Not::Exist But::This::Does
\&    mversion \-\-quiet This::Does::Not::Exist But::This::Does
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Module::Version
.PP
Github page at <http://github.com/xsawyerx/module\-version>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Sawyer X
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2010\-2018 by Sawyer X.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
