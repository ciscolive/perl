.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "NETDISCO-SSHCOLLECTOR 1"
.TH NETDISCO-SSHCOLLECTOR 1 "2020-11-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
netdisco\-sshcollector \- DEPRECATED!
.SH "DEPRECATION NOTICE"
.IX Header "DEPRECATION NOTICE"
The functionality of this standalone script has been incorporated into Netdisco core.
.PP
Please read the deprecation notice if you are using \f(CW\*(C`netdisco\-sshcollector\*(C'\fR:
.IP "\(bu" 4
<https://github.com/netdisco/netdisco/wiki/sshcollector\-Deprecation>
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& # install dependencies:
\& ~/bin/localenv cpanm \-\-notest Net::OpenSSH Expect
\&
\& # run manually, or add to cron:
\& ~/bin/netdisco\-sshcollector [\-DQO] [\-w <max_workers>] 
\&
\& # limit run to a single device defined in the config
\& ~/bin/netdisco\-sshcollector [\-DQO] [\-w <max_workers>] \-d <device>
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Collects \s-1ARP\s0 data for Netdisco from devices without full \s-1SNMP\s0 support.
Currently, \s-1ARP\s0 tables can be retrieved from the following device classes:
.IP "\(bu" 4
App::Netdisco::SSHCollector::Platform::GAIAEmbedded \- Check Point \s-1GAIA\s0 Embedded
.IP "\(bu" 4
App::Netdisco::SSHCollector::Platform::CPVSX \- Check Point \s-1VSX\s0
.IP "\(bu" 4
App::Netdisco::SSHCollector::Platform::ACE \- Cisco \s-1ACE\s0
.IP "\(bu" 4
App::Netdisco::SSHCollector::Platform::ASA \- Cisco \s-1ASA\s0
.IP "\(bu" 4
App::Netdisco::SSHCollector::Platform::IOS \- Cisco \s-1IOS\s0
.IP "\(bu" 4
App::Netdisco::SSHCollector::Platform::IOSXR \- Cisco \s-1IOS XR\s0
.IP "\(bu" 4
App::Netdisco::SSHCollector::Platform::NXOS \- Cisco \s-1NXOS\s0
.IP "\(bu" 4
App::Netdisco::SSHCollector::Platform::BigIP \- F5 Networks BigIP
.IP "\(bu" 4
App::Netdisco::SSHCollector::Platform::FreeBSD \- FreeBSD
.IP "\(bu" 4
App::Netdisco::SSHCollector::Platform::Linux \- Linux
.IP "\(bu" 4
App::Netdisco::SSHCollector::Platform::PaloAlto \- Palo Alto
.PP
The collected arp entries are then directly stored in the netdisco database.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
The following should go into your Netdisco configuration file,
\&\fI~/environments/deployment.yml\fR.
.ie n .IP """sshcollector""" 4
.el .IP "\f(CWsshcollector\fR" 4
.IX Item "sshcollector"
Data is collected from the machines specified in this setting. The format is a
list of dictionaries. The keys \f(CW\*(C`ip\*(C'\fR, \f(CW\*(C`user\*(C'\fR, \f(CW\*(C`password\*(C'\fR, and \f(CW\*(C`platform\*(C'\fR
are required. Optionally the \f(CW\*(C`hostname\*(C'\fR key can be used instead of the
\&\f(CW\*(C`ip\*(C'\fR. For example:
.Sp
.Vb 9
\& sshcollector:
\&   \- ip: \*(Aq192.0.2.1\*(Aq
\&     user: oliver
\&     password: letmein
\&     platform: IOS
\&   \- hostname: \*(Aqcore\-router.example.com\*(Aq
\&     user: oliver
\&     password:
\&     platform: IOS
.Ve
.Sp
Platform is the final part of the classname to be instantiated to query the
host, e.g. platform \fB\s-1ACE\s0\fR will be queried using
\&\f(CW\*(C`App::Netdisco::SSHCollector::Platform::ACE\*(C'\fR.
.Sp
If the password is blank, public key authentication will be attempted with the
default key for the netdisco user. Password protected keys are currently not
supported.
.SH "ADDING DEVICES"
.IX Header "ADDING DEVICES"
Additional device classes can be easily integrated just by adding and
additonal class to the \f(CW\*(C`App::Netdisco::SSHCollector::Platform\*(C'\fR namespace.
This class must implement an \f(CW\*(C`arpnip($hostname, $ssh)\*(C'\fR method which returns
an array of hashrefs in the format
.PP
.Vb 1
\& @result = ({ ip => IPADDR, mac => MACADDR }, ...)
.Ve
.PP
The parameter \f(CW$ssh\fR is an active \f(CW\*(C`Net::OpenSSH\*(C'\fR connection to the host.
Depending on the target system, it can be queried using simple methods like
.PP
.Vb 1
\& my @data = $ssh\->capture("show whatever")
.Ve
.PP
or automated via Expect \- this is mostly useful for non-Linux appliances which
don't support command execution via ssh:
.PP
.Vb 10
\& my ($pty, $pid) = $ssh\->open2pty;
\& unless ($pty) {
\&   debug "unable to run remote command [$hostlabel] " . $ssh\->error;
\&   return ();
\& }
\& my $expect = Expect\->init($pty);
\& my $prompt = qr/#/;
\& my ($pos, $error, $match, $before, $after) = $expect\->expect(10, \-re, $prompt);
\& $expect\->send("terminal length 0\en");
\& # etc...
.Ve
.PP
The returned \s-1IP\s0 and \s-1MAC\s0 addresses should be in a format that the respective
\&\fBinetaddr\fR and \fBmacaddr\fR datatypes in PostgreSQL can handle.
.SH "COMMAND LINE OPTIONS"
.IX Header "COMMAND LINE OPTIONS"
.ie n .IP """\-D""" 4
.el .IP "\f(CW\-D\fR" 4
.IX Item "-D"
Netdisco debug log level.
.ie n .IP """\-Q""" 4
.el .IP "\f(CW\-Q\fR" 4
.IX Item "-Q"
DBIx::Class trace enabled.
.ie n .IP """\-O""" 4
.el .IP "\f(CW\-O\fR" 4
.IX Item "-O"
Net::OpenSSH trace enabled.
.ie n .IP """\-w""" 4
.el .IP "\f(CW\-w\fR" 4
.IX Item "-w"
Set maximum parallel workers for MCE::Loop. The default is \fBauto\fR.
.ie n .IP """\-d device""" 4
.el .IP "\f(CW\-d device\fR" 4
.IX Item "-d device"
Only run for a single device. Takes an \s-1IP\s0 or hostname, must exactly match the
value in the config file.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.IP "App::Netdisco" 4
.IX Item "App::Netdisco"
.PD 0
.IP "Net::OpenSSH" 4
.IX Item "Net::OpenSSH"
.IP "Expect" 4
.IX Item "Expect"
.IP "<http://www.openssh.com/>" 4
.IX Item "<http://www.openssh.com/>"
