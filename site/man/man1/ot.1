.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "OT 1"
.TH OT 1 "2020-08-14" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ot \- parse text and (hopefully) open an editor with the correct arguments
.SH "VERSION"
.IX Header "VERSION"
version 0.000024
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    ot "lib/Foo/Bar.pm line 222"
\&    # Executes $ENV{EDITOR} +222 lib/Foo/Bar.pm
\&
\&    ot "./lib/Foo/Bar.pm:135:20: blah;"
\&    # If you\*(Aqre using vim, opens your file at line 135 and column 20.
\&    # Otherwise, executes $ENV{EDITOR} +222 lib/Foo/Bar.pm This is handy if you
\&    # use, for example, ripgrep:
\&    # rg \-\-vimgrep blah
\&
\&    # open Foo::Bar which is in your lib, t/lib or @INC
\&    ot Foo::Bar
\&
\&    # open Foo::Bar at the do_something() subroutine
\&    ot "Foo::Bar::do_something()"
\&
\&    # open Foo::Bar at the do_something() subroutine
\&    ot "Foo::Bar::do_something(\*(AqHASH(0x25521248)\*(Aq)"
\&
\&    # open output from git\-grep
\&    ot lib/Open/This.pm:17
\&
\&    # Find a core module
\&    ot Test::More
\&
\&    # Open a core module at a function
\&    ot "Test::More::diag()"
\&
\&    # Open a binary which is in your $ENV{PATH}
\&    ot cpanm
\&
\&    # Open a binary which is in your $ENV{PATH} at an arbitrary column and line
\&    ot cpanm:10:3
\&
\&    # open Foo::Bar on the GitHub web site in your browser
\&    ot \-b Foo::Bar
\&
\&    # open a file locally, using a GitHub link.  You must be at the top level
\&    # of this repository on a local checkout.
\&    ot https://github.com/oalders/git\-helpers/blob/master/lib/Git/Helpers.pm#L50
\&
\&    # open a file that was mentioned in the output of diff or
\&    # git diff or git log \-p, etc:
\&    # (this will open foo/bar if it exists)
\&    ot a/foo/bar
\&
\&    # open "/foo/bar.txt" as it appears in an Ansible error message
\&    # (Note the quotes around the arg)
\&    ot "The error appears to be in \*(Aq/foo/bar.txt\*(Aq: line 14, column 16, but may be"
\&
\&    # open "/foo/bar.java:[3,5]" as it appears in Maven\*(Aqs test output
\&    ot /foo/bar.java:[3,5]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
It can be a pain to have to copy Perl module names from a stack trace or some
other output and have to translate that into something which an editor like vim
understands.  This module aims to take some of the pain out of this.  So far I
have tested this only with vim, but I *think* this should also work with emacs
and nano.
.PP
The \f(CW\*(C`ot\*(C'\fR script can parse line numbers from text so that you can open your
files at the correct starting point.  It will also try to translate subroutine
names into the appropriate line numbers.  It will look in a lib or t/lib
directory relative to your current path.  If it thinks it has a Perl module
name it will also try to require it and use \f(CW%INC\fR in order to find the module on
disks.  All security caveats apply when requiring 3rd party modules.
.SH "ENVIRONMENT VARIABLES"
.IX Header "ENVIRONMENT VARIABLES"
By default, \f(CW\*(C`ot\*(C'\fR will search your \f(CW\*(C`lib\*(C'\fR and \f(CW\*(C`t/lib\*(C'\fR directories for local files.  You can override this via the \f(CW$ENV{OPEN_THIS_LIBS}\fR variable.  It accepts a comma-separated list of libs.
.PP
.Vb 1
\&    export OPEN_THIS_LIBS=lib,t/lib,t/other\-lib
.Ve
.PP
Or
.PP
.Vb 1
\&    OPEN_THIS_LIBS=lib,t/lib,t/other\-lib ot Foo::Bar
.Ve
.PP
Probably you want to export this variable in your \f(CW\*(C`~/.bashrc\*(C'\fR file (or some
other appropriate place in your dot files.
.SH "SUPPORTED EDITORS"
.IX Header "SUPPORTED EDITORS"
This code has been well tested with \f(CW\*(C`vim\*(C'\fR.  It should also work with \f(CW\*(C`nvim\*(C'\fR,
\&\f(CW\*(C`emacs\*(C'\fR, \f(CW\*(C`pico\*(C'\fR, \f(CW\*(C`nano\*(C'\fR and \f(CW\*(C`kate\*(C'\fR.  Patches for other editors are very
welcome.
.SH "AUTHOR"
.IX Header "AUTHOR"
Olaf Alders <olaf@wundercounter.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2018 by Olaf Alders.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
