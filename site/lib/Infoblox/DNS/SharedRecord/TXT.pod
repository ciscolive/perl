=head1 NAME

Infoblox::DNS::SharedRecord::TXT - DNS shared TXT record object.

=head1 DESCRIPTION

A shared TXT record is similar to a regular TXT record. It contains supplemental information for a host. SPF (Sender Policy Framework) records are specialized TXT records that identify the servers that send mail from a domain. The difference is that shared TXT records should be added into a shared record group. If this shared record group is associated with other zones, then this shared TXT record will be shared into these zones. For more information about how shared record groups and shared records work, please refer to Infoblox Administrator Guide.

=head1 CONSTRUCTOR

 my $txt = Infoblox::DNS::SharedRecord::TXT->new(
     name                    => $fqdn,             #Required
     text                    => $string            #Required
     shared_record_group     => $string,           #Required
     comment                 => $string,           #Optional / Default is empty
     disable                 => "true" | "false"   #Optional / Default "false"
     extattrs                => { $string => $extattr, ... },      #Optional / Default is undefined
     extensible_attributes => { $string => $string|$num, $string => [ $string|$num, ...], ... }, #Optional / Default is undefined
     ttl                     => $num | undef,      #Optional / Default is undefined
 );

You cannot set both extattrs and extensible_attributes attributes at the same time.

=head1 SESSION METHODS

This section describes all the methods in Infoblox::Session module that you can apply to a TXT shard record object.

=head2 Infoblox::Session->add( )

=over

Use this method to add an object to the Infoblox appliance. See L<Infoblox::Session-E<gt>add()|Infoblox::Session/add()/> for parameters and return values.

=over

=item B<Example>

 #Construct the TXT object
 my $srg_txt = Infoblox::DNS::SharedRecord::TXT->new(
     name    => "txt",
     text    => "this is text string",
     comment => "add TXT txt",
     disable => "false",
     ttl     => "360",
     shared_record_group => "test_srg" );
 # Submit for addition
 my $response = $session->add( $srg_txt );

=back

=back

=head2 Infoblox::Session->get( )

=over

Use this method to retrieve all the matching objects from the Infoblox appliance. See L<Infoblox::Session-E<gt>get()|Infoblox::Session/get()/> for parameters and return values.

=over

=item B<Key References>

 Apply the following attributes to get a specific DNS shared TXT object:

  name - Required. Host name in string format.
  extattrs     - Optional. A hash reference containing extensible attributes.
  extensible_attributes - Optional. A hash reference containing extensible attributes.

=item B<Example>

 my @retrieved_objs = $session->get(
     object => "Infoblox::DNS::SharedRecord::TXT",
     name   => "txt");

 # get all shared TXT records with a given extensible attribute
 my @retrieved_objs = $session->get(
     object => "Infoblox::DNS::SharedRecord::TXT",
     extensible_attributes => { 'Site' => 'Santa Clara' });

=back

=back

=head2 Infoblox::Session->modify( )

=over

Use this method to modify an object in the Infoblox appliance. See L<Infoblox::Session-E<gt>modify()|Infoblox::Session/modify()/> for parameters and return values.

=over

=item B<Example>

 # Use method to modify the comment.
 $srg_txt->comment("This is a modified comment");
 # Submit modification
 my $response = $session->modify( $srg_txt );

=back

=back

=head2 Infoblox::Session->remove( )

=over

Use this method to remove an object from the Infoblox appliance. See L<Infoblox::Session-E<gt>remove()|Infoblox::Session/remove()/> for parameters and return values.

To remove a specifc object, first use get() or search() to retrieve the specific object, and then submit this object for removal.

=over

=item B<Example>

 # Get the objects with the same name
 my @retrieved_objs = $session->get(
     object => "Infoblox::DNS::SharedRecord::TXT",
     name   => "txt");

 # find the desired object from the retrieved list.
 my $desired_txt = $retrieved_objs[0];
 # Submit for removal
 my $response = $session->remove( $ desired_txt );

=back

=back

=head2 Infoblox::Session->search( )

=over

Use this method to search for DNS shared TXT record objects in the Infoblox appliance. See L<Infoblox::Session-E<gt>search()|Infoblox::Session/search()/> for parameters and return values.

=over

=item B<Key References>

 Apply the following attributes to search for a DNS shared TXT record object:

  name    - Required. Reverse domain name of the TXT record (regular expression).
  comment - Optional. A comment in string format (regular expression).
  extattrs     - Optional. A hash reference containing extensible attributes.
  extensible_attributes - Optional. A hash reference containing extensible attributes.

For more information about searching extensible attributes, see L<Infoblox::Grid::ExtensibleAttributeDefE<sol>Searching Extensible Attributes|Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes>.

=item B<Example>

 # search for all DNS shared TXT objects.
 my @retrieved_objs = $session->search(
     object => "Infoblox::DNS::SharedRecord::TXT",
     name   => ".*");

 # search all DNS shared TXT records with the extensible attribute 'Site'
 my @retrieved_objs = $session->search(
    object => "Infoblox::DNS::SharedRecord::TXT",
    extensible_attributes => { 'Site' => 'Santa Clara' });

=back

=back

=head1 METHODS

This section describes all the methods that you can use to configure and retrieve the attribute values of a DNS shared TXT record object.

=head2 comment( )

=over

Use this method to set or retrieve the descriptive comment of a DNS shared TXT record.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Desired comment in string format with a maximum of 256 bytes.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get comment
 my $comment = $srg_txt->comment();
 #Modify comment
 $srg_txt->comment("Modifying the DNS shared TXT comment");

=back

=back

=head2 disable( )

=over

Use this method to set or retrieve the disable flag of a DNS shared TXT record.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

The default value for this field is false. The DNS shared TXT record is enabled.

=over

=item B<Parameter>

Specify "true" to set the disable flag or "false" to deactivate/unset it.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get disable
 my $disable = $srg_txt->disable();
 #Modify disable
 $srg_txt->disable("true");

=back

=back

=head2 dns_name( )

=over

Use this method to retrieve the name, in punycode format, of a DNS shared TXT record. This is a read-only attribute.

=over

=item B<Parameter>

None

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 # Get attribute value
 my $value = $srg_txt->dns_name();

=back

=back

=head2 extattrs( )

=over

Use this method to set or retrieve the extensible attributes associated with a DNS shared TXT record object.

=over

=item B<Parameter>

Valid value is a hash reference containing the names of extensible attributes and their associated values ( L<Infoblox::Grid::Extattr|Infoblox::Grid::Extattr> objects ).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get extattrs
 my $ref_extattrs = $srg_txt->extattrs();
 #Modify extattrs
 $srg_txt->extattrs({ 'Site' => $extattr1, 'Administrator' => $extattr2 });

=back

=back

=head2 extensible_attributes( )

=over

Use this method to set or retrieve the extensible attributes associated with a DNS shared TXT record.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

For valid values for extensible attributes, see L<Infoblox::Grid::ExtensibleAttributeDefE<sol>Extensible Attribute Values|Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values>.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get extensible attributes
 my $ref_extensible_attributes = $srg_txt->extensible_attributes();
 #Modify extensible attributes
 $srg_txt->extensible_attributes({ 'Site' => 'Santa Clara', 'Administrator' => [ 'Peter', 'Tom' ] });

=back

=back

=head2 name( )

=over

Use this method to set or retrieve the name of a DNS shared TXT record.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

The attribute value can be in unicode format.

=over

=item B<Parameter>

The name of the DNS shared TXT object. The name can have a maximum of 256 bytes.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get name
 my $name = $srg_txt->name();
 #Modify name
 $srg_txt->name("new");

=back

=back

=head2 text( )

=over

Use this method to set or retrieve the text of a DNS shared TXT record.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Text that you want to associate with the record. It can contain up to 255 bytes.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get name
 my $name = $srg_txt->text();
 #Modify name
 $srg_txt->text("this is new text string");

=back

=back

=head2 shared_record_group( )

=over

Use this method to set or retrieve the shared record group of a DNS shared TXT record.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The name of defined L<Infoblox::DNS::SRG|Infoblox::DNS::SRG> objects. The shared TXT record will be defined under this shared record group and shared among zones associated with this shared record group.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get shared record group
 my $srg = $shared_txt->shared_record_group();
 #Modify shared record group
 $shared_txt->shared_record_group("test_srg");

=back

=back

=head2 ttl( )

=over

Use this method to set or retrieve the Time to Live (TTL) value of a DNS shared TXT record.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

The default value is undefined which indicates that the record inherits the TTL value of the zone.

Specify a TTL value to override the TTL value at the zone level.

=over

=item B<Parameter>

A 32-bit integer (range from 0 to 4294967295) that represents the duration in seconds that the record is cached. Zero indicates that the record should not be cached.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get ttl
 my $ttl = $srg_txt->ttl();
 #Modify ttl
 $srg_txt->ttl(1800);
 #Un-override ttl
 $srg_txt->ttl(undef);

=back

=back

=head1 SAMPLE CODE

The following sample code demonstrates the different functions that can be applied to an object such as add, search, modify, and remove. This sample also includes error handling for the operations.

B<#Preparation prior to a DNS shared TXT record insertion>

 #PROGRAM STARTS: Include all the modules that will be used
 use strict;
 use Infoblox;

 #Create a session to the Infoblox appliance

 my $session = Infoblox::Session->new(
                master   => "192.168.1.2", #appliance host ip
                username => "admin",       #appliance user login
                password => "infoblox"     #appliance password
                );

 unless ($session) {
        die("Construct session failed: ",
                Infoblox::status_code() . ":" . Infoblox::status_detail());
 }
 print "Session created successfully\n";

 #Create the shared record group prior to an shared TXT record insertion
 my $srg = Infoblox::DNS::SRG->new(name => "test_srg");
 unless ($srg) {
    die("Construct srg failed: ",
        Infoblox::status_code() . ":" . Infoblox::status_detail());
 }
 print "SRG object created successfully\n";

 #Verify if the SRG exists
 my $object = $session->get(object => "Infoblox::DNS::SRG", name => "test_srg");
 unless ($object) {
    print "SRG does not exist on server, safe to add the SRG\n";
    $session->add($SRG)
       or die("Add SRG failed: ",
              $session->status_code() . ":" . $session->status_detail());
 }
 print "SRG added successfully\n";

B<#Create a DNS shared TXT record>

 my $srg_txt = Infoblox::DNS::SharedRecord::TXT->new(
                name    => "txt",
                comment => "add TXT txt",
                text    => "this is text string",
                shared_record_group => "test_srg",
                );

 unless ($srg_txt) {
        die("Construct DNS shared record TXT failed: ",
                Infoblox::status_code() . ":" . Infoblox::status_detail());
 }

 #Add the DNS shared TXT record object to the Infoblox appliance through a session
 $session->add($srg_txt)
        or die("Add shared record TXT failed: ",
                        $session->status_code() . ":" . $session->status_detail());
 print "DNS shared TXT object added to server successfully\n";

B<#Search for a specific DNS shared TXT record>

 #Search all shared TXT records in the zone
 my @retrieved_objs = $session->search(
                object => "Infoblox::DNS::SharedRecord::TXT",
                name   => ".*"
                );
 my $object = $retrieved_objs[0];

 unless ($object) {
        die("Search shared record TXT failed: ",
                $session->status_code() . ":" . $session->status_detail());
 }
 print "Search DNS shared TXT object found at least 1 matching entry\n";

 #Search all TXT records whose name starts with "txt".
 my @retrieved_objs = $session->search(
                object => "Infoblox::DNS::SharedRecord::TXT",
                name   => "txt.*"
                );
 my $object = $retrieved_objs[0];

 unless ($object) {
        die("Search shared record TXT failed: ",
                $session->status_code() . ":" . $session->status_detail());
 }
 print "Search DNS shared TXT object using regexp found at least 1 matching entry\n";

B<#Get and modify a DNS shared TXT record>

 #Get a shared TXT record through the session
 my @retrieved_objs = $session->get(
                object => "Infoblox::DNS::SharedRecord::TXT",
                name   => "txt"
                );
 my $object = $retrieved_objs[0];

 unless ($object) {
        die("Get record TXT failed: ",
                $session->status_code() . ":" . $session->status_detail());
 }
 print "Get DNS shared TXT object found at least 1 matching entry\n";

 #Modify one of the attributes of the specified TXT record
 $object->text("this is new text string");

 #Apply the changes
 $session->modify($object)
        or die("Modify shared record TXT failed: ",
                $session->status_code() . ":" . $session->status_detail());
 print "DNS shared TXT object modified successfully \n";

B<#Remove a DNS shared TXT record>

 #Get TXT record through the session
 my @retrieved_objs = $session->get(
     object => "Infoblox::DNS::SharedRecord::TXT",
     name   => "txt"
 );
 my $object = $retrieved_objs[0];
 unless ($object) {
     die("Get shared record TXT failed: ",
         $session->status_code() . ":" . $session->status_detail());
 }
 print "Get DNS shared TXT object found at least 1 matching entry\n";

 #Submit the object for removal
 $session->remove($object)
        or die("Remove shared record TXT failed: ",
                $session->status_code() . ":" . $session->status_detail());
 print "DNS shared TXT object removed successfully \n";

 ####PROGRAM ENDS####

=head1 AUTHOR

Infoblox Inc. L<http://www.infoblox.com/>

=head1 SEE ALSO

L<Infoblox::DNS::View|Infoblox::DNS::View>, L<Infoblox::DNS::Zone|Infoblox::DNS::Zone>, L<Infoblox::DNS::SRG|Infoblox::DNS::SRG>, L<Infoblox::Session|Infoblox::Session>, L<Infoblox::Session-E<gt>get()|Infoblox::Session/get()/>, L<Infoblox::Session-E<gt>search()|Infoblox::Session/search()/>, L<Infoblox::Session-E<gt>add()|Infoblox::Session/add()/>, L<Infoblox::Session-E<gt>remove()|Infoblox::Session/remove()/>, L<Infoblox::Session-E<gt>modify()|Infoblox::Session/modify()/>

=head1 COPYRIGHT

Copyright (c) 2017 Infoblox Inc.

=cut
