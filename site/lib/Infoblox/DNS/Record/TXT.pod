=head1 NAME

Infoblox::DNS::Record::TXT - DNS TXT record object.

=head1 DESCRIPTION

A TXT (text) record contains supplemental information for a host. SPF (Sender Policy Framework) records are specialized TXT records that identify the servers that send mail from a domain.

Note that you must specify only one view for the attribute "views".

=head1 CONSTRUCTOR

 my $txt = Infoblox::DNS::Record::TXT->new(
     name                  => $fqdn,                                                             # Required
     text                  => $string                                                            # Required
     comment               => $string,                                                           # Optional / Default is empty
     disable               => "true" | "false"                                                   # Optional / Default "false"
     extattrs              => { $string => $extattr, ... },                                      # Optional / Default is undefined
     extensible_attributes => { $string => $string|$num, $string => [ $string|$num, ...], ... }, # Optional / Default is undefined
     ttl                   => $num | undef,                                                      # Optional / Default is undefined
     views                 => [$View1],                                                          # Optional / Default is "default" view
     creator               => "DYNAMIC" | "STATIC",                                              # Optional / Default is "STATIC"
     ddns_protected        => "true" | "false",                                                  # Optional / Default is "false"
     ddns_principal        => $string,                                                           # Optional / Default is undefined
     forbid_reclamation    => "true" | "false",                                                  # Optional / Default is "false"
 );

You cannot set both extattrs and extensible_attributes attributes at the same time.

=head1 SESSION METHODS

This section describes all the methods in Infoblox::Session module that you can apply to a TXT record object.

=head2 Infoblox::Session->add( )

=over

Use this method to add an object to the Infoblox appliance. See L<Infoblox::Session-E<gt>add()|Infoblox::Session/add()/> for parameters and return values.

=over

=item B<Example>

 #Construct the TXT object
 my $bind_txt = Infoblox::DNS::Record::TXT->new(
     name    => "txt.domain.com",
     text    => "this is text string",
     comment => "add TXT txt.domain.com",
     disable => "false",
     ttl     => "360",
     views   => [$view1]  );
 # Submit for addition
 my $response = $session->add( $bind_txt );

=back

=back

=head2 Infoblox::Session->get( )

=over

Use this method to retrieve all the matching objects from the Infoblox appliance. See L<Infoblox::Session-E<gt>get()|Infoblox::Session/get()/> for parameters and return values.

=over

=item B<Key References>

 Apply the following attributes to get a specific DNS TXT object:

  name                  - Optional. Host name in string format.
  view                  - Optional. The DNS view in which the TXT record is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the 'default' view only.
  text                  - Optional. The text of the TXT record.
  creator               - Optional. Record creator.
  ddns_principal        - Optional. GSS-TSIG principal that owns the record.
  reclaimable           - Optional. The flag that indicates whether the record is reclaimable or not.
  extattrs              - Optional. A hash reference containing extensible attributes.
  extensible_attributes - Optional. A hash reference containing extensible attributes.

=item B<Example>

 my @retrieved_objs = $session->get(
     object => "Infoblox::DNS::Record::TXT",
     name   => "txt.domain.com",
     view   => "default" );

 # get all DNS TXT records in the "domain.com" zone of the default view
 my @retrieved_objs = $session->get(
     object => "Infoblox::DNS::Record::TXT",
     zone   => "domain.com",
     view   => "default" );

 # get all DNS TXT records with a given extensible attribute
 my @retrieved_objs = $session->get(
     object => "Infoblox::DNS::Record::TXT",
     extensible_attributes => { 'Site' => 'Santa Clara' });

=back

=back

=head2 Infoblox::Session->modify( )

=over

Use this method to modify an object in the Infoblox appliance. See L<Infoblox::Session-E<gt>modify()|Infoblox::Session/modify()/> for parameters and return values.

=over

=item B<Example>

 # Use method to modify the comment.
 $bind_txt->comment("This is a modified comment");
 # Submit modification
 my $response = $session->modify( $bind_txt );

=back

=back

=head2 Infoblox::Session->remove( )

=over

Use this method to remove an object from the Infoblox appliance. See L<Infoblox::Session-E<gt>remove()|Infoblox::Session/remove()/> for parameters and return values.

To remove a specifc object, first use get() or search() to retrieve the specific object, and then submit this object for removal.

=over

=item B<Example>

 # Get the objects with the same name
 my @retrieved_objs = $session->get(
     object => "Infoblox::DNS::Record::TXT",
     name   => "txt.domain.com",
     view   => "default" );
 # find the desired object from the retrieved list.
 my $desired_txt = $retrieved_objs[0];
 # Submit for removal
 my $response = $session->remove( $ desired_txt );

=back

=back

=head2 Infoblox::Session->search( )

=over

Use this method to search for DNS TXT record objects in the Infoblox appliance. See L<Infoblox::Session-E<gt>search()|Infoblox::Session/search()/> for parameters and return values.

=over

=item B<Key References>

 Apply the following attributes to search for a DNS TXT record object:

  name                  - Optional. A name in FQDN (Fully Qualified Domain Name) format (regular expression).
  view                  - Optional. The DNS view in which the TXT record is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the 'default' view only.
  zone                  - Optional. A zone name in FQDN format.
  comment               - Optional. A comment in string format (regular expression).
  text                  - Optional. The text of the TXT record (regular expression).
  creator               - Optional. Record creator.
  ddns_principal        - Optional. GSS-TSIG principal that owns the record.
  reclaimable           - Optional. The flag that indicates whether the record is reclaimable or not.
  extattrs              - Optional. A hash reference containing extensible attributes.
  extensible_attributes - Optional. A hash reference containing extensible attributes.

For more information about searching extensible attributes, see L<Infoblox::Grid::ExtensibleAttributeDefE<sol>Searching Extensible Attributes|Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes>.

=item B<Example>

 # search for all DNS TXT objects that match "domain.com" in the default DNS view
 my @retrieved_objs = $session->search(
     object => "Infoblox::DNS::Record::TXT",
     name   => 'domain\.com',
     view   => "default" );

 # search for all DNS TXT records in the "domain.com" zone of the default view
 my @retrieved_objs = $session->search(
     object => "Infoblox::DNS::Record::TXT",
     zone   => "domain.com",
     view   => "default" );

 # search all DNS TXT records with a given extensible attribute 'Site'
 my @retrieved_objs = $session->search(
    object => "Infoblox::DNS::Record::TXT",
    extensible_attributes => { 'Site' => 'Santa Clara' });

=back

=back

=head1 METHODS

This section describes all the methods that you can use to configure and retrieve the attribute values of a TXT record

=head2 comment( )

=over

Use this method to set or retrieve the descriptive comment.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Desired comment in string format with a maximum of 256 bytes.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get comment
 my $comment = $bind_txt->comment();
 #Modify comment
 $bind_txt->comment("Modifying the DNS TXT comment");

=back

=back

=head2 cloud_info( )

=over

Use this method to retrieve cloud API related information for the Infoblox::DNS::Record::TXT object.

=over

=item B<Parameter>

None

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 # Get cloud_info
 my $cloud_info = $object->cloud_info();

=back

=back

=head2 creator( )

=over

Use this method to set or retrieve the record creator.

Note that changing creator from or to 'SYSTEM' value is not allowed.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Paramter>

The valid values are 'STATIC' and 'DYNAMIC'. The default value is 'STATIC'.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get creator value
 my $creator = $object->creator();

 #Modify creator value
 $object->creator("DYNAMIC");

=back

=back

=head2 creation_time( )

=over

Use this method to retrieve the creation time for the record. This is a read-only attribute.

=over

=item B<Parameter>

None

=item B<Returns>

The valid return value is a number of seconds that have elapsed since January 1st, 1970 UTC.

=item B<Example>

 #Get creation_time value
 my $creation_time = $object->creation_time();

=back

=back

=head2 ddns_principal( )

=over

Use this method to set or retrive the GSS-TSIG principal that owns this record.

Note that you cannot set ddns_principal for 'STATIC' and 'SYSTEM' records.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Paramter>

The GSS-TSIG principal FQDN (Fully Qualified Domain Name) format. The FQDN consists of the hostname followed by the domain name (example: abc.com). A hostname can have a maximum of 256 characters.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get ddns_principal value
 my $ddns_principal = $object->ddns_principal();

 #Modify ddns_principal value
 $object->ddns_principal('foo.com');

=back

=back

=head2 ddns_protected( )

=over

Use this method to set or retrieve the flag that indicates whether DDNS updates for this record are allowed or not.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify 'true' to protect record from DDNS updates and 'false' to allow DDNS updates for the specified record.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get ddns_protected value
 my $ddns_protected = $object->ddns_protected();

 #Modify ddns_protected value
 $object->ddns_protected('true');

=back

=back

=head2 disable( )

=over

Use this method to set or retrieve the disable flag of a DNS record.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

The default value for this field is false. The DNS record is enabled.

=over

=item B<Parameter>

Specify "true" to set the disable flag or "false" to deactivate/unset it.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get disable
 my $disable = $bind_txt->disable();
 #Modify disable
 $bind_txt->disable("true");

=back

=back

=head2 dns_name( )

=over

Use this method to retrieve the name in punycode format. This is a read-only attribute.

=over

=item B<Parameter>

None

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 # Get attribute value
 my $value = $bind_txt->dns_name();

=back

=back

=head2 extattrs( )

=over

Use this method to set or retrieve the extensible attributes associated with a DNS TXT record object.

=over

=item B<Parameter>

Valid value is a hash reference containing the names of extensible attributes and their associated values ( L<Infoblox::Grid::Extattr|Infoblox::Grid::Extattr> objects ).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get extattrs
 my $ref_extattrs = $bind_txt->extattrs();
 #Modify extattrs
 $bind_txt->extattrs({ 'Site' => $extattr1, 'Administrator' => $extattr2 });

=back

=back

=head2 extensible_attributes( )

=over

Use this method to set or retrieve the extensible attributes associated with a DNS TXT record.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

For valid values for extensible attributes, see L<Infoblox::Grid::ExtensibleAttributeDefE<sol>Extensible Attribute Values|Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values>.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get extensible attributes
 my $ref_extensible_attributes = $bindtxt->extensible_attributes();
 #Modify extensible attributes
 $bindtxt->extensible_attributes({ 'Site' => 'Santa Clara', 'Administrator' => [ 'Peter', 'Tom' ] });

=back

=back

=head2 forbid_reclamation( )

=over

Use this method to set or retrieve the flag that indicates whether the reclamation is allowed for the record or not.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify 'true' to forbid reclamation for the record and 'false' to allow it. The default value is 'false'.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get forbid_reclamation
 my $forbid_reclamation = $object->forbid_reclamation();
 #Modify forbid_reclamation
 $object->forbid_reclamation('true');

=back

=back

=head2 last_queried( )

=over

Use this method to retrieve the time when the associated record was last queried. This is a read-only attribute.

=over

=item B<Parameter>

None

=item B<Returns>

The method returns the attribute value. The number of seconds that have elapsed since January 1st, 1970 UTC.

=item B<Example>

 #Get last_queried
 my $last_queried = $bindtxt->last_queried();

=back

=back

=head2 name( )

=over

Use this method to set or retrieve the name.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

The attribute value can be in unicode format.

=over

=item B<Parameter>

The name of the DNS TXT object in Fully Qualified Domain Name (FQDN) format. The name can have a maximum of 256 bytes.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get name
 my $name = $bind_txt->name();
 #Modify name
 $bind_txt->name("new.domain.com");

=back

=back

=head2 reclaimable( )

=over

Use this method to retrieve the flag that indicates whether the record is reclaimable or not.

=over

=item B<Parameter>

None

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get reclaimable
 my $reclaimable = $object->reclaimable();

=back

=back

=head2 text( )

=over

Use this method to set or retrieve the text.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Text that you want to associate with the record. It can contain up to 255 bytes.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get name
 my $name = $bind_txt->text();
 #Modify name
 $bind_txt->text("this is new text string");

=back

=back

=head2 ttl( )

=over

Use this method to set or retrieve the Time to Live (TTL) value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

The default value is undefined which indicates that the record inherits the TTL value of the zone.

Specify a TTL value to override the TTL value at the zone level.

=over

=item B<Parameter>

A 32-bit integer (range from 0 to 4294967295) that represents the duration in seconds that the record is cached. Zero indicates that the record should not be cached.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get ttl
 my $ttl = $bind_txt->ttl();
 #Modify ttl
 $bind_txt->ttl(1800);
 #Un-override ttl
 $bind_txt->ttl(undef);

=back

=back

=head2 views( )

=over

Use this method to set or retrieve the view of a TXT record.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

The default value is the "default" view, which means the TXT record is located under the default view.

=over

=item B<Parameter>

Array reference of defined L<Infoblox::DNS::View|Infoblox::DNS::View> objects.

Note that the array size must be 1.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get views
 my $ref_views = $bind_txt->views();
 #Modify views, list of Infoblox::DNS::View objects
 $bind_txt->views([$view1]);

=back

=back

=head2  zone( )

=over

Use this method to retrieve the zone name of a DNS TXT record. This method is read-only and cannot be set.

=over

=item B<Parameter>

None

=item B<Returns>

Returns the attribute value.

=item B<Example>

 # Get zone
 my $zone = $bind_txt->zone();

=back

=back

=head1 SAMPLE CODE

The following sample code demonstrates the different functions that can be applied to an object, such as add, search, modify, and remove. This sample also includes error handling for the operations.

B<#Preparation prior to a DNS TXT record insertion>

 #PROGRAM STARTS: Include all the modules that will be used
 use strict;
 use Infoblox;

 #Create a session to the Infoblox appliance

 my $session = Infoblox::Session->new(
                master   => "192.168.1.2", #appliance host ip
                username => "admin",       #appliance user login
                password => "infoblox"     #appliance password
                );

 unless ($session) {
        die("Construct session failed: ",
                Infoblox::status_code() . ":" . Infoblox::status_detail());
 }
 print "Session created successfully\n";

 #Create the zone prior to a TXT record insertion
 my $zone = Infoblox::DNS::Zone->new(name => "domain.com");
 unless ($zone) {
        die("Construct zone failed: ",
                Infoblox::status_code() . ":" . Infoblox::status_detail());
 }
 print "Zone object created successfully\n";

 #Verify if the zone exists
 my $object = $session->get(object => "Infoblox::DNS::Zone", name => "domain.com");
 unless ($object) {
        print "Zone does not exist on server, safe to add the zone\n";
        $session->add($zone)
                or die("Add zone failed: ",
                                $session->status_code() . ":" . $session->status_detail());
 }
 print "Zone added successfully\n";

B<#Create a DNS TXT record>

 my $bind_txt = Infoblox::DNS::Record::TXT->new(
                name    => "txt.domain.com",
                comment => "add TXT txt.domain.com",
                text    => "this is text string",
                );

 unless ($bind_txt) {
        die("Construct DNS record TXT failed: ",
                Infoblox::status_code() . ":" . Infoblox::status_detail());
 }

 #Add the DNS TXT record object to the Infoblox appliance through a session
 $session->add($bind_txt)
        or die("Add record TXT failed: ",
                        $session->status_code() . ":" . $session->status_detail());
 print "DNS TXT object added to server successfully\n";

B<#Search for a specific DNS TXT record>

 #Search all TXT records in the zone that matches "domain.com"
 my @retrieved_objs = $session->search(
                object => "Infoblox::DNS::Record::TXT",
                name   => 'domain\.com'
                );
 my $object = $retrieved_objs[0];

 unless ($object) {
        die("Search record TXT failed: ",
                $session->status_code() . ":" . $session->status_detail());
 }
 print "Search DNS TXT object found at least 1 matching entry\n";

 #Search all TXT records with names that start with "txt" and end with "domain.com"
 my @retrieved_objs = $session->search(
                object => "Infoblox::DNS::Record::TXT",
                name   => '^txt.*\.domain\.com\$'
                );
 my $object = $retrieved_objs[0];

 unless ($object) {
        die("Search record TXT failed: ",
                $session->status_code() . ":" . $session->status_detail());
 }
 print "Search DNS TXT object using regexp found at least 1 matching entry\n";

B<#Get and modify a DNS TXT record>

 #Get a TXT record through the session
 my @retrieved_objs = $session->get(
                object => "Infoblox::DNS::Record::TXT",
                name   => "txt.domain.com"
                );
 my $object = $retrieved_objs[0];

 unless ($object) {
        die("Get record TXT failed: ",
                $session->status_code() . ":" . $session->status_detail());
 }
 print "Get DNS TXT object found at least 1 matching entry\n";

 #Modify one of the attributes of the specified TXT record
 $object->text("this is new text string");

 #Apply the changes
 $session->modify($object)
        or die("Modify record TXT failed: ",
                $session->status_code() . ":" . $session->status_detail());
 print "DNS TXT object modified successfully \n";

B<#Remove a DNS TXT record>

 #Get TXT record through the session
 my @retrieved_objs = $session->get(
     object => "Infoblox::DNS::Record::TXT",
     name   => "txt.domain.com"
 );
 my $object = $retrieved_objs[0];
 unless ($object) {
     die("Get record TXT failed: ",
         $session->status_code() . ":" . $session->status_detail());
 }
 print "Get DNS TXT object found at least 1 matching entry\n";

 #Submit the object for removal
 $session->remove($object)
        or die("Remove record TXT failed: ",
                $session->status_code() . ":" . $session->status_detail());
 print "DNS TXT object removed successfully \n";

 ####PROGRAM ENDS####

=head1 AUTHOR

Infoblox Inc. L<http://www.infoblox.com/>

=head1 SEE ALSO

L<Infoblox::Session-E<gt>add()|Infoblox::Session/add()/>, L<Infoblox::Session-E<gt>get()|Infoblox::Session/get()/>, L<Infoblox::Session-E<gt>modify()|Infoblox::Session/modify()/>, L<Infoblox::Session-E<gt>remove()|Infoblox::Session/remove()/>, L<Infoblox::Session-E<gt>search()|Infoblox::Session/search()/>, L<Infoblox::Session|Infoblox::Session>, L<Infoblox::DNS::View|Infoblox::DNS::View>, L<Infoblox::DNS::Zone|Infoblox::DNS::Zone>

=head1 COPYRIGHT

Copyright (c) 2017 Infoblox Inc.

=cut
