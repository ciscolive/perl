=head1 NAME

Infoblox::DNS::Record::TLSA - DNS TLSA record object.

=head1 DESCRIPTION

The TLSA DNS resource record (RR) is used to associate a TLS server certificate or a public key with the domain name where the record is
found, thus forming a 'TLSA certificate association'. For further details see RFC-6698.

Note that you must specify only one view for the attribute 'views'.

=head1 CONSTRUCTOR

 my $tlsa = Infoblox::DNS::Record::TLSA->new(
     name                  => $fqdn,                                                          # Required
     certificate_data      => $string,                                                        # Required
     certificate_usage     => $uint,                                                          # Required
     matched_type          => $uint,                                                          # Required
     selector              => $uint,                                                          # Required
     comment               => $string,                                                        # Optional / Default is empty
     disable               => 'true' | 'false'                                                # Optional / Default 'false'
     extattrs              => {$string => $extattr, ...},                                     # Optional / Default is undefined
     extensible_attributes => {$string => $string|$num, $string => [$string|$num, ...], ...}, # Optional / Default is undefined
     ttl                   => $num | undef,                                                   # Optional / Default is undefined
     views                 => [$View1],                                                       # Optional / Default is 'default' view
     creator               => 'DYNAMIC' | 'STATIC',                                           # Optional / Default is 'STATIC'
 );

You cannot set both extattrs and extensible_attributes attributes at the same time.

=head1 SESSION METHODS

This section describes all the methods in Infoblox::Session module that you can apply to the object.

=head2 Infoblox::Session->add( )

=over

Use this method to add an object to the Infoblox appliance. See L<Infoblox::Session-E<gt>add()|Infoblox::Session/add()/> for parameters and return values.

=over

=item B<Example>

 #Construct the object
 my $object = Infoblox::DNS::Record::TLSA->new(
     name              => 'tlsa.domain.com',
     certificate_data  => '1234FFFFEEEE',
     certificate_usage => 0,
     matched_type      => 0,
     selector          => 0,
     comment           => 'add TLSA tlsa.domain.com',
     disable           => 'false',
     ttl               => '360',
     views             => [$view1],
 );

 #Submit for addition
 my $response = $session->add($object);

=back

=back

=head2 Infoblox::Session->get( )

=over

Use this method to retrieve all the matching objects from the Infoblox appliance. See L<Infoblox::Session-E<gt>get()|Infoblox::Session/get()/> for parameters and return values.

=over

=item B<Key References>

 Apply the following attributes to get a specific DNS TLSA object:

  name                  - Optional. Host name in string format.
  view                  - Optional. The DNS view in which the TLSA record is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the 'default' view only.
  certificate_data      - Optional. The certificate hash or actual data of the TLSA record in hexadecimal string format.
  creator               - Optional. Record creator.
  extattrs              - Optional. A hash reference containing extensible attributes.
  extensible_attributes - Optional. A hash reference containing extensible attributes.

=item B<Example>

 my @retrieved_objs = $session->get(
     object => 'Infoblox::DNS::Record::TLSA',
     name   => 'tlsa.domain.com',
     view   => 'default' );

 #Get all DNS TLSA records from the 'domain.com' zone of the default view
 my @retrieved_objs = $session->get(
     object => 'Infoblox::DNS::Record::TLSA',
     zone   => 'domain.com',
     view   => 'default' );

 #Get all DNS TLSA records with a given extensible attribute
 my @retrieved_objs = $session->get(
     object => 'Infoblox::DNS::Record::TLSA',
     extensible_attributes => { 'Site' => 'Santa Clara' });

=back

=back

=head2 Infoblox::Session->modify( )

=over

Use this method to modify an object in the Infoblox appliance. See L<Infoblox::Session-E<gt>modify()|Infoblox::Session/modify()/> for parameters and return values.

=over

=item B<Example>

 #Use the following method to modify the comment.
 $object->comment('This is a modified comment');

 #Submit modification
 my $response = $session->modify($object);

=back

=back

=head2 Infoblox::Session->remove( )

=over

Use this method to remove an object from the Infoblox appliance. See L<Infoblox::Session-E<gt>remove()|Infoblox::Session/remove()/> for parameters and return values.

To remove a specifc object, first use get() or search() to retrieve the specific object, and then submit this object for removal.

=over

=item B<Example>

 #Get the objects with the same name
 my @retrieved_objs = $session->get(
     object => 'Infoblox::DNS::Record::TLSA',
     name   => 'tlsa.domain.com',
     view   => 'default' );

 #Find the desired object from the retrieved list.
 my $desired_object = $retrieved_objs[0];

 #Submit for removal
 my $response = $session->remove($desired_object);

=back

=back

=head2 Infoblox::Session->search( )

=over

Use this method to search for objects in the Infoblox appliance. See L<Infoblox::Session-E<gt>search()|Infoblox::Session/search()/> for parameters and return values.

=over

=item B<Key References>

 Apply the following attributes to search for a DNS TLSA record object:

  name                  - Optional. A name in FQDN (Fully Qualified Domain Name) format (regular expression).
  view                  - Optional. The DNS view in which the TLSA record is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the 'default' view only.
  zone                  - Optional. A zone name in FQDN format.
  comment               - Optional. A comment in string format (regular expression).
  certificate_data      - Optional. The certificate hash or actual data of the TLSA record in hexadecimal string format (regular expression). In upper case only.
  creator               - Optional. Record creator.
  extattrs              - Optional. A hash reference containing extensible attributes.
  extensible_attributes - Optional. A hash reference containing extensible attributes.

For more information about searching extensible attributes, see L<Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes|Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes>.

=item B<Example>

 #Search for all DNS TLSA objects that match 'domain.com' in the default DNS view
 my @retrieved_objs = $session->search(
     object => 'Infoblox::DNS::Record::TLSA',
     name   => 'domain\.com',
     view   => 'default' );

 #Search for all DNS TLSA records in the 'domain.com' zone of the default view
 my @retrieved_objs = $session->search(
     object => 'Infoblox::DNS::Record::TLSA',
     zone   => 'domain.com',
     view   => 'default' );

 #Search for all DNS TLSA records with a given extensible attribute 'Site'
 my @retrieved_objs = $session->search(
    object => 'Infoblox::DNS::Record::TLSA',
    extensible_attributes => { 'Site' => 'Santa Clara' });

=back

=back

=head1 METHODS

This section describes all the methods that you can use to configure and retrieve the attribute values of a TLSA record.

=head2 certificate_data( )

=over

Use this method to set or retrieve the certificate association data.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Hexadecimal dump of either the raw certificate data for matched_type 0, or the hash calculated on the raw data for matched_type 1 and 2 in string format.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get certificate_data value
 my $value = $object->certificate_data();

 #Modify certificate_data value
 $object->certificate_data('DEA033FFEEAA3256FFADAAA3333111');

=back

=back

=head2 certificate_usage( )

=over

Use this method to set or retrieve the value that specifies (as per RFE-6698) the provided certificate association data.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is an unsigned integer between 0 and 255.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get certificate_usage value
 my $value = $object->certificate_usage();

 #Modify certificate_usage value
 $object->certificate_usage(0);

=back

=back

=head2 comment( )

=over

Use this method to set or retrieve the descriptive comment.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Desired comment in string format with a maximum of 256 bytes.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get comment value
 my $value = $object->comment();

 #Modify comment value
 $object->comment('Modifying the comment');

=back

=back

=head2 cloud_info( )

=over

Use this method to retrieve cloud API related information for the Infoblox::DNS::Record::TLSA object.

=over

=item B<Parameter>

None

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 # Get cloud_info value
 my $value = $object->cloud_info();

=back

=back

=head2 creator( )

=over

Use this method to set or retrieve the record creator.

Note that changing creator from or to 'SYSTEM' value is not allowed.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Paramter>

The valid values are 'STATIC' and 'DYNAMIC'. The default value is 'STATIC'.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get creator value
 my $value = $object->creator();

 #Modify creator value
 $object->creator('DYNAMIC');

=back

=back

=head2 disable( )

=over

Use this method to set or retrieve the disable flag for a DNS record.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

The default value for this field is false. The DNS record is enabled.

=over

=item B<Parameter>

Specify 'true' to set the disable flag or 'false' to deactivate/unset it.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get disable value
 my $value = $object->disable();

 #Modify disable value
 $object->disable('true');

=back

=back

=head2 dns_name( )

=over

Use this method to retrieve the name in punycode format. This is a read-only attribute.

=over

=item B<Parameter>

None

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 # Get dns_name value
 my $value = $object->dns_name();

=back

=back

=head2 extattrs( )

=over

Use this method to set or retrieve the extensible attributes associated with a DNS TLSA record object.

=over

=item B<Parameter>

Valid value is a hash reference containing the names of extensible attributes and their associated values ( L<Infoblox::Grid::Extattr|Infoblox::Grid::Extattr> objects ).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get extattrs value
 my $value = $object->extattrs();

 #Modify extattrs value
 $object->extattrs({'Site' => $extattr1, 'Administrator' => $extattr2});

=back

=back

=head2 extensible_attributes( )

=over

Use this method to set or retrieve the extensible attributes associated with a DNS TLSA record.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

For valid values for extensible attributes, see L<Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values|Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values>.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get extensible_attributes value
 my $value = $object->extensible_attributes();

 #Modify extensible_attributes value
 $object->extensible_attributes({'Site' => 'Santa Clara', 'Administrator' => ['Peter', 'Tom']});

=back

=back

=head2 matched_type( )

=over

Use this method to set or retrieve the value that specifies (as per RFE-6698) the format to display the certificate association data. 

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is an unsigned integer between 0 and 255.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get matched_type value
 my $value = $object->matched_type();

 #Modify matched_type value
 $object->matched_type(0);

=back

=back

=head2 name( )

=over

Use this method to set or retrieve the name.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

The attribute value can be in unicode format.

=over

=item B<Parameter>

The name of the DNS TLSA object in Fully Qualified Domain Name (FQDN) format. The name can have a maximum of 256 bytes.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get name value
 my $value = $object->name();

 #Modify name value
 $object->name('new.domain.com');

=back

=back

=head2 selector( )

=over

Use this method to set or retrieve the value that specifies (as per RFE-6698) which part of the TLS certificate
presented by the server will be matched against the association data.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is an unsigned integer between 0 and 255.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get selector value
 my $value = $object->selector();

 #Modify selector value
 $object->selector(0);

=back

=back

=head2 ttl( )

=over

Use this method to set or retrieve the Time to Live (TTL) value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

The default value is undefined which indicates that the record inherits the TTL value of the zone.

Specify a TTL value to override the TTL value at the zone level.

=over

=item B<Parameter>

A 32-bit integer (range from 0 to 4294967295) that represents the duration in seconds to cache the record. Zero indicates that the record should not be cached.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get ttl value
 my $value = $object->ttl();

 #Modify ttl value
 $object->ttl(1800);

 #Un-override ttl
 $object->ttl(undef);

=back

=back

=head2 views( )

=over

Use this method to set or retrieve the view of a TLSA record.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

The default value is the 'default' view, which means that the TLSA record is located under the default view.

=over

=item B<Parameter>

Array reference of defined L<Infoblox::DNS::View|Infoblox::DNS::View> objects.

Note that the array size must be 1.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get views value
 my $value = $object->views();

 #Modify views value
 $object->views([$view1]);

=back

=back

=head2 zone( )

=over

Use this method to retrieve the zone name of a DNS TLSA record. This is a read-only attribute.

=over

=item B<Parameter>

None

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get zone value
 my $zone = $object->zone();

=back

=back

=head1 SAMPLE CODE

The following sample code demonstrates the different functions that can be applied on an object, such as add, search, modify, and remove. This sample also includes error handling for the operations.

B<#Preparation prior to a DNS TLSA record insertion>

 #PROGRAM STARTS: Include all the modules that will be used
 use strict;
 use Infoblox;

 #Create a session on the Infoblox appliance

 my $session = Infoblox::Session->new(
                master   => "192.168.1.2", #appliance host ip
                username => "admin",       #appliance user login
                password => "infoblox"     #appliance password
                );

 unless ($session) {
        die("Construct session failed: ",
                Infoblox::status_code() . ":" . Infoblox::status_detail());
 }
 print "Session created successfully\n";

 #Create the zone prior to a TLSA record insertion
 my $zone = Infoblox::DNS::Zone->new(name => "domain.com");
 unless ($zone) {
        die("Construct zone failed: ",
                Infoblox::status_code() . ":" . Infoblox::status_detail());
 }
 print "Zone object created successfully\n";

 #Verify if the zone exists
 my $object = $session->get(object => "Infoblox::DNS::Zone", name => "domain.com");
 unless ($object) {
        print "Zone does not exist on the server, safe to add the zone\n";
        $session->add($zone)
                or die("Add zone failed: ",
                                $session->status_code() . ":" . $session->status_detail());
 }
 print "Zone added successfully\n";

B<#Create a DNS TLSA record>

 my $bind_tlsa = Infoblox::DNS::Record::TLSA->new(
                name              => "tlsa.domain.com",
                comment           => "add TLSA tlsa.domain.com",
                certificate_data  => '033FFEEAA3256FFADAAA3333',
                certificate_usage => 0,
                matched_type      => 0,
                selector          => 0,
                );

 unless ($bind_tlsa) {
        die("Construct DNS record TLSA failed: ",
                Infoblox::status_code() . ":" . Infoblox::status_detail());
 }

 #Add the DNS TLSA record object to the Infoblox appliance through a session
 $session->add($bind_tlsa)
        or die("Add record TLSA failed: ",
                        $session->status_code() . ":" . $session->status_detail());
 print "DNS TLSA object is added to the server successfully\n";

B<#Search for a specific DNS TLSA record>

 #Search all TLSA records in the zone that matches "domain.com"
 my @retrieved_objs = $session->search(
                object => "Infoblox::DNS::Record::TLSA",
                name   => 'domain\.com'
                );
 my $object = $retrieved_objs[0];

 unless ($object) {
        die("Search record TLSA failed: ",
                $session->status_code() . ":" . $session->status_detail());
 }
 print "Search a DNS TLSA object found at least 1 matching entry\n";

 #Search all TLSA records with names that start with "tlsa" and end with "domain.com"
 my @retrieved_objs = $session->search(
                object => "Infoblox::DNS::Record::TLSA",
                name   => '^tlsa.*\.domain\.com\$'
                );
 my $object = $retrieved_objs[0];

 unless ($object) {
        die("Search record TLSA failed: ",
                $session->status_code() . ":" . $session->status_detail());
 }
 print "Search a DNS TLSA object using regexp found at least 1 matching entry\n";

B<#Get and modify a DNS TLSA record>

 #Get a TLSA record through the session
 my @retrieved_objs = $session->get(
                object => "Infoblox::DNS::Record::TLSA",
                name   => "tlsa.domain.com"
                );
 my $object = $retrieved_objs[0];

 unless ($object) {
        die("Get record TLSA failed: ",
                $session->status_code() . ":" . $session->status_detail());
 }
 print "Get a DNS TLSA object found at least 1 matching entry\n";

 #Modify one of the attributes of the specified TLSA record
 $object->comment("this is new comment string");

 #Apply the changes
 $session->modify($object)
        or die("Modify record TLSA failed: ",
                $session->status_code() . ":" . $session->status_detail());
 print "DNS TLSA object modified successfully \n";

B<#Remove a DNS TLSA record>

 #Get TLSA record through the session
 my @retrieved_objs = $session->get(
     object => "Infoblox::DNS::Record::TLSA",
     name   => "tlsa.domain.com"
 );
 my $object = $retrieved_objs[0];
 unless ($object) {
     die("Get record TLSA failed: ",
         $session->status_code() . ":" . $session->status_detail());
 }
 print "Get DNS TLSA object found at least 1 matching entry\n";

 #Submit the object for removal
 $session->remove($object)
        or die("Remove record TLSA failed: ",
                $session->status_code() . ":" . $session->status_detail());
 print "DNS TLSA object removed successfully \n";

 ####PROGRAM ENDS####

=head1 AUTHOR

Infoblox Inc. L<http://www.infoblox.com/>

=head1 SEE ALSO

L<Infoblox::Session-E<gt>add()|Infoblox::Session/add()/>,
L<Infoblox::Session-E<gt>get()|Infoblox::Session/get()/>,
L<Infoblox::Session-E<gt>modify()|Infoblox::Session/modify()/>,
L<Infoblox::Session-E<gt>remove()|Infoblox::Session/remove()/>,
L<Infoblox::Session-E<gt>search()|Infoblox::Session/search()/>,
L<Infoblox::Session|Infoblox::Session>,
L<Infoblox::DNS::View|Infoblox::DNS::View>,
L<Infoblox::DNS::Zone|Infoblox::DNS::Zone>

=head1 COPYRIGHT

Copyright (c) 2017 Infoblox Inc.

=cut
