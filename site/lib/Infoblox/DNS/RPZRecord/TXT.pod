=head1 NAME

Infoblox::DNS::RPZRecord::TXT - Response Policy Zone (RPZ) Substitute (TXT Record) Rule object.

=head1 DESCRIPTION

An RPZ Substitute (TXT Record) Rule object represents the substitution rule for DNS TXT records.

Note that you must specify only one view for the attribute "views".

=head1 CONSTRUCTOR

 my $txt = Infoblox::DNS::RPZRecord::TXT->new(
     name     => $fqdn,                 #Required
     text     => $string                #Required
     rp_zone  => $rp_zone,              #Required
     comment  => $string,               #Optional / Default is empty
     disable  => "true" | "false"       #Optional / Default "false"
     extattrs              => { $string => $extattr, ... },      #Optional / Default is undefined
     extensible_attributes => { $string => $string|$num, $string => [ $string|$num, ...], ... }, #Optional / Default is undefined
     ttl      => $num | undef,          #Optional / Default is undefined
     views    => [$View1],              #Optional / Default is "default" view
 );

You cannot set both extattrs and extensible_attributes attributes at the same time.

=head1 SESSION METHODS

This section describes all the methods in Infoblox::Session module that you can apply to an RPZ Substitute (TXT Record) Rule object.

=head2 Infoblox::Session->add( )

=over

Use this method to add an object to the Infoblox appliance. See L<Infoblox::Session-E<gt>add()|Infoblox::Session/add()/> for parameters and return values.

=over

=item B<Example>

 #Construct the RPZ TXT object
 my $rpz_txt = Infoblox::DNS::RPZRecord::TXT->new(
     name    => "txt.rpz.com",
     text    => "this is text string",
     comment => "add TXT txt.rpz.com",
     rp_zone  => $response_policy_zone,
     disable => "false",
     ttl     => "360",
     views   => [$view1]  );
 # Submit for addition
 my $response = $session->add( $rpz_txt );

=back

=back

=head2 Infoblox::Session->get( )

=over

Use this method to retrieve all the matching objects from the Infoblox appliance. See L<Infoblox::Session-E<gt>get()|Infoblox::Session/get()/> for parameters and return values.

=over

=item B<Key References>

 Apply the following attributes to get a specific Substitute (TXT Record) Rule object:

  name - Optional. Host name in string format.
  view - Optional. The DNS view in which the RPZ Substitute (TXT Record) Rule is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the 'default' view only.
  text - Optional. The text of the RPZ Substitute (TXT Record) Rule.
  extattrs     - Optional. A hash reference containing extensible attributes.
  extensible_attributes - Optional. A hash reference containing extensible attributes.

=item B<Example>

 my @retrieved_objs = $session->get(
     object => "Infoblox::DNS::RPZRecord::TXT",
     name   => "txt.rpz.com",
     view   => "default" );

 # get all Substitute (TXT Record) Rules in the "rpz.com" zone of the default view
 my @retrieved_objs = $session->get(
     object => "Infoblox::DNS::RPZRecord::TXT",
     zone   => "rpz.com",
     view   => "default" );

 # get all Substitute (TXT Record) Rules with a given extensible attribute
 my @retrieved_objs = $session->get(
     object => "Infoblox::DNS::RPZRecord::TXT",
     extensible_attributes => { 'Site' => 'Santa Clara' });

=back

=back

=head2 Infoblox::Session->modify( )

=over

Use this method to modify an object in the Infoblox appliance. See L<Infoblox::Session-E<gt>modify()|Infoblox::Session/modify()/> for parameters and return values.

=over

=item B<Example>

 # Use method to modify the comment.
 $rpz_txt->comment("This is a modified comment");
 # Submit modification
 my $response = $session->modify( $rpz_txt );

=back

=back

=head2 Infoblox::Session->remove( )

=over

Use this method to remove an object from the Infoblox appliance. See L<Infoblox::Session-E<gt>remove()|Infoblox::Session/remove()/> for parameters and return values.

To remove a specifc object, first use get() or search() to retrieve the specific object, and then submit this object for removal.

=over

=item B<Example>

 # Get the objects with the same name
 my @retrieved_objs = $session->get(
     object => "Infoblox::DNS::RPZRecord::TXT",
     name   => "txt.rpz.com",
     view   => "default" );
 # find the desired object from the retrieved list.
 my $desired_txt = $retrieved_objs[0];
 # Submit for removal
 my $response = $session->remove( $ desired_txt );

=back

=back

=head2 Infoblox::Session->search( )

=over

Use this method to search for Substitute (TXT Record) Rule objects in the Infoblox appliance. See L<Infoblox::Session-E<gt>search()|Infoblox::Session/search()/> for parameters and return values.

=over

=item B<Key References>

 Apply the following attributes to search for a Substitute (TXT Record) Rule object:

  name    - Optional. A name in FQDN (Fully Qualified Domain Name) format (regular expression).
  view    - Optional. The DNS view in which the RPZ Substitute (TXT Record) Rule is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the 'default' view only.
  zone    - Optional. A zone name in FQDN format.
  comment - Optional. A comment in string format (regular expression).
  text    - Optional. The text of the RPZ Substitute (TXT Record) Rule (regular expression).
  extattrs     - Optional. A hash reference containing extensible attributes.
  extensible_attributes - Optional. A hash reference containing extensible attributes.

For more information about searching extensible attributes, see L<Infoblox::Grid::ExtensibleAttributeDefE<sol>Searching Extensible Attributes|Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes>.

=item B<Example>

 # search for all Substitute (TXT Record) Rule objects that match "rpz.com" in the default DNS view
 my @retrieved_objs = $session->search(
     object => "Infoblox::DNS::RPZRecord::TXT",
     name   => 'rpz\.com',
     view   => "default" );

 # search for all Substitute (TXT Record) Rules in the "rpz.com" zone of the default view
 my @retrieved_objs = $session->search(
     object => "Infoblox::DNS::RPZRecord::TXT",
     zone   => "rpz.com",
     view   => "default" );

 # search all Substitute (TXT Record) Rules with a given extensible attribute 'Site'
 my @retrieved_objs = $session->search(
    object => "Infoblox::DNS::RPZRecord::TXT",
    extensible_attributes => { 'Site' => 'Santa Clara' });

=back

=back

=head1 METHODS

This section describes all the methods that you can use to configure and retrieve the attribute values of an RPZ Substitute (TXT Record) Rule.

=head2 comment( )

=over

Use this method to set or retrieve the descriptive comment.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Desired comment in string format with a maximum of 256 bytes.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get comment
 my $comment = $rpz_txt->comment();
 #Modify comment
 $rpz_txt->comment("Modifying the Substitute (TXT Record) Rule comment");

=back

=back

=head2 disable( )

=over

Use this method to set or retrieve the disable flag of a DNS record.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

The default value for this field is false. The DNS record is enabled.

=over

=item B<Parameter>

Specify "true" to set the disable flag or "false" to deactivate/unset it.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get disable
 my $disable = $rpz_txt->disable();
 #Modify disable
 $rpz_txt->disable("true");

=back

=back

=head2 extattrs( )

=over

Use this method to set or retrieve the extensible attributes associated with a Substitute (TXT Record) Rule object.

=over

=item B<Parameter>

Valid value is a hash reference containing the names of extensible attributes and their associated values ( L<Infoblox::Grid::Extattr|Infoblox::Grid::Extattr> objects ).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get extattrs
 my $ref_extattrs = $rpz_txt->extattrs();
 #Modify extattrs
 $rpz_txt->extattrs({ 'Site' => $extattr1, 'Administrator' => $extattr2 });

=back

=back

=head2 extensible_attributes( )

=over

Use this method to set or retrieve the extensible attributes associated with a Substitute (TXT Record) Rule.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

For valid values for extensible attributes, see L<Infoblox::Grid::ExtensibleAttributeDefE<sol>Extensible Attribute Values|Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values>.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get extensible attributes
 my $ref_extensible_attributes = $bindtxt->extensible_attributes();
 #Modify extensible attributes
 $bindtxt->extensible_attributes({ 'Site' => 'Santa Clara', 'Administrator' => [ 'Peter', 'Tom' ] });

=back

=back

=head2 name( )

=over

Use this method to set or retrieve the name.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The name of the Substitute (TXT Record) Rule object in Fully Qualified Domain Name (FQDN) format. The name can have a maximum of 256 bytes.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get name
 my $name = $rpz_txt->name();
 #Modify name
 $rpz_txt->name("new.rpz.com");

=back

=back

=head2 text( )

=over

Use this method to set or retrieve the text.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Text that you want to associate with the record. It can contain up to 255 bytes.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get name
 my $name = $rpz_txt->text();
 #Modify name
 $rpz_txt->text("this is new text string");

=back

=back

=head2 ttl( )

=over

Use this method to set or retrieve the Time to Live (TTL) value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

The default value is undefined which indicates that the record inherits the TTL value of the zone.

Specify a TTL value to override the TTL value at the zone level.

=over

=item B<Parameter>

A 32-bit integer (range from 0 to 4294967295) that represents the duration in seconds that the record is cached. Zero indicates that the record should not be cached.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get ttl
 my $ttl = $rpz_txt->ttl();
 #Modify ttl
 $rpz_txt->ttl(1800);
 #Un-override ttl
 $rpz_txt->ttl(undef);

=back

=back

=head2 views( )

=over

Use this method to set or retrieve the view of an RPZ Substitute (TXT Record) Rule.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

The default value is the "default" view, which means the RPZ Substitute (TXT Record) Rule is in the default view.

=over

=item B<Parameter>

An array reference of defined L<Infoblox::DNS::View|Infoblox::DNS::View> objects.

Note that the array size must be 1.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get views
 my $ref_views = $rpz_txt->views();
 #Modify views, an array of Infoblox::DNS::View objects
 $rpz_txt->views([$view1]);

=back

=back

=head2  zone( )

=over

Use this method to retrieve the zone name of a Substitute (TXT Record) Rule. This method is read-only and cannot be set.

=over

=item B<Parameter>

None

=item B<Returns>

Returns the attribute value.

=item B<Example>

 # Get zone
 my $zone = $rpz_txt->zone();

=back

=back

=head2  rp_zone( )

=over

Use this method to set or retrieve the zone object of a DNS RPZ SRV record.

=over

=item B<Parameter>

An L<Infoblox::DNS::Zone|Infoblox::DNS::Zone> object.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 # Get rp_zone
 my $rp_zone = $rpz_txt->rp_zone();
 #Modify rp_zone, reference of Infoblox::DNS::Zone object
 $rpz_txt->rp_zone($response_policy_zone);

=back

=back

=head1 SAMPLE CODE

The following sample code demonstrates the different functions that can be applied to an object, such as add, search, modify, and remove. This sample also includes error handling for the operations.

B<#Preparation prior to a Substitute (TXT Record) Rule insertion>

 #PROGRAM STARTS: Include all the modules that will be used
 use strict;
 use Infoblox;

 #Create a session to the Infoblox appliance

 my $session = Infoblox::Session->new(
                master   => "192.168.1.2", #appliance host ip
                username => "admin",       #appliance user login
                password => "infoblox"     #appliance password
                );

 unless ($session) {
        die("Construct session failed: ",
                Infoblox::status_code() . ":" . Infoblox::status_detail());
 }
 print "Session created successfully\n";

 #Create the zone prior to an RPZ Substitute (TXT Record) Rule insertion
 my $zone = Infoblox::DNS::Zone->new(name => "rpz.com",
                                     rpz_policy => "GIVEN");
 unless ($zone) {
        die("Construct zone failed: ",
                Infoblox::status_code() . ":" . Infoblox::status_detail());
 }
 print "Zone object created successfully\n";

 #Verify if the zone exists
 my $object = $session->get(object => "Infoblox::DNS::Zone", name => "rpz.com");
 unless ($object) {
        print "Zone does not exist on server, safe to add the zone\n";
        $session->add($zone)
                or die("Add zone failed: ",
                                $session->status_code() . ":" . $session->status_detail());
 }
 print "Zone added successfully\n";

B<#Create a Substitute (TXT Record) Rule>

 my $rpz_txt = Infoblox::DNS::RPZRecord::TXT->new(
             name    => "txt.rpz.com",
             comment => "add TXT txt.rpz.com",
             text    => "this is text string",
             rp_zone => $zone,
             );

 unless ($rpz_txt) {
     die("Construct DNS record TXT failed: ",
             Infoblox::status_code() . ":" . Infoblox::status_detail());
 }

 #Add the Substitute (TXT Record) Rule object to the Infoblox appliance through a session
 $session->add($rpz_txt)
     or die("Add record TXT failed: ",
                     $session->status_code() . ":" . $session->status_detail());
 print "Substitute (TXT Record) Rule object added to server successfully\n";

B<#Search for a specific Substitute (TXT Record) Rule>

 #Search all RPZ Substitute (TXT Record) Rules in the zone that matches "rpz.com"
 my @retrieved_objs = $session->search(
             object => "Infoblox::DNS::RPZRecord::TXT",
             name   => 'rpz\.com'
             );
 my $object = $retrieved_objs[0];

 unless ($object) {
     die("Search record TXT failed: ",
             $session->status_code() . ":" . $session->status_detail());
 }
 print "Search Substitute (TXT Record) Rule object found at least 1 matching entry\n";

 #Search all RPZ Substitute (TXT Record) Rules with names that start with "txt" and end with "rpz.com"
 my @retrieved_objs = $session->search(
             object => "Infoblox::DNS::RPZRecord::TXT",
             name   => '^txt.*\.rpz\.com$'
             );
 my $object = $retrieved_objs[0];

 unless ($object) {
     die("Search record TXT failed: ",
             $session->status_code() . ":" . $session->status_detail());
 }
 print "Search Substitute (TXT Record) Rule object using regexp found at least 1 matching entry\n";

B<#Get and modify a Substitute (TXT Record) Rule>

 #Get an RPZ Substitute (TXT Record) Rule through the session
 my @retrieved_objs = $session->get(
             object => "Infoblox::DNS::RPZRecord::TXT",
             name   => "txt.rpz.com"
             );
 my $object = $retrieved_objs[0];

 unless ($object) {
     die("Get record TXT failed: ",
             $session->status_code() . ":" . $session->status_detail());
 }
 print "Get Substitute (TXT Record) Rule object found at least 1 matching entry\n";

 #Modify one of the attributes of the specified RPZ Substitute (TXT Record) Rule
 $object->text("this is new text string");

 #Apply the changes
 $session->modify($object)
     or die("Modify record TXT failed: ",
             $session->status_code() . ":" . $session->status_detail());
 print "Substitute (TXT Record) Rule object modified successfully \n";

B<#Remove a Substitute (TXT Record) Rule>

 #Get RPZ Substitute (TXT Record) Rule through the session
 my @retrieved_objs = $session->get(
  object => "Infoblox::DNS::RPZRecord::TXT",
  name   => "txt.rpz.com"
 );
 my $object = $retrieved_objs[0];
 unless ($object) {
  die("Get record TXT failed: ",
      $session->status_code() . ":" . $session->status_detail());
 }
 print "Get Substitute (TXT Record) Rule object found at least 1 matching entry\n";

 #Submit the object for removal
 $session->remove($object)
     or die("Remove record TXT failed: ",
             $session->status_code() . ":" . $session->status_detail());
 print "Substitute (TXT Record) Rule object removed successfully \n";

 ####PROGRAM ENDS####

=head1 AUTHOR

Infoblox Inc. L<http://www.infoblox.com/>

=head1 SEE ALSO

L<Infoblox::Session-E<gt>add()|Infoblox::Session/add()/>, L<Infoblox::Session-E<gt>get()|Infoblox::Session/get()/>, L<Infoblox::Session-E<gt>modify()|Infoblox::Session/modify()/>, L<Infoblox::Session-E<gt>remove()|Infoblox::Session/remove()/>, L<Infoblox::Session-E<gt>search()|Infoblox::Session/search()/>, L<Infoblox::Session|Infoblox::Session>, L<Infoblox::DNS::View|Infoblox::DNS::View>, L<Infoblox::DNS::Zone|Infoblox::DNS::Zone>

=head1 COPYRIGHT

Copyright (c) 2017 Infoblox Inc.

=cut
