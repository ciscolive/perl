=head1 NAME

Infoblox::DNS::RPZRecord::PTR - Response Policy Zone (RPZ) Substitute (PTR Record) Rule object.

=head1 DESCRIPTION

An RPZ Substitute (PTR Record) Rule object represents a Pointer (PTR) resource record. To define a specific address-to-name mapping, add an RPZ Substitute (PTR Record) Rule to a previously defined Response Policy Zone.

This record represents the substitution rule for DNS PTR records.

Note that you must specify only one view for the attribute "views".

=head1 CONSTRUCTOR

 #Constructor for an IPv4 Substitute (PTR Record) Rule object
 my $bind_ptr = Infoblox::DNS::RPZRecord::PTR->new (
         ipv4addr => $ipv4addr,             #Required
         ptrdname => $fqdn,                 #Required
         rp_zone  => $rp_zone,              #Required
         comment  => $string,               #Optional / Default is empty
         disable  => "true" | "false"       #Optional / Default "false"
         extattrs              => { $string => $extattr, ... },      #Optional / Default is undefined
         extensible_attributes => { $string => $string|$num, $string => [ $string|$num, ...], ... }, #Optional / Default is undefined
         last_discovered  => $string,       #Optional / Default is empty
         name     => $fqdn,                 #Optional
         ttl      => $num | undef,          #Optional / Default is undefined
         views    => [$View1],              #Optional / Default is "default" view
     );

 #Constructor for an IPv6 Substitute (PTR Record) Rule object
 my $bind_ptr = Infoblox::DNS::RPZRecord::PTR->new (
         ipv6addr => $ipv6addr,             #Required
         ptrdname => $fqdn,                 #Required
         rp_zone  => $rp_zone,              #Required
         comment  => $string,               #Optional / Default is empty
         disable  => "true" | "false"       #Optional / Default "false"
         extensible_attributes => { $string => $string|$num, $string => [ $string|$num, ...], ... }, #Optional / Default is undefined
         name     => $fqdn,                 #Optional
         ttl      => $nun | undef,          #Optional / Default is undefined
         views    => [$View1],              #Optional / Default is "default" view
     );

You cannot set both extattrs and extensible_attributes attributes at the same time.

=head1 SESSION METHODS

This section describes all the methods in Infoblox::Session that you can apply to a Substitute (PTR Record) Rule object.

=head2 Infoblox::Session->add( )

=over

Use this method to add an object to the Infoblox appliance. See L<Infoblox::Session-E<gt>add()|Infoblox::Session/add()/> for parameters and return values.

=over

=item B<Example>

 #Constructor for an IPv4 Substitute (PTR Record) Rule object
 my $bind_ptr = Infoblox::DNS::RPZRecord::PTR->new (
     ipv4addr => "10.0.0.1",
     ptrdname => "bind_ptr.domain.com",
     comment => "this is a demo RPZ Substitute (PTR Record) Rule",
     disable => "true",
     ttl => "33",
     views => [$view1],
     rp_zone => $response_policy_zone  );
  # Submit for addition
  my $response = $session->add( $bind_ptr );

 #Constructor for an IPv6 Substitute (PTR Record) Rule object
 my $bind_ptr = Infoblox::DNS::RPZRecord::PTR->new(
     ptrdname     => "ip6host.this.com",
     comment  => " this is a demo ipv6 RPZ Substitute (PTR Record) Rule ",
     disable => "true",
     ttl => "333",
     ipv6addr => "1234:5678:9abc:1000::1",
     rp_zone => $response_policy_zone  );
  # Submit for addition
  my $response = $session->add( $bind_ptr );

=back

=back

=head2 Infoblox::Session->get( )

=over

Use this method to retrieve existing objects from the Infoblox appliance. See L<Infoblox::Session-E<gt>get()|Infoblox::Session/get()/> for parameters and return values.

=over

=item B<Key Reference>

 Apply the following attributes to get a specific Substitute (PTR Record) Rule object:

 name | ipv4addr | ipv6addr | ptrdname - Optional. name/ptrdname is in FQDN format. ipv4addr is an IPv4 address with a 32-bit number in dotted decimal notation. ipv6addr is the IPv6 (128 bits) address of the Substitute (PTR Record) Rule. ptrdname is the domain name of the Substitute (PTR Record) Rule.
 view - Optional. The DNS view in which the RPZ Substitute (PTR Record) Rule is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the 'default' view only.
 zone - Optional. A zone name in FQDN format.
 extattrs     - Optional. A hash reference containing extensible attributes.
 extensible_attributes - Optional. A hash reference containing extensible attributes.

=item B<Example>

 #To get an IPv4 Substitute (PTR Record) Rule object by name
 my @retrieved_objs = $session->get(
     object => "Infoblox::DNS::RPZRecord::PTR",
     name   => "1.0.0.10.in-addr.arpa.rpz.com",
     view   => "default" );

 #To get an IPv4 Substitute (PTR Record) Rule object by ipv4addr
 my @retrieved_objs = $session->get(
     object   => "Infoblox::DNS::RPZRecord::PTR",
     ipv4addr => "10.0.0.1",
     view     => "default" );

 #To get an IPv4 Substitute (PTR Record) Rule object by ptrdname
 my @retrieved_objs = $session->get(
     object   => "Infoblox::DNS::RPZRecord::PTR",
     ptrdname => "bind_ptr.domain.com",
     view     => "default" );

 #To get an IPv6 Substitute (PTR Record) Rule object by name
 my @retrieved_objs = $session->get(
     object => "Infoblox::DNS::RPZRecord::PTR",
     name   => "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.c.b.a.9.8.7.6.5.4.3.2.1.ip6.arpa.rpz.com",
     view   => "default" );

 #To get an IPv6 Substitute (PTR Record) Rule object by ipv6addr
 my @retrieved_objs = $session->get(
     object   => "Infoblox::DNS::RPZRecord::PTR",
     ipv6addr => "1234:5678:9abc:1000::1",
     view     => "default" );

 #To get an IPv6 Substitute (PTR Record) Rule object by ptrdname
 my @retrieved_objs = $session->get(
     object   => "Infoblox::DNS::RPZRecord::PTR",
     ptrdname => "ip6host.this.com",
     view     => "default" );

 # get all Substitute (PTR Record) Rule objects with a given extensible attribute
 my @retrieved_objs = $session->get(
     object => "Infoblox::DNS::RPZRecord::PTR",
     extensible_attributes => { 'Site' => 'Santa Clara' });

=back

=back

=head2 Infoblox::Session->modify( )

=over

Use this method to modify objects in the Infoblox appliance. See L<Infoblox::Session-E<gt>modify()|Infoblox::Session/modify()/> for parameters and return values.

=over

=item B<Example>

 # Use method to modify the comment for IPv4 or IPv6 object.
 $bind_ptr->comment("this is a modified comment");
 # Submit modification
 my $response = $session->modify( $bind_ptr );

=back

=back

=head2 Infoblox::Session->remove( )

=over

Use this function to submit the remove of an object from the Infoblox appliance. See L<Infoblox::Session-E<gt>remove()|Infoblox::Session/remove()/> for parameters and return values.

To remove a specific object, first use get() or search() to retrieve the specific object, and then submit this object for removal.

=over

=item B<Example>

B<#Remove an object with a unique name>

 # Get the object with the same name for IPv4 object
 my @retrieved_objs = $session->get(
     object => "Infoblox::DNS::RPZRecord::PTR",
     name   => "1.0.0.10.in-addr.arpa.rpz.com",
     view   => "default" );
 # find the desired object from retrieved list.
 my $desired_ptr = $retrieved_objs[0];
 # Submit for removal
 my $response = $session->remove( $desired_ptr );

 # Get the object with the same name for an IPv6 object
 my @retrieved_objs = $session->get(
     object => "Infoblox::DNS::RPZRecord::PTR",
     name   => "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.c.b.a.9.8.7.6.5.4.3.2.1.ip6.arpa.rpz.com",
     view   => "default" );
 # find the desired object from retrieved list.
 my $desired_ptr = $retrieved_objs[0];
 # Submit for removal
 my $response = $session->remove( $desired_ptr );

=back

=back

=head2 Infoblox::Session->search( )

=over

Use this method to search for existing Substitute (PTR Record) Rule objects in the Infoblox appliance. See L<Infoblox::Session-E<gt>search()|Infoblox::Session/search()/> for parameters and return values.

=over

=item B<Key Reference>

 Apply the following attributes to search for a Substitute (PTR Record) Rule object:

 name | ipv4addr | ipv6addr | ptrdname - Optional. The IPv4 or IPv6 address of the RPZ Substitute (PTR Record) Rule, or the domain name in FQDN (Fully Qualified Domain Name) format (regular expression).
 view                                  - Optional. The DNS view in which the RPZ Substitute (PTR Record) Rule is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the 'default' view only.
 comment                               - Optional. A comment in string format (regular expression).
 extattrs                              - Optional. A hash reference containing extensible attributes.
 extensible_attributes                 - Optional. A hash reference containing extensible attributes.

For more information about searching extensible attributes, see L<Infoblox::Grid::ExtensibleAttributeDefE<sol>Searching Extensible Attributes|Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes>.

=item B<Example>

 # search for all IPv4 Substitute (PTR Record) Rule objects in the default DNS view that match 10.0.0.0/8 and that contain "bind" in the comment field
 my @retrieved_objs = $session->search(
     object  => "Infoblox::DNS::RPZRecord::PTR",
     name    => "10.in-addr.arpa.rpz.com",
     comment => "bind*",
     view    => "default" );

 my @retrieved_objs = $session->search(
     object   => "Infoblox::DNS::RPZRecord::PTR",
     ipv4addr => '10\..*\..*\..*',
     comment  => "bind*",
     view     => "default" );

 my @retrieved_objs = $session->search(
     object   => "Infoblox::DNS::RPZRecord::PTR",
     ptrdname => "bind_ptr.domain.com",
     comment  => "bind*",
     view     => "default" );

 # search for all IPv6 Substitute (PTR Record) Rule objects under 1234:5678:9abc::/48 which have bind in comment field in default view
 my @retrieved_objs = $session->search(
     object  => "Infoblox::DNS::RPZRecord::PTR",
     name    => "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.c.b.a.9.8.7.6.5.4.3.2.1.ip6.arpa.rpz.com",
     comment => "bind*",
     view    => "default" );

 my @retrieved_objs = $session->search(
     object   => "Infoblox::DNS::RPZRecord::PTR",
     ipv6addr => "1234:5678:9abc:1000::1",
     comment  => "bind*",
     view     => "default" );

 my @retrieved_objs = $session->search(
     object   => "Infoblox::DNS::RPZRecord::PTR",
     ptrdname => "ip6host.this.com",
     comment  => "bind*",
     view     => "default" );

 # search for all Substitute (PTR Record) Rule objects in the "10.10.10.in-addr.arpa" zone of the default view
 my @retrieved_objs = $session->search(
     object => "Infoblox::DNS::RPZRecord::PTR",
     zone   => "10.10.10.in-addr.arpa",
     view   => "default"
     );

 # search all RPZ Substitute (PTR Record) Rules with the extensible attribute 'Site'
 my @retrieved_objs = $session->search(
    object => "Infoblox::DNS::RPZRecord::MX",
    extensible_attributes => { 'Site' => 'Santa Clara' });

=back

=back

=head1 METHODS

This section describes all the methods that you can use to configure and retrieve the attribute value of an RPZ Substitute (PTR Record) Rule.

=head2 comment( )

=over

Use this method to set or retrieve the comment.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Desired comment in string format with a maximum of 256 bytes.

=item B<Returns>

If you specified a parameter,the method returns true when the modification succeeds,and returns false when the operation fails.

=item B<Example>

 #Get comment
 my $comment = $rpz_ptr->comment();
 #Modify comment
 $rpz_ptr->comment("Modifying the Substitute (PTR Record) Rule comment");

=back

=back

=head2 disable( )

=over

Use this method to set or retrieve the disable flag of a DNS record.

Include the specific parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

The default value for this field is false, therefore the DNS record is enabled.

=over

=item B<Parameter>

Specify "true" to set the disable flag or "false" to deactivate/unset it.

=item B<Returns>

If you specified a parameter,the method returns true when the modification succeeds,and returns false when the operation fails.

=item B<Example>

 #Get disable
 my $disable = $rpz_ptr->disable();
 #Modify disable
 $rpz_ptr->disable("true");

=back

=back

=head2 extattrs( )

=over

Use this method to set or retrieve the extensible attributes associated with a RPZ Substitute (PTR Record) Rule object.

=over

=item B<Parameter>

Valid value is a hash reference containing the names of extensible attributes and their associated values ( L<Infoblox::Grid::Extattr|Infoblox::Grid::Extattr> objects ).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get extattrs
 my $ref_extattrs = $rpz_ptr->extattrs();
 #Modify extattrs
 $rpz_ptr->extattrs({ 'Site' => $extattr1, 'Administrator' => $extattr2 });

=back

=back

=head2 extensible_attributes( )

=over

Use this method to set or retrieve the extensible attributes associated with an RPZ Substitute (PTR Record) Rule.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

For valid values for extensible attributes, see L<Infoblox::Grid::ExtensibleAttributeDefE<sol>Extensible Attribute Values|Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values>.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get extensible attributes
 my $ref_extensible_attributes = $rpz_ptr->extensible_attributes();
 #Modify extensible attributes
 $rpz_ptr->extensible_attributes({ 'Site' => 'Santa Clara', 'Administrator' => [ 'Peter', 'Tom' ] });

=back

=back

=head2 ipv4addr( )

=over

Use this method to set or retrieve the IPv4 address.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv4 address is a 32-bit number in dotted decimal notation. It consists of four 8-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).

=item B<Returns>

If you specified a parameter,the method returns true when the modification succeeds,and returns false when the operation fails.

=item B<Example>

 #Get ipv4addr
 my $ipv4addr = $rpz_ptr->ipv4addr();
 #Modify ipv4addr
 $bind_ptr->ipv4addr("10.0.0.2");

=back

=back

=head2 ipv6addr( )

=over

Use this method to set or retrieve the IPv6 address.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The IPv6 (128 bits) of the Substitute (PTR Record) Rule (example: aaaa:bbbb:cccc:dddd:eeee:ffff:0000:1111).

=item B<Returns>

If you specified a parameter,the method returns true when the modification succeeds,and returns false when the operation fails.

=item B<Example>

 #Get ipv6addr
 my $ipv6addr = $rpz_ptr->ipv6addr();
 #Modify ipv6addr
 $bind_ptr->ipv6addr("1234:5678:9abc:1000::2");

=back

=back

=head2 name( )

=over

Use this method to set or retrieve the FQDN of the RPZ Substitute (PTR Record) Rule.

Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

FQDN of the RPZ Substitute (PTR Record) Rule

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get name
 my $name = $rpz_ptr->name();
 #Modify name
 $rpz_ptr->name('12.0.0.1.in-addr.arpa.rpz.com');

=back

=back

=head2 ptrdname( )

=over

Use this method to set or retrieve the Substitute (PTR Record) Rule domain name.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Text with the domain name for the Substitute (PTR Record) Rule.

=item B<Returns>

If you specified a parameter,the method returns true when the modification succeeds,and returns false when the operation fails.

=item B<Example>

 #Get ptrdname
 my $ptrdname = $rpz_ptr->ptrdname();
 #Modify ptrdname
 $rpz_ptr->ptrdname("new domain name");

=back

=back

=head2 ttl( )

=over

Use this method to configure or retrieve the Time to Live (TTL) value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

The default value is undefined; therefore the record inherits the TTL value from the zone level.

With a specified TTL value, the method overrides the zone values with the specified TTL value.

=over

=item B<Parameter>

A 32-bit integer (range from 0 to 4294967295) that represents the duration ,in seconds, that the record is cached. Zero indicates that the record should not be cached.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

=item B<Example>

 #Get ttl
 my $ttl = $rpz_ptr->ttl();
 #Modify ttl
 $rpz_ptr->ttl(1800);
 #Un-override ttl
 $rpz_ptr->ttl(undef);

=back

=back

=head2 views( )

=over

Use this method to specify or retrieve the view in which the RPZ Substitute (PTR Record) Rule is located.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

The default value is the "default" view, which means the RPZ Substitute (PTR Record) Rule is located in the default DNS view.

=over

=item B<Parameter>

An array reference of defined Infoblox::DNS::View objects.

Note that the array size must be 1.

=item B<Returns>

If you specified a parameter,the method returns true when the modification succeeds,and returns false when the operation fails.

=item B<Example>

 #Get views
 my $ref_views = $rpz_ptr->views();
 #Modify views, an array of Infoblox::DNS::View objects
 $rpz_ptr->views([$view1]);

=back

=back

=head2  zone( )

=over

Use this method to retrieve the zone name of a Substitute (PTR Record) Rule. This method is read-only and cannot be set.

=over

=item B<Parameter>

None

=item B<Returns>

Returns the attribute value.

=item B<Example>

 # Get zone
 my $zone = $rpz_ptr->zone();

=back

=back

=head2  rp_zone( )

=over

Use this method to set or retrieve the zone object of a Substitute (PTR Record) Rule.

=over

=item B<Parameter>

An L<Infoblox::DNS::Zone|Infoblox::DNS::Zone> object.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 # Get rp_zone
 my $rp_zone = $rpz_ptr->rp_zone();
 #Modify rp_zone, reference of Infoblox::DNS::Zone object
 $rpz_ptr->rp_zone($response_policy_zone);

=back

=back

=head1 SAMPLE CODE

The following sample code demonstrates different operations that can be applied to an object, such as create, search, modify, and remove an object. This sample code also includes error handling for the operations.

B<#Preparation prior to a DNS IPv4 RPZ Substitute (PTR Record) Rule insertion>

 #PROGRAM STARTS: Include all the modules that will be used
 use strict;
 use Infoblox;

 #Create a session to the Infoblox appliance
 my $session = Infoblox::Session->new(
     master   => "192.168.1.2",
     username => "admin",
     password => "infoblox"
 );
 unless ($session) {
    die("Construct session failed: ",
        $session->status_code() . ":" . $session->status_detail());
 }
 print "Session created successfully\n";

 #Create the zone prior to an RPZ Substitute (PTR Record) Rule insertion
 my $zone = Infoblox::DNS::Zone->new(name => "10.0.0.0/8");
 unless ($zone) {
    die("Construct zone failed: ",
        Infoblox::status_code() . ":" . Infoblox::status_detail());
 }
 print "Zone object created successfully\n";

 #Verify if the zone exists
 my $object = $session->get(object => "Infoblox::DNS::Zone", name => "10.in-addr.arpa");
 unless ($object) {
    print "Zone does not exist on server, safe to add the zone\n";
    $session->add($zone)
       or die("Add zone failed: ",
              $session->status_code() . ":" . $session->status_detail());
 }
 print "Zone added successfully\n";

B<#Create a DNS IPv4 RPZ Substitute (PTR Record) Rule>

 my $bind_ptr = Infoblox::DNS::RPZRecord::PTR->new(
    ptrdname     => "bind_ptr.domain.com",
    comment  => " this is a demo RPZ Substitute (PTR Record) Rule ",
    ipv4addr => "10.0.0.1"
  );
  unless ($bind_ptr) {
     die("Construct Substitute (PTR Record) Rule failed: ",
         Infoblox::status_code() . ":" . Infoblox::status_detail());
  }
 print "Substitute (PTR Record) Rule object created successfully\n";

 #Add the Substitute (PTR Record) Rule object to the Infoblox appliance through a session
 $session->add($bind_ptr)
     or die("Add Substitute (PTR Record) Rule failed: ",
            $session->status_code() . ":" . $session->status_detail());
 print "Substitute (PTR Record) Rule object added to server successfully\n";

B<#Search for a specific DNS IPv4 RPZ Substitute (PTR Record) Rule>

 #Search for all RPZ Substitute (PTR Record) Rules that match "10.in-addr.arpa"
 my @retrieved_objs = $session->search(
     "object" => "Infoblox::DNS::RPZRecord::PTR",
     "name" => '10\.in-addr.arpa',
 );
 my $object = $retrieved_objs[0];
 unless ($object) {
     die("Search Substitute (PTR Record) Rule failed: ",
         $session->status_code() . ":" . $session->status_detail());
 }
 print "Search Substitute (PTR Record) Rule object found at least 1 matching entry\n";

 #Search all RPZ Substitute (PTR Record) Rules that have "bind" in the comment
 my @retrieved_objs = $session->search(
     object => "Infoblox::DNS::RPZRecord::PTR",
     name   => '10\.*\.in-addr.arpa',
     comment => "bind*"
 );
 my $object = $retrieved_objs[0];
 unless ($object) {
     die("Search Substitute (PTR Record) Rule failed: ",
         $session->status_code() . ":" . $session->status_detail());
 }
 print "Search Substitute (PTR Record) Rule object using regexp found at least 1 matching entry\n";

B<#Get and modify a DNS IPv4 RPZ Substitute (PTR Record) Rule>

 #Get an RPZ Substitute (PTR Record) Rule through the session
 my @retrieved_objs = $session->get(
     object => "Infoblox::DNS::RPZRecord::PTR",
     name   => "1.0.0.10.in-addr.arpa.rpz.com",
 );
 my $object = $retrieved_objs[0];
 unless ($object) {
     die("Get Substitute (PTR Record) Rule failed: ",
         $session->status_code() . ":" . $session->status_detail());
 }
 print "Get Substitute (PTR Record) Rule object found at least 1 matching entry\n";
#Modify one of the attributes of the specified RPZ Substitute (PTR Record) Rule
 $object->comment ("modified comment");

 #Apply the changes
 $session->modify($object)
     or die("Modify Substitute (PTR Record) Rule failed: ",
            $session->status_code() . ":" . $session->status_detail());
 print "Substitute (PTR Record) Rule object modified successfully \n";

B<#Remove a DNS IPv4 RPZ Substitute (PTR Record) Rule>

 #Get an RPZ Substitute (PTR Record) Rule through the session
 my @retrieved_objs = $session->get(
     object => "Infoblox::DNS::RPZRecord::PTR",
     name   => "1.0.0.10.in-addr.arpa.rpz.com",
 );

  my $object = $retrieved_objs[0];
 unless ($object) {
     die("Get Substitute (PTR Record) Rule failed: ",
          $session->status_code() . ":" . $session->status_detail());
 }
 print "Get Substitute (PTR Record) Rule object found at least 1 matching entry\n";

 #submit the object for removal
 $session->remove($object)
     or die("Remove Substitute (PTR Record) Rule failed: ",
            $session->status_code() . ":" . $session->status_detail());
 print "Substitute (PTR Record) Rule object removed successfully \n";

B<#Preparation prior to a DNS IPv6 RPZ Substitute (PTR Record) Rule insertion>

 #PROGRAM STARTS: Include all the modules that will be used
 use strict;
 use Infoblox;

 #Create a session to the Infoblox appliance
 my $session = Infoblox::Session->new(
     master   => "192.168.1.2",
     username => "admin",
     password => "infoblox"
 );
 unless ($session) {
    die("Construct session failed: ",
        $session->status_code() . ":" . $session->status_detail());
 }
 print "Session created successfully\n";

 #Create the zone prior to a Substitute (PTR Record) Rule insertion
 my $zone = Infoblox::DNS::Zone->new(name => "rpz.com",
                                     rpz_policy => "GIVEN");
 unless ($zone) {
 die("Construct zone failed: ",
     Infoblox::status_code() . ":" . Infoblox::status_detail());
 }
 print "Zone object created successfully\n";

 #Verify if the zone exists
 my $object = $session->get(object => "Infoblox::DNS::Zone", name => "rpz.com");
 unless ($object) {
 print "Zone does not exist on server, safe to add the zone\n";
 $session->add($zone)
    or die("Add zone failed: ",
           $session->status_code() . ":" . $session->status_detail());
 }

B<#Create a DNS IPv6 RPZ Substitute (PTR Record) Rule>

 my $bind_ptr = Infoblox::DNS::RPZRecord::PTR->new(
     ptrdname     => "ip6host.this.com",
     comment  => " this is a demo RPZ Substitute (PTR Record) Rule ",
     ipv6addr => "1234:5678:9abc:1000::1",
     rp_zone  => $zone,
 );
 unless ($bind_ptr) {
  die("Construct DNS Substitute (PTR Record) Rule failed: ",
      Infoblox::status_code() . ":" . Infoblox::status_detail());
 }
 print "Substitute (PTR Record) Rule object created successfully\n";
 #Add the Substitute (PTR Record) Rule object to the Infoblox  appliance through a session
 $session->add($bind_ptr)
     or die("Add Substitute (PTR Record) Rule failed: ",
            $session->status_code() . ":" . $session->status_detail());
 print "Substitute (PTR Record) Rule object added to server successfully\n";

B<#Search for a specific DNS IPv6 RPZ Substitute (PTR Record) Rule>

 #Search for an RPZ Substitute (PTR Record) Rule in the zone
 my @retrieved_objs = $session->search(
  "object" => "Infoblox::DNS::RPZRecord::PTR",
  "name" => "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.c.b.a.9.8.7.6.5.4.3.2.1.ip6.arpa.rpz.com",
 );
 my $object = $retrieved_objs[0];
 unless ($object) {
  die("Search Substitute (PTR Record) Rule failed: ",
      $session->status_code() . ":" . $session->status_detail());
 }
 print "Search Substitute (PTR Record) Rule object found at least 1 matching entry\n";

B<#Get and modify a DNS IPv6 RPZ Substitute (PTR Record) Rule>

 #Get RPZ Substitute (PTR Record) Rule through the session
 my @retrieved_objs = $session->get(
  object => "Infoblox::DNS::RPZRecord::PTR",
  name   => "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.c.b.a.9.8.7.6.5.4.3.2.1.ip6.arpa.rpz.com",
 );
 my $object = $retrieved_objs[0];
 unless ($object) {
  die("Get Substitute (PTR Record) Rule failed: ",
      $session->status_code() . ":" . $session->status_detail());
 }
 print "Get Substitute (PTR Record) Rule object found at least 1 matching entry\n";

 #Modify one of the attributes of the specified RPZ Substitute (PTR Record) Rule
 $object->comment ("modified comment");

 #Apply the changes
 $session->modify($object)
  or die("Modify Substitute (PTR Record) Rule failed: ",
          $session->status_code() . ":" . $session->status_detail());
 print "Substitute (PTR Record) Rule object modified successfully \n";

B<#Remove a DNS IPv6 RPZ Substitute (PTR Record) Rule>

 #Get RPZ Substitute (PTR Record) Rule through the session
 my @retrieved_objs = $session->get(
  object => "Infoblox::DNS::RPZRecord::PTR",
  name   => "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.c.b.a.9.8.7.6.5.4.3.2.1.ip6.arpa.rpz.com",
 );
 my $object = $retrieved_objs[0];
 unless ($object) {
  die("Get Substitute (PTR Record) Rule failed: ",
       $session->status_code() . ":" . $session->status_detail());
 }
 print "Get Substitute (PTR Record) Rule object found at least 1 matching entry\n";

 #Submit the object for removal
 $session->remove($object)
  or die("Remove Substitute (PTR Record) Rule failed: ",
         $session->status_code() . ":" . $session->status_detail());
 print "Substitute (PTR Record) Rule object removed successfully \n";

 ####PROGRAM ENDS####

=head1 AUTHOR

Infoblox Inc. L<http://www.infoblox.com/>

=head1 SEE ALSO

L<Infoblox::DNS::View|Infoblox::DNS::View>, L<Infoblox::DNS::Zone|Infoblox::DNS::Zone>, L<Infoblox::Session|Infoblox::Session>, L<Infoblox::Session-E<gt>get()|Infoblox::Session/get(/)>, L<Infoblox::Session-E<gt>search()|Infoblox::Session/search()/>, L<Infoblox::Session-E<gt>add()|Infoblox::Session/add()/>, L<Infoblox::Session-E<gt>remove()|Infoblox::Session/remove()/>, L<Infoblox::Session-E<gt>modify()|Infoblox::Session/modify()/>

=head1 COPYRIGHT

Copyright (c) 2017 Infoblox Inc.

=cut
