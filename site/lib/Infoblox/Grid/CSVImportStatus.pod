=head1 NAME

Infoblox::Grid::CSVImportStatus - CSV import status object

=head1 DESCRIPTION

This object is used to represent the status of the current CSV import task. All methods are read-only.

=head1 MODULE METHODS

The following functions can be applied to a Grid::CSVImportStatus object.

=head2 Infoblox::Session->get( )

=over

Use this method to retrieve matching objects from the Infoblox appliance. See L<Infoblox::Session-E<gt>get()|Infoblox::Session/get()/> for parameters and return values.

=over

=item B<Key Reference>

 Apply the following attributes to get a specific CSV import status object

  object    - Required. It must be set to "Infoblox::Grid::CSVImportStatus".
  import_id - Optional. ID of the import task that the status object is describing. If not specified, 
              the status of the first import task is returned.

=item B<Example>

 my $import_id = $session->import_data(
                                       type => 'csv',
                                       path => "/tmp/zone.csv",
                                       separator   => 'semicolon',
                                      );

 unless($import_id){
     die("Import failed: ",
         Infoblox::status_code(). ":" .Infoblox::status_detail());
 }

 my @retrieved_objs = $session->get(
     object    => "Infoblox::Grid::CSVImportStatus",
     import_id => $import_id,
     );

=back

=back

=head1 METHODS

This section describes all the methods that you can use to retrieve the status of a CSV import operation.

=head2 admin( )

=over

Use this method to retrieve the name of the administrator that started the import.

=over

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get admin
 my $admin = $service_status->admin();

=back

=back

=head2 end_time( )

=over

Use this method to retrieve the time the CSV import ended.

=over

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get end_time
 my $end_time = $service_status->end_time();

=back

=back

=head2 file_name( )

=over

Use this method to retrieve the name of the file used for the CSV import.

=over

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get file_name
 my $file_name = $service_status->file_name();

=back

=back

=head2 import_id( )

=over

Use this method to retrieve the ID of the import task that the status object is describing.

=over

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get import_id
 my $import_id = $service_status->import_id();

=back

=back

=head2 lines_failed( )

=over

Use this method to retrieve the number of lines that had failures in the CSV file used for the current CSV import.

=over

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get lines_failed
 my $lines_failed = $service_status->lines_failed();

=back

=back

=head2 lines_processed( )

=over

Use this method to retrieve the number of lines processed in the CSV file used for the current CSV import.

=over

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get lines_processed
 my $lines_processed = $service_status->lines_processed();

=back

=back

=head2 lines_total( )

=over

Use this method to retrieve the total number of lines read from the CSV file during the current CSV import.

=over

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get lines_total
 my $lines_total = $service_status->lines_total();

=back

=back

=head2 lines_warning( )

=over

Use this method to retrieve the number of lines that had warnings in the CSV file used for the current CSV import.

=over

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get lines_warning
 my $lines_warning = $service_status->lines_warning();

=back

=back

=head2 start_time( )

=over

Use this method to retrieve the time the CSV import started.

=over

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get start_time
 my $start_time = $service_status->start_time();

=back

=back

=head2 status( )

=over

Use this method to retrieve the status of the current CSV import. The returned status is one of the following: 'Uploaded', 'Pending', 'Running', 'Failed', 'Stopped' or 'Completed'.

=over

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get status
 my $status = $service_status->status();

=back

=back

=head1 SAMPLE CODE

The following sample code demonstrates how to export / import data by using CSV files.

 #PROGRAM STARTS: Include all the modules that will be used
 use strict;
 use Infoblox;

 #Create a session to the Infoblox appliance
 my $host_ip =  "192.168.1.2";
 my $session = Infoblox::Session->new(
                                      master   => $host_ip,
                                      username => "admin",
                                      password => "infoblox"
                                     );
 unless($session){
     die("Constructor for session failed: ",
         Infoblox::status_code(). ":" . Infoblox::status_detail());
 }
 print "Session created successfully.\n";

 #Create a DNS zone
 my $memberns1 = Infoblox::DNS::Member->new(
                                            name     => "infoblox.localdomain",
                                            ipv4addr => $host_ip,
                                            lead     => "false",
                                            stealth  => "false"
                                           );

 #Add the zone
 my $firstzone = Infoblox::DNS::Zone->new(
                                          name        => "test.com",
                                          email       => "admin\@infoblox.com",
                                          comment     => "add a zone test.com",
                                          primary     => $memberns1,
                                         );

 unless($firstzone){
     die("Construct test.com zone object failed: ",
         Infoblox::status_code(). ":" .Infoblox::status_detail());
 }
 print "test.com zone object created successfully.\n";

 $session->add($firstzone)
   or die("Add zone for test.com failed: ",
          $session->status_code(). ":" .$session->status_detail());

 print"Zone test.com added successfully.\n";

 #Export the newly created zone
 $session->export_data(
                       type        => 'csv',
                       path        => '/tmp/zone.csv',
                       object_type => 'Infoblox::DNS::Zone',
                       separator   => 'semicolon',

                       # search parameters
                       name        => '.*test.com',
                      )
   or die("Export zone for test.com failed: ",
          $session->status_code(). ":" .$session->status_detail());

 # Wait for the export to complete
 sleep(5);

 print "The zone was exported\n";

 # Remove the zone from the database
 $session->remove($firstzone)
   or die("Remove zone for test.com failed: ",
          $session->status_code(). ":" .$session->status_detail());

 print "The zone was removed\n";

 # Import the zone by using the CSV file that was exported

 my $import_id = $session->import_data(
                                       type => 'csv',
                                       path => "/tmp/zone.csv",
                                       separator   => 'semicolon',
                                      );

 unless($import_id){
     die("Import failed: ",
         Infoblox::status_code(). ":" .Infoblox::status_detail());
 }

 # Wait for the import to complete
 sleep(5);

 my $status = $session->get(
                            object  => 'Infoblox::Grid::CSVImportStatus',
                           );

 unless($status){
     die("Failed to fetch the import status: ",
         Infoblox::status_code(). ":" .Infoblox::status_detail());
 }

 print "The zone was re-imported\n";

 # The code should be cycling to sleep, fetch and wait until the import is finished.
 unless($status->status() eq 'Completed'){
     die("The import took too long to complete: " . $status->status());
 }

 unless($status->lines_failed() == 0){
     die("There were some import failures: " . $status->lines_failed());
 }

 print "The zone re-import was successful\n";

 # The zone was re-imported. If we import the file again without merging,
 # an error occurs.

 $import_id = $session->import_data(
                                    type => 'csv',
                                    path => "/tmp/zone.csv",
                                    separator   => 'semicolon',
                                   );

 unless($import_id){
     die("Import failed: ",
         Infoblox::status_code(). ":" .Infoblox::status_detail());
 }

 # Wait for the import to complete
 sleep(5);

 print "The zone re-re-import was completed\n";

 my $status = $session->get(
                            object  => 'Infoblox::Grid::CSVImportStatus',
                           );

 unless($status){
     die("Failed to fetch the import status: ",
         Infoblox::status_code(). ":" .Infoblox::status_detail());
 }

 # The code should be cycling to sleep, fetch and wait until the import is finished.
 unless($status->status() eq 'Completed'){
     die("The import took too long to complete: " . $status->status());
 }

 if($status->lines_failed() == 0){
     die("There were no import failures: " . $status->lines_failed());
 }

 print "The zone re-re-import correctly failed\n";

 # Review the  failure
 $session->export_data(
                       type        => 'csv_error_log',
                       path        => '/tmp/error_log.txt',
                       import_id   => $import_id,
                      )
   or die("Export error log failed: ",
          $session->status_code(). ":" .$session->status_detail());

 # The failure is in this file
 print "Error log for the failed import\n-------\n";
 print `cat /tmp/error_log.txt`;

 #Remove the zone
 $session->remove(
                  object => "Infoblox::DNS::Zone",
                  name   => "test.com",
                 )
   or die("Remove zone test.com failed: ",
          $session->status_code(). ":" .$session->status_detail());

 print "The zone was removed\n";

 ####PROGRAM ENDS####

=head1 AUTHOR

Infoblox Inc. L<http://www.infoblox.com/>

=head1 SEE ALSO

L<Infoblox::Session|Infoblox::Session>,L<Infoblox::Session-E<gt>get()|Infoblox::Session/get()/>

=head1 COPYRIGHT

Copyright (c) 2017 Infoblox Inc. 

=cut
