=head1 NAME

Infoblox::Grid::KerberosKey - Grid kerberos key object.

=head1 DESCRIPTION

This object is used to manage kerberos keys for GSS-TSIG.

=head1 CONSTRUCTOR

 #Constructor for an Grid KerberosKey object
  my $key = Infoblox::Grid::KerberosKey->new(
     principal => $string,  #Required.
     domain    => $string,  #Optional / Default is undefined
     version   => $num,     #Optional / Default is undefined
   );

=head1 MODULE METHODS

The following functions are available to be applied to an KerberosKey object.

=head2 Infoblox::Grid::DNS->gss_tsig_keys( )

=over

Use this function to specify a Kerberos key at the grid level on the Infoblox appliance. See L<Infoblox::Grid::DNS-E<gt>gss_tsig_keys()|Infoblox::Grid::DNS/gss_tsig_keys()> for parameters and return values.

=over

=item B<Example>

 #Create a Kerberos object.
 my $key = Infoblox::Grid::KerberosKey->new(
                  principal => 'host/appliance.ivan.test@LADYBUG.LOCAL',
                  domain => 'JACKIE.LOCAL',
                  version => '3',
 );

 #Configure kerberos key on the Infoblox grid object
 my $response = $grid->gss_tsig_keys([$key]);

=back

=back

=head2 Infoblox::Grid::DHCP->gss_tsig_keys( )

=over

Use this function to specify a Kerberos key at the grid level on the Infoblox appliance. See L<Infoblox::Grid::DHCP-E<gt>gss_tsig_keys()|Infoblox::Grid::DHCP/gss_tsig_keys()> for parameters and return values.

=over

=item B<Example>

 #Create a Kerberos object.
 my $key = Infoblox::Grid::KerberosKey->new(
                  principal => 'host/appliance.ivan.test@LADYBUG.LOCAL',
                  domain => 'JACKIE.LOCAL',
                  version => '3',
                );

 #Configure kerberos key on the Infoblox grid object
 my $response = $grid->gss_tsig_keys([$key]);

=back

=back

=head2 Infoblox::Grid::Member::DNS->gss_tsig_keys( )

=over

Use this function to specify a Kerberos key at the member level on the Infoblox appliance. See L<Infoblox::Grid::Member::DNS-E<gt>gss_tsig_keys()|Infoblox::Grid::Member::DNS/gss_tsig_keys()> for parameters and return values.

=over

=item B<Example>

 #Create a KerberosKey object.
 my $key = Infoblox::Grid::KerberosKey->new(
                  principal => 'host/appliance.ivan.test@LADYBUG.LOCAL',
                  domain => 'JACKIE.LOCAL',
                  version => '3',
 );

 #Configure KerberosKey on the Infoblox member object
 my $response = $member->gss_tsig_keys([$key]);

=back

=back

=head2 Infoblox::Grid::Member::DHCP->gss_tsig_keys( )

=over

Use this function to specify a Kerberos key at the member level on the Infoblox appliance. See L<Infoblox::Grid::Member::DHCP-E<gt>gss_tsig_keys()|Infoblox::Grid::Member::DHCP/gss_tsig_keys()> for parameters and return values.

=over

=item B<Example>

  #Create a KerberosKey object.
 my $key = Infoblox::Grid::KerberosKey->new(
                  principal => 'host/appliance.ivan.test@LADYBUG.LOCAL',
                  domain => 'JACKIE.LOCAL',
                  version => '3',
                );

 #Configure KerberosKey on the Infoblox member object
 my $response = $member->gss_tsig_keys([$key]);

=back

=back

=head1 SESSION METHODS

This section describes all the methods in an Infoblox::Session module that you can apply to a Kerberos key object.

=head2 Infoblox::Session->get( )

=over

Use this method to retrieve all the matching objects from the Infoblox appliance. See L<Infoblox::Session-E<gt>get()|Infoblox::Session/get()/> for parameters and return values.

=over

=item B<Key References>

 Apply the following attributes to get a specific Kerberos key object:

  principal - Required. The principal of the Kerberos key object you want to retrieve.

=item B<Example>

 my @retrieved_objs = $session->get(
     object    => "Infoblox::Grid::KerberosKey",
     principal => "my-principal");

=back

=back

=head2 Infoblox::Session->remove( )

=over

Use this method to remove a Kerberos key object from the Infoblox appliance. See L<Infoblox::Session-E<gt>remove()|Infoblox::Session/remove()/> for parameters and return values.

To remove a specific object, first use get() or search() to retrieve the specific Kerberos key object, and then submit this object for removal.

=over

=item B<Example>

 # Get the objects with the same principal 
 my @retrieved_objs = $session->get(
     object    => "Infoblox::Grid::KerberosKey",
     principal => "my-principal");
 # Find the desired object from the retrieved list.
 my $desired_kerberos_key = $retrieved_objs[0];
 # Submit for removal
 my $response = $session->remove( $desired_kerberos_key );

=back

=back

=head2 Infoblox::Session->search( )

=over

Use this method to search for Kerberos key objects in the Infoblox appliance. See L<Infoblox::Session-E<gt>search()|Infoblox::Session/search()/> for parameters and return values.

=over

=item B<Key References>

 Apply the following attributes to search for a Kerberos key object:

  principal - Required. The principal of the Kerberos key object you want to retrieve (regular expression is supported).

=item B<Example>

 # search for all grid member objects
 my @retrieved_objs = $session->search(
     object => "Infoblox::Grid::KerberosKey",
     principal => ".*");

=back

=back

=head1 METHODS

This section describes all the methods that you can used to configure and retrieve the attribute value of a KerberosKey object.

=head2 enctype( )

=over

Use this method to retrieve the encryption type for the KerberosKey object. This is a read-only attribute.

=over

=item B<Parameter>

None

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get enctype value
 my $enctype = $key->enctype();

=back

=back

=head2  domain( )

=over

Use this method to set or retrieve the domain of the KerberosKey object.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Desired domain in string format with a maximum of 1023 bytes.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get domain
 my $domain = $key->domain();
 #Modify domain
 $key->domain("my-domain");

=back

=back

=head2 in_use( )

=over

Use this method to retrieve the flag used to indicate whether the key has been assigned to a member. This is a read-only attribute.

=over

=item B<Parameter>

None

=item B<Returns>

The return value is "true" if KerberosKey object has been assigned to a member and "false" if it hasn't.

=item B<Example>

 #Get in_use value
 my $in_use = $key->in_use();

=back

=back

=head2 principal( )

=over

Use this method to set or retrieve the principal string of the KerberosKey object.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Desired principal in string format with a maximum of 1023 bytes.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get principal
 my $string = $key->principal();
 #Modify principal
 $key->principal("my-principal");

=back

=back

=head2 version( )

=over

Use this method to set or retrieve the version number of the KerberosKey object.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Enter an unsigned integer between 0 and 4294967295.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get version
 my $version = $key->version();
 #Modify version
 $key->version("5");

=back

=back

=head2 upload_timestamp( )

=over

Use this method to retrieve the timestamp when the KerberosKey object was uploaded. This is a read-only attribute.

=over

=item B<Parameter>

None

=item B<Returns>

The return value is the date and time in the ISO 8601 extended format (e.g. 2008-10-21T10:56:33Z or 2008-10-21T10:56:33.001Z).

=item B<Example>

 #Get upload_timestamp value
 my $upload_timestamp = $key->upload_timestamp();

=back

=back

=head1 SAMPLE CODE

The following sample code demonstrates different operations that can be applied to an object such as create, get, and remove an object. Also this sample code also includes error handling for the operations.

 #PROGRAM STARTS: Include all the modules that will be used
  use strict;
  use Infoblox;

  #Create a session to the Infoblox appliance
  my $session = Infoblox::Session->new(
     master   => "192.168.1.2",
     username => "admin",
     password => "infoblox"
  );
  unless ($session) {
    die("Construct session failed: ",
        Infoblox::status_code() . ":" . Infoblox::status_detail());
  }
  print "Session created successfully\n";

B<#import kerberos key object>

 my $result = $session->import_data(
     type       => "keytab",
     path       => "/infoblox/tests/datasets/dnsone.keytab",
     service => 'dhcp',
    );

 unless($result) {
        die("import kerberos key object failed: ",
             Infoblox::status_code() . ":" . Infoblox::status_detail());
 }
 print "import kerberos key object successfully\n";

B<#retrieve kerberos key object>

 my @keys = $session->get(
    object    => "Infoblox::Grid::KerberosKey",
    principal => 'host/appliance.ivan.test@LADYBUG.LOCAL',
  );

  unless ($key) {
        die("Get KerberosKey object failed: ",
             $session->status_code() . ":" . $session->status_detail());
 }
 print "Get KerberosKey object found at least 1 matching entry\n";

 my $grid_dhcp = $session->get(
    object  => 'Infoblox::Grid::DHCP',
    cluster => 'Infoblox',
    );
 unless ($grid_dhcp) {
        die("Get Grid DHCP object failed: ",
             $session->status_code() . ":" . $session->status_detail());
 }

 $grid_dhcp->gss_tsig_keys([$key]);
 $grid_dhcp->kdc_server('test.com');

 #Applying the changes to appliance through session.
 $session->modify($grid_dhcp)
      or die("modify Grid DHCP properties failed:" ,
       $session->status_code(), $session->status_detail());
 print "Grid DHCP properties modified successfully for assigning KerberosKey object\n";

B<#Removing an KerberosKey object>

 # remove the reference to kerberos key
 $grid_dhcp->gss_tsig_keys(undef);
 $grid_dhcp->kdc_server(undef);

 #Applying the changes to appliance through session.
 $session->modify($grid_dhcp)
      or die("modify Grid DHCP properties failed:" ,
       $session->status_code(), $session->status_detail());
 print "Grid DHCP properties modified successfully for unassigning KerberosKey object\n";

 $session->remove(object => 'Infoblox::Grid::KerberosKey',
                  principal => 'host/appliance.ivan.test@LADYBUG.LOCAL')
      or die("remove KerberosKey object failed:" ,
       $session->status_code(), $session->status_detail());
 print "remove KerberosKey object successfully\n";

 ####PROGRAM ENDS####

=head1 AUTHOR

Infoblox Inc. L<http://www.infoblox.com/>

=head1 SEE ALSO

L<Infoblox::Session|Infoblox::Session>, L<Infoblox::Grid::DNS|Infoblox::Grid::DNS>, L<Infoblox::Grid::DHCP|Infoblox::Grid::DHCP>, L<Infoblox::Grid::Member::DNS|Infoblox::Grid::Member::DNS>, L<Infoblox::Grid::Member::DHCP|Infoblox::Grid::Member::DHCP>, L<Infoblox::Grid::DNS-E<gt>gss_tsig_keys()|Infoblox::Grid::DNS/gss_tsig_keys()>, L<Infoblox::Grid::DHCP-E<gt>gss_tsig_keys()|Infoblox::Grid::DHCP/gss_tsig_keys()>, L<Infoblox::Grid::Member::DNS-E<gt>gss_tsig_keys()|Infoblox::Grid::Member::DNS/gss_tsig_keys()>, L<Infoblox::Grid::Member::DHCP-E<gt>gss_tsig_keys()|Infoblox::Grid::Member::DHCP/gss_tsig_keys()>, L<Infoblox::Session-E<gt>get()|Infoblox::Session/get()>, L<Infoblox::Session-E<gt>modify()|Infoblox::Session/modify()/>,L<Infoblox::Session-E<gt>remove()|Infoblox::Session/remove()>

=head1 COPYRIGHT

Copyright (c) 2017 Infoblox Inc. 

=cut
