=head1 NAME

Infoblox::Grid::Member - Grid Member object.

=head1 DESCRIPTION

A grid member is a single Infoblox appliance or an HA pair of Infoblox appliances that belong to a grid.

=head1 CONSTRUCTOR

 my $grid_member = Infoblox::Grid::Member->new(
     gateway                 => $ipv4addr,                                          #Required
     ipv4addr                => $ipv4addr,                                          #Required
     mask                    => $netmask,                                           #Required
     name                    => $fqdn,                                              #Required
     additional_ip_list      => [$Interface1, $ipv4addr2, ...],                     #Optional / Default value is empty
     allow_syslog_clients    => [$ipv4addr | $ipv4_subnet/prefix, ...] | $nacl | undef, #Optional / Default value is undefined
     bgp_as                  => [$AS1, ...],                                        #Optional / Default value is empty
     alternate_resolver      => $Nameserver | $Member | $ipv4addr | undef,          #Optional / Default value is undefined
     comment                 => $string,                                            #Optional / Default value is empty
     config_addr_type        => "IPv4", "IPv6", "BOTH"                              #Optional / Default value is "IPv4"
     dscp                    => $uint,												#Optional / Default value is 0
     enable_member_redirect  => "true" | "false",                                   #Optional / Default value is "false"
     enable_ha               => "true" | "false",                                   #Optional / Default value is "false"
     enable_lom              => "true" | "false",                                   #Optional / Default value is undefined
     enable_ntp              => "true" | "false",                                   #Optional / Default value is "false"
     enable_ro_api_access    => "true" | "false",                                   #Optional / Default value is "false"
     enable_syslog_proxy     => "true" | "false",                                   #Optional / Default value is "false"
     exclude_grid_master_as_ntp_server=> "true" | "false",                          #Optional / Default value is "false"
     extattrs                => { $string => $extattr, ... },                       #Optional / Default is undefined
     extensible_attributes   => { $string => $string | $num, $string => [ $string | $num, ... ], ... } #Optional / Default is undefined
     external_ntp_servers_enabled  => "true" | "false",                             #Optional / Default value is "false"
     ha_node2_port_duplex    => "Half" | "Full" | undef,                            #Optional / Default value is undefined
     ha_node2_port_speed     => 10 | 100 | 1000 | undef,                            #Optional / Default value is undefined
     ha_port_duplex          => "Half" | "Full" | undef,                            #Optional / Default value is undefined
     ha_port_speed           => 10 | 100 | 1000 | undef,                            #Optional / Default value is undefined
     ha_reserved_interface   => $interface,                                         #Optional
     ipv6addr                => $ipv6addr,                                          #Optional / Default value is undefined
     ipv6_cidr               => $cidr,                                              #Optional / Default value is undefined
     ipv6_gateway            => $ipv6addr,                                          #Optional / Default value is undefined
     ipv6_enable_auto_config => "true" | "false",                                   #Optional / Default value is "false"
     ipv6_static_routes      => [$Route1, $Route2, ...],                            #Optional / Default value is empty
     ipv6_vlan_id            => $uint,                                              #Optional / Default value is undefined
     lan1_dscp               => $uint,                                              #Optional / Default value is undefined
     lan1_ipv6_dscp          => $uint,                                              #Optional / Default value is undefined
     lan2_dscp               => $uint,                                              #Optional / Default value is undefined
     lan2_gateway            => $ipv4addr,                                          #Optional / Default value is undefined
     lan2_ipv4addr           => $ipv4addr,                                          #Optional / Default value is undefined
     lan2_ipv6addr           => $ipv6addr,                                          #Optional / Default value is undefined
     lan2_ipv6_cidr          => $cidr,                                              #Optional / Default value is undefined
     lan2_ipv6_dscp          => $uint,                                              #Optional / Default value is undefined
     lan2_ipv6_gateway       => $ipv6addr,                                          #Optional / Default value is undefined
     lan2_ipv6_enable        => "true" | "false",                                   #Optional / Default value is "false"
     lan2_ipv6_enable_auto_config => "true" | "false",                              #Optional / Default value is "false"
     lan2_ipv6_vlan_id       => $uint,                                              #Optional / Default value is undefined
     lan2_mask               => $netmask,                                           #Optional / Default value is undefined
     lan2_node2_port_duplex  => "Half" | "Full" | undef,                            #Optional / Default value is undefined
     lan2_node2_port_speed   => 10 | 100 | 1000 | undef,                            #Optional / Default value is undefined
     lan2_port_duplex        => "Half" | "Full" | undef,                            #Optional / Default value is undefined
     lan2_port_speed         => 10 | 100 | 1000 | undef,                            #Optional / Default value is undefined
     lan2_port               => "true" | "false",                                   #Optional / Default value is "false"
     lan2_reserved_interface => $interface,                                         #Optional
     lan2_router_id          => $num,                                               #Optional / Default value is undefined
     lan2_vlan_id            => $uint,                                              #Optional / Default value is undefined
     lan_node2_port_duplex   => "Half" | "Full" | undef,                            #Optional / Default value is undefined
     lan_node2_port_speed    => 10 | 100 | 1000 | undef,                            #Optional / Default value is undefined
     lan_port_duplex         => "Half" | "Full" | undef,                            #Optional / Default value is undefined
     lan_port_speed          => 10 | 100 | 1000 | undef,                            #Optional / Default value is undefined
     lan_reserved_interface  => $interface,                                         #Optional
     lcd_input               => "true" | "false" | undef,                           #Optional / Default value is undefined
     lcd_autodim             => $num,                                               #Optional / Default value is 30
     lcd_brightness          => $num,                                               #Optional / Default value is 7
     lcd_hwident             => "true" | "false",                                   #Optional / Default value is "false"
     lom_gateway             => $ipv4addr,											#Optional / Default value is undefined
     lom_ipv4addr            => $ipv4addr,											#Optional / Default value is undefined
     lom_mask                => $netmask,											#Optional / Default value is undefined
     lom_users               => [$user1, $user2, ...],								#Optional / Default value is undefined
     node1_lom_gateway       => $ipv4addr,											#Optional / Default value is undefined
     node1_lom_ipv4addr      => $ipv4addr,											#Optional / Default value is undefined
     node1_lom_mask          => $netmask,											#Optional / Default value is undefined
     node2_lom_gateway       => $ipv4addr,											#Optional / Default value is undefined
     node2_lom_ipv4addr      => $ipv4addr,											#Optional / Default value is undefined
     node2_lom_mask          => $netmask,											#Optional / Default value is undefined
     master_candidate        => "true" | "false",                                   #Optional / Default value is undefined
     member_service_communication => [$c1, $c2, ...],                               #Optional / Default value is undefined
     mgmt_dscp               => $uint,                                              #Optional / Default value is undefined
     mgmt_gateway            => $ipv4addr,                                          #Optional / Default value is undefined
     mgmt_lan                => $ipv4addr,                                          #Optional / Default value is undefined
     mgmt_ipv6addr           => $ipv6addr,                                          #Optional / Default value is undefined
     mgmt_ipv6_cidr          => $cidr,                                              #Optional / Default value is undefined
     mgmt_ipv6_dscp          => $uint,                                              #Optional / Default value is undefined
     mgmt_ipv6_gateway       => $ipv6addr,                                          #Optional / Default value is undefined
     mgmt_ipv6_enable_auto_config => "true" | "false",                              #Optional / Default value is "false"
     mgmt_mask               => $netmask,                                           #Optional / Default value is undefined
     mgmt_node2_port_duplex  => "Half" | "Full" | undef,                            #Optional / Default value is undefined
     mgmt_node2_port_speed   => 10 | 100 | 1000 | undef,                            #Optional / Default value is undefined
     mgmt_port_duplex        => "Half" | "Full" | undef,                            #Optional / Default value is undefined
     mgmt_port_speed         => 10 | 100 | 1000 | undef,                            #Optional / Default value is undefined
     mgmt_port               => "true" | "false",                                   #Optional / Default value is "false"
     mgmt_reserved_interface => $interface,                                         #Optional
     nat_enabled             => "true" | "false",                                   #Optional / Default value is "false"
     nat_group               => $string | undef,                                    #Optional / Default value is empty
     nat_ip_address          => $ipv4addr | undef,                                  #Optional / Default value is undefined

     nic_failover_enabled        => "true" | "false",                                   #Optional / Default value is "false"
     nic_failover_enable_primary => "true" | "false",                                   #Optional / Default value is "false"
     node1_ha                => $ipv4addr,                                          #Optional / Default value is undefined
     node1_ha_reserved_interface => $interface,                                     #Optional
     node1_hwtype            => "IB-RSP" | ""                                       #Optional / Default value is ""
     node1_lan               => $ipv4addr,                                          #Optional / Default value is undefined
     node1_lan_ipv6addr      => $ipv6addr,                                          #Optional / Default value is undefined
     node1_lan_reserved_interface  => $interface,                                   #Optional
     node1_lan2_reserved_interface => $interface,                                   #Optional
     node1_lcd_autodim       => $num,                                               #Optional / Default value is undefined
     node1_lcd_brightness    => $num,                                               #Optional / Default value is undefined
     node1_lcd_hwident       => "true" | "false",                                   #Optional / Default value is undefined
     node1_mgmt_dscp         => $uint,                                              #Optional / Default value is undefined
     node1_mgmt_gateway      => $ipv4addr,                                          #Optional / Default value is undefined
     node1_mgmt_lan          => $ipv4addr,                                          #Optional / Default value is undefined
     node1_mgmt_ipv6addr     => $ipv6addr,                                          #Optional / Default value is undefined
     node1_mgmt_ipv6_cidr    => $cidr,                                              #Optional / Default value is undefined
     node1_mgmt_ipv6_dscp    => $uint,                                              #Optional / Default value is undefined
     node1_mgmt_ipv6_gateway => $ipv6addr,                                          #Optional / Default value is undefined
     node1_mgmt_ipv6_enable_auto_config => "true" | "false",                        #Optional / Default value is "false"
     node1_mgmt_mask         => $netmask,                                           #Optional / Default value is undefined
     node1_mgmt_port         => "true" | "false",                                   #Optional / Default value is undefined
     node1_mgmt_reserved_interface => $interface,                                   #Optional
     node1_nat               => $ipv4addr | undef,                                  #Optional / Default value is undefined
     node1_vpn_on_mgmt       => "true" | "false",                                   #Optional / Default value is undefined
     node2_ha                => $ipv4addr,                                          #Optional / Default value is undefined
     node2_ha_reserved_interface => $interface,                                     #Optional
     node2_hwtype            => ""                                                  #Optional / Default value is ""
     node2_lan               => $ipv4addr,                                          #Optional / Default value is undefined
     node2_lan_ipv6addr      => $ipv6addr,                                          #Optional / Default value is undefined
     node2_lan_reserved_interface  => $interface,                                   #Optional
     node2_lan2_reserved_interface => $interface,                                   #Optional
     node2_mgmt_dscp         => $uint,                                              #Optional / Default value is undefined
     node2_mgmt_ipv6addr     => $ipv6addr,                                          #Optional / Default value is undefined
     node2_mgmt_ipv6_cidr    => $cidr,                                              #Optional / Default value is undefined
     node2_mgmt_ipv6_dscp    => $uint,                                              #Optional / Default value is undefined
     node2_mgmt_ipv6_gateway => $ipv6addr,                                          #Optional / Default value is undefined
     node2_mgmt_ipv6_enable_auto_config => "true" | "false",                        #Optional / Default value is "false"
     node2_mgmt_reserved_interface      => $interface,                              #Optional
     node2_lcd_autodim       => $num,                                               #Optional / Default value is undefined
     node2_lcd_brightness    => $num,                                               #Optional / Default value is undefined
     node2_lcd_hwident       => "true" | "false",                                   #Optional / Default value is undefined
     node2_mgmt_gateway      => $ipv4addr,                                          #Optional / Default value is undefined
     node2_mgmt_lan          => $ipv4addr,                                          #Optional / Default value is undefined
     node2_mgmt_mask         => $netmask,                                           #Optional / Default value is undefined
     node2_mgmt_port         => "true" | "false",                                   #Optional / Default value is undefined
     node2_nat               => $ipv4addr | undef,                                  #Optional / Default value is undefined
     node2_vpn_on_mgmt       => "true" | "false",                                   #Optional / Default value is undefined
     notification_email_addr => $email,                                             #Optional / Default value is undefined
     ntp_access_list         => [$ntpaccess1, $ntpaccess2, ... ] | $nacl | undef,   #Optional / Default value is undefined
     ntp_service_type        => "Time" | "Time and NTP control",                    #Optional / Default value is "Time"
     ntp_authentication_key  => [$NTPKey1, $NTPKey2, ...],                          #Optional / Default value is undefined
     ntp_server              => [$ntp_server1, $ntp_server2] | undef,               #Optional / Default value is undefined
     ntp_kod                 => "true" | "false",                                   #Optional / Default value is undefined
     override_ntp_kod        => "true" | "false",                                   #Optional / Default value is undefined
     ospf_list               => [$OSPF1, $OSPF2, ...],                              #Optional / Default value is empty
     override_dscp           => "true" | "false",									#Optional / Default value is "false"
     override_enable_member_redirect  => "true" | "false",                          #Optional / Default value is "false"
     override_lan1_dscp            => "true" | "false",                             #Optional / Default value is "false"
     override_lan1_ipv6_dscp       => "true" | "false",                             #Optional / Default value is "false"
     override_lan2_dscp            => "true" | "false",                             #Optional / Default value is "false"
     override_lan2_ipv6_dscp       => "true" | "false",                             #Optional / Default value is "false"
     override_mgmt_dscp            => "true" | "false",                             #Optional / Default value is "false"
     override_mgmt_ipv6_dscp       => "true" | "false",                             #Optional / Default value is "false"
     override_node1_mgmt_dscp      => "true" | "false",                             #Optional / Default value is "false"
     override_node1_mgmt_ipv6_dscp => "true" | "false",                             #Optional / Default value is "false"
     override_node2_mgmt_dscp      => "true" | "false",                             #Optional / Default value is "false"
     override_node2_mgmt_ipv6_dscp => "true" | "false",                             #Optional / Default value is "false"
     override_syslog_backup_servers => "true" | "false",                            #Optional / Default value is "false"
     override_threshold_traps      => "true" | "false",                             #Optional / Default value is "false"
     override_trap_notifications   => "true" | "false",                             #Optional / Default value is "false"
     override_enable_lom     => "true" | "false",									#Optional / Default value is undefined
     override_lom_users      => "true" | "false",                                   #Optional / Default value is undefined
     passive_ha_arp_enabled  => "true" | "false",                                   #Optional / Default value is "false"
     platform                => "Infoblox" | "Cisco" | "Riverbed" | "VNIOS",        #Optional / Default value is "Infoblox"
     prefer_resolver         => $Nameserver | $Member | $ipv4addr | undef,          #Optional / Default value is undefined
     query_comm_string       => $string | undef,                                    #Optional / Default value is undefined
     remote_console_access   => "true" | "false" | undef,                           #Optional / Default value is undefined
     router_ID               => $num,                                               #Optional / Default value is undefined
     service_type_configuration => "ALL_V4", "ALL_V6", "CUSTOM"                     #Optional / Default value depends from the member type.
     snmp_admin              => $Admin | undef,                                     #Optional / Default value is undefined
     static_routes           => [$Route1, $Route2, ...],                            #Optional / Default value is empty
     support_access          => "true" | "false" | undef,                           #Optional / Default value is undefined
     syslog_proxy_tcp_port   => $num,                                               #Optional / Default value is 514
     syslog_proxy_udp_port   => $num,                                               #Optional / Default value is 514
     syslog_server           => [$SyslogServer, ...] | undef,                       #Optional / Default value is undefined
     syslog_backup_servers   => [$SyslogBackupServer, ...] | undef,                 #Optional / Default value is undefined
     syslog_size             => $num,                                               #Optional / Default value is 300
     time_zone               => $TimeZone | undef,                                  #Optional / Default value is undefined
     threshold_traps         => [$trap1, $trap2,...] | undef,                       #Optional / Default value is a list of all the traps
     trap_comm_string        => $string | undef,                                    #Optional / Default value is undefined
     trap_notifications      => [$notification1, $notification2,...] | undef,       #Optional / Default value is a list of all the notifications
     trap_receiver           => [$ipv4addr, ...] | undef,                           #Optional / Default value is undefined
     upgrade_group           => $string,                                            #Optional / Default value is undefined
     vlan_id                 => $uint,                                              #Optional / Default value is undefined
     vpn_mtu                 => $num,                                               #Optional / Default value is 1450
     vpn_on_mgmt             => "true" | "false",                                   #Optional / Default value is "false"
     use_v4_vrrp             => "true" | "false",                                   #Optional / Default value depends from the member type.
     pre_provisioning        => $pp,                                                #optional / Default value is undef. $pp is an Infoblox::Grid:Member::PreProvisioning object
     preserve_if_owns_delegation => "true" | "false"                                #Optional / Default value is "false"
 );

You cannot set both extattrs and extensible_attributes attributes at the same time.

=head1 SESSION METHODS

This section describes all the methods in an Infoblox::Session module that you can apply to a grid member object.

=head2 Infoblox::Session->add( )

=over

Use this method to add an object to the Infoblox appliance. See L<Infoblox::Session-E<gt>add()|Infoblox::Session/add()/> for parameters and return values.

If you have applied an access control list to an object, you must restart services after you update the access control list for the changes to take effect. See L<Infoblox::Session-E<gt>restart()|Infoblox::Session/restart()/> method.

=over

=item B<Example>

 #Construct an object
 my $grid_member = Infoblox::Grid::Member->new(
     name                    => "hostname.com",
     ipv4addr                => "3.0.0.2",
     mask                    => "255.0.0.0",
     gateway                 => "3.0.0.1",
     );
 #Submit for addition
 my $response = $session->add( $grid_member );

=back

=back

=head2 Infoblox::Session->get( )

=over

Use this method to retrieve all the matching objects from the Infoblox appliance. See L<Infoblox::Session-E<gt>get()|Infoblox::Session/get()/> for parameters and return values.

=over

=item B<Key References>

 Apply the following attributes to get a specific grid member object:

  name - Optional. A name in FQDN (Fully Qualified Domain Name) format.
  ipv4addr  - Optional. The IPv4 address of the member.
  ipv6addr  - Optional. The IPv6 address of the member.
  extattrs  - Optional. A hash reference containing extensible attributes.

=item B<Example>

 my @retrieved_objs = $session->get(
     object => "Infoblox::Grid::Member",
     name   => "hostname.com");

=back

=back

=head2 Infoblox::Session->modify( )

=over

Use this method to modify an object in the Infoblox appliance. See L<Infoblox::Session-E<gt>modify()|Infoblox::Session/modify()/> for parameters and return values.

If you have applied an access control list to an object, you must restart services after you update the access control list for the changes to take effect. See L<Infoblox::Session-E<gt>restart()|Infoblox::Session/restart()/> method.

=over

=item B<Example>

 # Use this method to modify comment of grid member.
 $grid_member->comment("This is modified object");
 # Submit modification
 my $response = $session->modify( $grid_member );

=back

=back

=head2 Infoblox::Session->remove( )

=over

Use this method to remove an object from the Infoblox appliance. See L<Infoblox::Session-E<gt>remove()|Infoblox::Session/remove()/> for parameters and return values.

To remove a specific object, first use get() or search() to retrieve the specific object, and then submit this object for removal.

=over

=item B<Example>

 #Get the objects with the same name
 my @retrieved_objs = $session->get(
     object => "Infoblox::Grid::Member",
     name   => "hostname.com");
 #Find the desired object from the retrieved list.
 my $desired_gridmember = $retrieved_objs[0];
 # Submit for removal
 my $response = $session->remove( $desired_gridmember );

=back

=back

=head2 Infoblox::Session->search( )

=over

Use this method to search for grid member objects in the Infoblox appliance. See L<Infoblox::Session-E<gt>search()|Infoblox::Session/search()/> for parameters and return values.

=over

=item B<Key References>

 Apply the following attributes to search for a grid member object:

  name    - Optional. A name in FQDN (Fully Qualified Domain Name) format (regular expression).
  comment - Optional. A comment in string format (regular expression).
  extattrs     - Optional. A hash reference containing extensible attributes.
  extensible_attributes   - Optional. A hash reference containing extensible attributes.
  ipv4addr  - Optional. The IPv4 address of the member.
  ipv6addr  - Optional. The IPv6 address of the member.

For more information about searching extensible attributes, see L<Infoblox::Grid::ExtensibleAttributeDefE<sol>Searching Extensible Attributes|Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes>.

=item B<Example>

 # search for all grid member objects
 my @retrieved_objs = $session->search(
     object => "Infoblox::Grid::Member",
     name   => ".*\\.com");

=back

=back

=head1 METHODS

This section describes all the methods that you can use to configure and retrieve the attribute values of a grid member.

=head2 active_position( )

=over

Use this method to retrieve the active server of a grid member.

=over

=item B<Parameter>

None

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get active server
 my $active_server = $grid_member->active_position();

=back

=back

=head2 additional_ip_list( )

=over

Use this method to set or retrieve the additional_ip_list of a grid member. This list contains additional interface information that can be used on the member level.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

Any object in the list with interface set to "LAN_HA" and ipv6 parameters will be mapped to the toplevel ipv6 methods (ipv6addr, ipv6_cidr, ipv6_enable_auto_config and ipv6_gateway). If such an object is already in the list and is removed, the values of those methods will be cleared.

=over

=item B<Parameter>

Valid value is an array reference that contains
L<Infoblox::Grid::Member::Interface|Infoblox::Grid::Member::Interface> object(s) or IPv4 addresses in string format.

Note that L<Infoblox::Grid::Member::Interface|Infoblox::Grid::Member::Interface> object(s) with interface set to "MGMT" are not supported.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get additional ip list
 my $additional_ip_list = $grid_member->additional_ip_list();
 #Modify additional ip list
 my $interface_obj = Infoblox::Grid::Member::Interface->new(
         subnet_mask => "255.255.255.255",
         anycast     => "false",
         comment     => "advanced ip config",
         ipv4addr    => "4.3.2.1",
         interface   => "LOOPBACK",
 );
 $grid_member->additional_ip_list([$interface_obj]);

=back

=back

=head2 allow_syslog_clients( )

=over

Use this method to set or retrieve the allow_syslog_clients list of a grid member. This list specifies the clients where the syslog messages are logged. This is required only when enable_syslog_proxy is set to "true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid value is an L<Infoblox::Grid::NamedACL|Infoblox::Grid::NamedACL> object or an array reference that contains IPv4/IPv6 addresses or networks.  To undefine allow_syslog_clients, you must disable the enable_syslog_proxy flag.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get allow syslog clients
 my $allow_syslog_clients = $grid_member->allow_syslog_clients();
 #Modify allow syslog clients
 $grid_member->allow_syslog_clients(["10.10.10.1", "10.10.2.0/24"]);
 #Use Infoblox::Grid::NamedACL
 $grid_member->allow_syslog_clients($nacl);

=back

=back

=head2 alternate_resolver( )

=over

Use this method to set or retrieve the alternate_resolver of a grid member. The alternate resolver receives queries from the appliance if it does not receive a response from the preferred name server first.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid values are L<Infoblox::DNS::Member|Infoblox::DNS::Member> object or L<Infoblox::DNS::Nameserver|Infoblox::DNS::Nameserver> object.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get alternate resolver
 my $alternate_resolver = $grid_member->alternate_resolver();
 #Modify alternate resolver
 my $member1 = Infoblox::DNS::Member->new(
     name           => $host_name,
     ipv4addr       => $host_ip,
     stealth        => "false",
     lead           => "false",
     grid_replicate => "false"
 );
 $grid_member->alternate_resolver($member1);
 #Undef alternate resolver
 $grid_member->alternate_resolver(undef);

=back

=back

=head2 bgp_as( )

=over

Use this method to set or retrieve the BGP configuration for anycast, of a grid member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is an array reference that contains  L<Infoblox::Grid::Member::BGP::AS|Infoblox::Grid::Member::BGP::AS> object(s). Currently, only one Autonomous System (AS) object per grid member is supported.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get AS list
 my $as = $grid_member->bgp_as();
 #Modify AS list
 my $as1 = Infoblox::Grid::Member::BGP::AS->new(
     as              => 269,
     keepalive       => 4,
     holddown        => 16,
     neighbors       => [ $neighbor ]
 );
 $grid_member->bgp_as([$as1]);

=back

=back

=head2 comment( )

=over

Use this method to set or retrieve a descriptive comment.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Desired comment in string format with a maximum of 256 bytes.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get comment
 my $comment = $grid_member->comment();
 #Modify comment
 $grid_member->comment("Modified grid member");

=back

=back

=head2 config_addr_type( )

=over

Use this method to set or retrieve the configuration type for the address.

=over

=item B<Parameter>

The valid value is one of the following: "IPv4", "IPv6" or "BOTH".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get config_addr_type
 my $config_addr_type = $grid_member->config_addr_type();
 #Modify config_addr_type
 $grid_member->config_addr_type("IPv4");

=back

=back

=head2 dscp( )

=over

Use this method to set or retrieve the DSCP value.

Setting this method to a defined value implicitly sets the override_dscp method to "true". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_dscp attribute to "false".

Note that when dscp is set to a defined value and override_ddscp is set to "false", the last operation takes precedence. Thus the sequence $object->dscp(11); $object->override_dscp("false"); will set override_dscp to "false", and the sequence $object->override_dscp("false"); $object->dscp(11); will result in override_dscp="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid values are integers between 0 and 63 inclusive. The default value is 0.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get the DSCP value from the member
 my $users = $grid_member->dscp();
 #Modify the DSCP value
 $grid_member->dscp(11);

=back

=back

=head2 enable_ha( )

=over

Use this method to set or retrieve the HA state of a member. It indicates whether a member is a single appliance or an HA pair.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the enable_ha flag or "false" to deactivate/unset it. The default value is "false". If set to "false", then all the "node1_xxxx" and "node2_xxxx" attributes but node1_service_status and node1_hwtype are disabled, and "get" does not return those attributes.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get enable_ha from the member
 my $enable_ha = $grid_member->enable_ha();
 #Modify enable_ha
 $grid_member->enable_ha("true");

=back

=back

=head2 enable_lom( )

=over

Use this method to set or retrieve the flag that controls whether the LOM functionality is enabled.

Setting this method to a defined value implicitly sets the override_enable_lom method to "true". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_enable_lom attribute to "false".

Note that when enable_lom is set to a defined value and override_denable_lom is set to "false", the last operation takes precedence. Thus the sequence $object->enable_lom("true"); $object->override_enable_lom("false"); will set override_enable_lom to "false", and the sequence $object->override_enable_lom("false"); $object->enable_lom("true"); will result in override_enable_lom="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the enable_lom flag or "false" to deactivate/unset it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get enable_lom from the member
 my $lom = $grid_member->enable_lom();
 #Modify enable_lom
 $grid_member->enable_lom("true");

=back

=back

=head2 enable_member_redirect( )

=over

Use this method to set or retrieve the flag that controls whether the member will redirect GUI connections to the grid master.

Setting this method to a defined value implicitly sets the override_enable_member_redirect method to "true". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_enable_member_redirect attribute to "false".

Note that when enable_member_redirect is set to a defined value and override_denable_member_redirect is set to "false", the last operation takes precedence. Thus the sequence $object->enable_member_redirect("true"); $object->override_enable_member_redirect("false"); will set override_enable_member_redirect to "false", and the sequence $object->override_enable_member_redirect("false"); $object->enable_member_redirect("true"); will result in override_enable_member_redirect="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the enable_member_redirect flag or "false" to deactivate/unset it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get enable_member_redirect from the member
 my $redirect = $grid_member->enable_member_redirect();
 #Modify type of member
 $grid_member->enable_member_redirect("true");

=back

=back

=head2 enable_ntp( )

=over

Use this method to set or retrieve the enable_ntp flag of a grid member. Network Time Protocol (NTP) is a protocol designed to synchronize the clocks of computers over a network. This method enables/disables NTP service on the grid member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the enable_ntp flag or "false" to deactivate/unset it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get enable ntp flag
 my $enable_ntp = $grid_member->enable_ntp();
 #Modify enable ntp flag
 $grid_member->enable_ntp("true");

=back

=back

=head2  enable_snmpv3_query( )

=over

Use this method to enable or disable SNMPv3 queries.

=over

=item B<Parameter>

Specify "true" to enable SNMPv3 queries or "false" to disable it.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

=item B<Example>

 #Get enable_snmpv3_query
 my $enable_snmpv3_query = $gridmember->enable_snmpv3_query();
 #Modify enable_snmpv3_query
 $gridmember->enable_snmpv3_query("false");

=back

=back

=head2  enable_snmpv3_traps( )

=over

Use this method to enable or disable SNMPv3 traps.

=over

=item B<Parameter>

Specify "true" to enable SNMPv3 traps or "false" to disable it. Default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

=item B<Example>

 #Get enable_snmpv3_traps
 my $enable_snmpv3_traps = $gridmember->enable_snmpv3_traps();
 #Modify enable_snmpv3_traps
 $gridmember->enable_snmpv3_traps("true");

=back

=back

=head2 enable_ro_api_access( )

=over

Use this method to enable or disable read-only API access for the Grid Master candidate.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to allow read-only API access or "false" to forbid it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get enable syslog proxy flag
 my $enable_ro_api_access = $grid_member->enable_ro_api_access();
 #Modify enable syslog proxy flag
 $grid_member->enable_ro_api_access("true");

=back

=back

=head2 enable_syslog_proxy( )

=over

Use this method to set or retrieve the enable_syslog_proxy flag of a grid member. When enabled, the member receives syslog messages from specified devices, such as syslog servers and routers, and then forwards these messages to an external syslog server.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the enable_syslog_proxy flag or "false" to deactivate/unset it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get enable syslog proxy flag
 my $enable_syslog_proxy = $grid_member->enable_syslog_proxy();
 #Modify enable syslog proxy flag
 $grid_member->enable_syslog_proxy("true");

=back

=back

=head2 external_ntp_servers_enabled( )

=over

Use this method to set or retrieve the external_ntp_servers_enabled flag of a grid member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

When this flag is set to "false", the member does not use the configured list of NTP (Network Time Protocol) servers.

When this flag is set to "true", the member uses the configured list of NTP servers.
If no NTP servers are configured on the member, it uses the NTP servers configured on the grid.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get external_ntp_servers_enabled flag
 my $external_ntp_servers_enabled= $grid_member->external_ntp_servers_enabled();
 #Modify external_ntp_servers_enabled flag
 $grid_member->external_ntp_servers_enabled("true");

=back

=back

=head2 exclude_grid_master_as_ntp_server( )

=over

Use this method to set or retrieve the exclude_grid_master_as_ntp_server flag of a grid member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

When this flag is set to "true", the member does not use the grid master as an NTP (Network Time Protocol) time source.
The default value of this parameter is "false", which means
that by default the Grid Master is used as one of the time sources for Grid Member.

Note that setting this flag to "true" may have a detrimental effect on the database integrity of the member.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get exclude_grid_master_as_ntp_server flag
 my $exclude_grid_master_as_ntp_server= $grid_member->exclude_grid_master_as_ntp_server();
 #Modify exclude_grid_master_as_ntp_server flag
 $grid_member->exclude_grid_master_as_ntp_server("true");

=back

=back

=head2 extattrs( )

=over

Use this method to set or retrieve the extensible attributes associated with a Grid Member object.

=over

=item B<Parameter>

Valid value is a hash reference containing the names of extensible attributes and their associated values ( L<Infoblox::Grid::Extattr|Infoblox::Grid::Extattr> objects ).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get extattrs
 my $ref_extattrs = $grid_member->extattrs();
 #Modify extattrs
 $grid_member->extattrs({ 'Site' => $extattr1, 'Administrator' => $extattr2 });

=back

=back

=head2 extensible_attributes( )

=over

Use this method to set or retrieve the extensible attributes associated with a Grid Member object

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

For valid values for extensible attributes, see L<Infoblox::Grid::ExtensibleAttributeDefE<sol>Extensible Attribute Values|Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values>.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get extensible attributes
 my $ref_extensible_attributes = $member->extensible_attributes();
 #Modify extensible attributes
 $member->extensible_attributes({ 'Site' => 'Santa Clara', 'Administrator' => [ 'Peter', 'Tom' ] });

=back

=back

=head2 gateway( )

=over

Use this method to set or retrieve the gateway IP address of a grid member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv4 address is a 32-bit number in dotted decimal notation. It consists of four 8-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get gateway
 my $gateway = $grid_member->gateway();
 #Modify gateway
 $grid_member->gateway("3.0.0.1");

=back

=back

=head2 ha_node2_port_duplex( )

=over

Use this method to specify or retrieve the duplex setting of the HA port on node 2 of an HA grid member.
Note: Use this method in combination with ha_node2_port_speed. If any of these attributes are undefined, the default values for duplex and speed settings are used.

=over

=item B<Parameter>

Valid values are "Half" or "Full". The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get ha_node2_port_duplex
 my $ha_node2_port_duplex = $obj->ha_node2_port_duplex();
 #Modify ha_node2_port_duplex
 $obj->ha_node2_port_duplex("Half");

=back

=back

=head2 ha_node2_port_speed( )

=over

Use this method to set or retrieve the connection speed of the HA port on node #2 of an HA grid member.
Note: Use this method in combination with ha_node2_port_duplex. If any of these attributes are undefined, the default values for duplex and speed settings are used.

=over

=item B<Parameter>

Valid values are 10, 100 or 1000. The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get ha_node2_port_speed
 my $ha_node2_port_speed = $obj->ha_node2_port_speed();
 #Modify ha_node2_port_speed
 $obj->ha_node2_port_speed(10);

=back

=back

=head2 ha_port_duplex( )

=over

Use this method to specify or retrieve the duplex setting of the HA port on node 1 of an HA grid member.
Note: Use this method in combination with ha_port_speed. If any of these attributes are undefined, the default values for duplex and speed settings are used.

=over

=item B<Parameter>

Valid values are "Half" or "Full". The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get ha_port_duplex
 my $ha_port_duplex = $obj->ha_port_duplex();
 #Modify ha_port_duplex
 $obj->ha_port_duplex("Half");

=back

=back

=head2 ha_port_speed( )

=over

Use this method to set or retrieve the connection speed of the HA port on node 1 of an HA grid member.
Note: Use this method in combination with ha_port_duplex. If any of these attributes are undefined, the default values for duplex and speed settings are used.

=over

=item B<Parameter>

Valid values are 10, 100 or 1000. The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get ha_port_speed
 my $ha_port_speed = $obj->ha_port_speed();
 #Modify ha_port_speed
 $obj->ha_port_speed(10);

=back

=back

=head2 ha_reserved_interface( )

=over

Use this method to set or retrieve the discovery reserved interface of the HA port on node 1 of an HA grid member.

=over

=item B<Parameter>

Valid value is an L<Infoblox::Grid::Discovery::DeviceInterface|Infoblox::Grid::Discovery::DeviceInterface> object.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get attribute value
 my $attr = $grid_member->ha_reserved_interface();
 #Modify attribute value
 $grid_member->ha_reserved_interface($interface);

=back

=back

=head2 paid_nios( )

=over

Use this method to retrieve whether the grid member is Paid NIOS.

=over

=item B<Parameter>

None

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get Paid NIOS status
 my $paid_nios = $grid_member->paid_nios();

=back

=back

=head2 hwplatform( )

=over

Use this method to retrieve the hardware platform of the member appliance.

=over

=item B<Parameter>

None

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get hardware platform
 my $hwplatform = $grid_member->hwplatform();

=back

=back

=head2 hwid( )

=over

Use this method to retrieve the hardware ID of the member appliance.

=over

=item B<Parameter>

None

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get hardware ID
 my $hwid = $grid_member->hwid();

=back

=back

=head2 is_dscp_capable( )

=over

Use this method to retrieve the flag that describes whether a Grid member supports DSCP.

=over

=item B<Parameter>

The method retruns "true" if the member supports DSCP, and "false" otherwise.

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get is_dscp_capable
 my $is_dscp_capable = $grid_member->is_dscp_capable();

=back

=back

=head2 ipv4addr( )

=over

Use this method to set or retrieve the IPv4 address of a grid member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv4 address is a 32-bit number in dotted decimal notation. It consists of four 8-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get ipv4addr
 my $ipv4addr = $grid_member->ipv4addr();
 #Modify ipv4addr
 $grid_member->ipv4addr("3.0.0.3");

=back

=back

=head2 ipv6addr( )

=over

Use this method to set or retrieve the LAN IPv6 address of the grid member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

Setting any of the ipv6 methods in the member (ipv6addr, ipv6_cidr, ipv6_enable_auto_config and ipv6_gateway) is equivalent to creating an L<Infoblox::Grid::Member::Interface|Infoblox::Grid::Member::Interface> object with those fields set and interface set to "LAN_HA", if there is already such an object it will be modified, if not it will be created. See the additional_ip_list section for more information.

=over

=item B<Parameter>

An IPv6 address is a 128-bit number represented as eight groups of four hexadecimal digits (i.e. two octets), each group separated by a colon(:) (example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334). Leading zeroes and groups of consecutive zeros within the value can be omitted to produce a more compact representation (example: 2001::1, ::1).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get LAN2 IPv6 address
 my $ipv6addr = $grid_member->ipv6addr();
 #Modify LAN2 IPv6 address
 $grid_member->ipv6addr("2001::2");

=back

=back

=head2 ipv6_cidr( )

=over

Use this method to set or retrieve the CIDR of the grid member. Required only when ipv6addr is specified.

See ipv6addr for more information on how this impacts additional_ip_list.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify the netmask in CIDR format.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get LAN2 cidr
 my $cidr = $grid_member->cidr();
 #Modify LAN2 cidr
 $grid_member->cidr("64");

=back

=back

=head2 ipv6_enable_auto_config( )

=over

Use this method to enable/disable IPv6 auto-configuration of the grid member.

See ipv6addr for more information on how this impacts additional_ip_list.

When IPv6 auto-configuration is enabled, a gateway is not needed since it will be automatically discovered.

=over

=item B<Parameter>

Specify "true" to enable IPv6 auto-configuration or "false" to disable it. Default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

=item B<Example>

 #Get IPv6 auto-configuration
 my $ipv6_autoconfig_enabled = $grid_member->ipv6_enable_auto_config();
 #Modify IPv6 auto-configuration
 $grid_member->ipv6_enable_auto_config("true");

=back

=back

=head2 ipv6_gateway( )

=over

Use this method to set or retrieve the LAN IPv6 gateway of the grid member.

See ipv6addr for more information on how this impacts additional_ip_list.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv6 address is a 128-bit number represented as eight groups of four hexadecimal digits (i.e. two octets), each group separated by a colon(:) (example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334). Leading zeroes and groups of consecutive zeros within the value can be omitted to produce a more compact representation (example: 2001::1, ::1).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get LAN2 IPv6 gateway
 my $ipv6_gateway = $grid_member->ipv6_gateway();
 #Modify LAN2 IPv6 gateway
 $grid_member->ipv6_gateway("2001::1");

=back

=back

=head2 ipv6_static_routes( )

=over

Use this method to set or retrieve the IPv6 static routes list of a grid member. This list contains the static routes of a grid member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid value is an array reference that contains  L<Infoblox::Grid::Member::IPv6StaticRoute|Infoblox::Grid::Member::IPv6StaticRoute> object(s).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get static routes list
 my $ipv6_static_routes = $grid_member->ipv6_static_routes();
 #Modify static routes list
 my $route = Infoblox::Grid::Member::IPv6StaticRoute->new(
	"address" => "2002::5",
	"cidr"    => 64
	"gateway" => "2002::1",
 );
 $grid_member->ipv6_static_routes([$route]);

=back

=back

=head2 ipv6_vlan_id( )

=over

Use this method to set or retrieve the IPv6 VLAN ID of a grid member.

=over

=item B<Parameter>

Valid values are unsigned integers between 1 and 4095, inclusive. The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get attribute value
 my $attr = $grid_member->ipv6_vlan_id();
 #Modify attribute value
 $grid_member->ipv6_vlan_id(10);

=back

=back

=head2 lan_reserved_interface( )

=over

Use this method to set or retrieve the discovery reserved interface of the LAN port on a single grid member or on node 1 of an HA grid member.

=over

=item B<Parameter>

Valid value is an L<Infoblox::Grid::Discovery::DeviceInterface|Infoblox::Grid::Discovery::DeviceInterface> object.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get attribute value
 my $attr = $grid_member->lan_reserved_interface();
 #Modify attribute value
 $grid_member->lan_reserved_interface($interface);

=back

=back

=head2 lan1_dscp( )

=over

Use this method to set or retrieve the DSCP value of the IPv4 LAN1 port.

Setting this method to a defined value implicitly sets the override_lan1_dscp method to "true". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_lan1_dscp attribute to "false".

Note that when dscp is set to a defined value and override_lan1_dscp is set to "false", the last operation takes precedence. Thus the sequence $object->lan1_dscp(11); $object->override_lan1_dscp("false"); will set override_lan1_dscp to "false", and the sequence $object->override_lan1_dscp("false"); $object->lan1_dscp(11); will result in override_lan1_dscp="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid values are integers between 0 and 63, inclusive. The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get attribute value
 my $value = $grid_member->lan1_dscp();
 #Modify attribute value
 $grid_member->lan1_dscp(11);

=back

=back

=head2 lan1_ipv6_dscp( )

=over

Use this method to set or retrieve the DSCP value of the IPv6 LAN1 port.

Setting this method to a defined value implicitly sets the override_lan1_ipv6_dscp method to "true". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_lan1_ipv6_dscp attribute to "false".

Note that when dscp is set to a defined value and override_lan1_ipv6_dscp is set to "false", the last operation takes precedence. Thus the sequence $object->lan1_ipv6_dscp(11); $object->override_lan1_ipv6_dscp("false"); will set override_lan1_ipv6_dscp to "false", and the sequence $object->override_lan1_ipv6_dscp("false"); $object->lan1_ipv6_dscp(11); will result in override_lan1_ipv6_dscp="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid values are integers between 0 and 63, inclusive. The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get attribute value
 my $value = $grid_member->lan1_ipv6_dscp();
 #Modify attribute value
 $grid_member->lan1_ipv6_dscp(11);

=back

=back

=head2 lan2_dscp( )

=over

Use this method to set or retrieve the DSCP value of the IPv4 LAN2 port.

Setting this method to a defined value implicitly sets the override_lan1_dscp method to "true". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_lan1_dscp attribute to "false".

Note that when dscp is set to a defined value and override_lan2_dscp is set to "false", the last operation takes precedence. Thus the sequence $object->lan2_dscp(11); $object->override_lan2_dscp("false"); will set override_lan2_dscp to "false", and the sequence $object->override_lan2_dscp("false"); $object->lan2_dscp(11); will result in override_lan2_dscp="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid values are integers between 0 and 63, inclusive. The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get attribute value
 my $value = $grid_member->lan2_dscp();
 #Modify attribute value
 $grid_member->lan2_dscp(11);

=back

=back

=head2 lan2_gateway( )

=over

Use this method to set or retrieve the gateway IP address of the LAN2 port. Note that to configure the LAN2 port, the lan2_port flag must be set to 'true'.

lan2_ipv4addr, lan2_mask, lan2_gateway attributes are required if one of them is defined.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv4 address is a 32-bit number in dotted decimal notation. It consists of four 8-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get LAN2 gateway
 my $lan2_gateway = $grid_member->lan2_gateway();
 #Modify LAN2 gateway
 $grid_member->lan2_gateway("4.0.0.1");

=back

=back

=head2 lan2_ipv4addr( )

=over

Use this method to set or retrieve the LAN IP address of the LAN2 port. Note that to configure the LAN2 port, the lan2_port flag must be set to 'true'.

lan2_gateway, lan2_ipv4addr, lan2_mask attributes are required if one of them is defined.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv4 address is a 32-bit number in dotted decimal notation. It consists of four 8-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get LAN2 IPv4 address
 my $lan2_ipv4addr = $grid_member->lan2_ipv4addr();
 #Modify LAN2 IPv4 address
 $grid_member->lan2_ipv4addr("4.0.0.2");

=back

=back

=head2 lan2_ipv6addr( )

=over

Use this method to set or retrieve the LAN IPv6 address of the LAN2 port. Note that to configure the LAN2 port, the lan2_port flag must be set to 'true'.

lan2_ipv6addr, lan2_ipv6_cidr, lan2_ipv6_gateway attributes are required if one of them is defined.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv6 address is a 128-bit number represented as eight groups of four hexadecimal digits (i.e. two octets), each group separated by a colon(:) (example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334). Leading zeroes and groups of consecutive zeros within the value can be omitted to produce a more compact representation (example: 2001::1, ::1).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get LAN2 IPv6 address
 my $lan2_ipv6addr = $grid_member->lan2_ipv6addr();
 #Modify LAN2 IPv6 address
 $grid_member->lan2_ipv6addr("2001::2");

=back

=back

=head2 lan2_ipv6_cidr( )

=over

Use this method to set or retrieve the CIDR of the LAN2 port. Note that to configure the LAN2 port, the lan2_port flag must be set to 'true'.

lan2_ipv6addr, lan2_ipv6_cidr, lan2_ipv6_gateway attributes are required if one of them is defined.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify the netmask in CIDR format.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get LAN2 cidr
 my $lan2_cidr = $grid_member->lan2_cidr();
 #Modify LAN2 cidr
 $grid_member->lan2_cidr("64");

=back

=back

=head2 lan2_ipv6_dscp( )

=over

Use this method to set or retrieve the DSCP value of the IPv6 LAN2 port.

Setting this method to a defined value implicitly sets the override_lan2_ipv6_dscp method to "true". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_lan2_ipv6_dscp attribute to "false".

Note that when dscp is set to a defined value and override_lan2_ipv6_dscp is set to "false", the last operation takes precedence. Thus the sequence $object->lan2_ipv6_dscp(11); $object->override_lan2_ipv6_dscp("false"); will set override_lan1_ipv6_dscp to "false", and the sequence $object->override_lan2_ipv6_dscp("false"); $object->lan2_ipv6_dscp(11); will result in override_lan2_ipv6_dscp="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid values are integers between 0 and 63, inclusive. The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get attribute value
 my $value = $grid_member->lan2_ipv6_dscp();
 #Modify attribute value
 $grid_member->lan2_ipv6_dscp(11);

=back

=back

=head2 lan2_ipv6_enable( )

=over

Use this method to enable/disable IPv6 configuration of the LAN2 interface.

=over

=item B<Parameter>

Specify "true" to enable IPv6 configuration or "false" to disable it. Default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get attribute value
 my $attr = $grid_member->lan2_ipv6_enable();
 #Modify attribute value
 $grid_member->lan2_ipv6_enable("true");

=back

=back

=head2 lan2_ipv6_enable_auto_config( )

=over

Use this method to enable/disable IPv6 auto-configuration of the LAN2 interface.

When IPv6 auto-configuration is enabled, a gateway is not needed since it will be automatically discovered.

=over

=item B<Parameter>

Specify "true" to enable IPv6 auto-configuration or "false" to disable it. Default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get IPv6 auto-configuration
 my $ipv6_autoconfig_enabled = $grid_member->lan2_ipv6_enable_auto_config();
 #Modify IPv6 auto-configuration
 $grid_member->lan2_ipv6_enable_auto_config("true");

=back

=back

=head2 lan2_ipv6_gateway( )

=over

Use this method to set or retrieve the LAN IPv6 gateway of the LAN2 port. Note that to configure the LAN2 port, the lan2_port flag must be set to 'true'.

lan2_ipv6addr, lan2_ipv6_cidr, lan2_ipv6_gateway attributes are required if one of them is defined.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv6 address is a 128-bit number represented as eight groups of four hexadecimal digits (i.e. two octets), each group separated by a colon(:) (example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334). Leading zeroes and groups of consecutive zeros within the value can be omitted to produce a more compact representation (example: 2001::1, ::1).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get LAN2 IPv6 gateway
 my $lan2_ipv6_gateway = $grid_member->lan2_ipv6_gateway();
 #Modify LAN2 IPv6 gateway
 $grid_member->lan2_ipv6_gateway("2001::1");

=back

=back

=head2 lan2_ipv6_vlan_id( )

=over

Use this method to set or retrieve the VLAN ID of the IPv6 LAN2 port. Note that to configure the LAN2 port, the lan2_port flag must be set to 'true'.

=over

=item B<Parameter>

Valid values are unsigned integers between 1 and 4095, inclusive. The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get attribute value
 my $attr = $grid_member->lan2_ipv6_vlan_id();
 #Modify attribute value
 $grid_member->lan2_ipv6_vlan_id(10);

=back

=back

=head2 lan2_mask( )

=over

Use this method to set or retrieve the netmask of the LAN2 port. Note that to configure the LAN2 port, the lan2_port flag must be set to 'true'.

lan2_ipv4addr, lan2_mask, lan2_gateway attributes are required if one of them is defined.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Netmask address is a 32-bit number in dotted decimal notation. It consists of four 8-bit groups of decimal digits separated by decimal points (example: 255.255.0.0).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get LAN2 mask
 my $lan2_mask = $grid_member->lan2_mask();
 #Modify LAN2 mask
 $grid_member->lan2_mask("255.255.0.0");

=back

=back

=head2 lan2_node2_port_duplex( )

=over

Use this method to specify or retrieve the duplex setting of the LAN2 port on node 2 of an HA grid member.
Note: Use this method in combination with lan2_node2_port_speed. If any of these attributes are undefined, the default values for duplex and speed settings are used.

=over

=item B<Parameter>

Valid values are "Half" or "Full". The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get lan2_node2_port_duplex
 my $lan2_node2_port_duplex = $obj->lan2_node2_port_duplex();
 #Modify lan2_node2_port_duplex
 $obj->lan2_node2_port_duplex("Half");

=back

=back

=head2 lan2_port( )

=over

Use this method to set or retrieve the LAN2 port flag of a single grid member or node 1 of an HA grid member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the lan2_port flag or "false" to deactivate/unset it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get LAN2 port flag
 my $lan2_port = $grid_member->lan2_port();
 #Modify LAN2 port flag
 $grid_member->lan2_port("true");

=back

=back

=head2 lan2_node2_port_speed( )

=over

Use this method to set or retrieve the connection speed of the LAN2 port on node 2 of an HA grid member.
Note: Use this method in combination with lan2_node2_port_duplex. If any of these attributes are undefined, the default values for duplex and speed settings are used.

=over

=item B<Parameter>

Valid values are 10, 100 or 1000. The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get lan2_node2_port_speed
 my $lan2_node2_port_speed = $obj->lan2_node2_port_speed();
 #Modify lan2_node2_port_speed
 $obj->lan2_node2_port_speed(10);

=back

=back

=head2 lan2_port_duplex( )

=over

Use this method to specify or retrieve the duplex setting of the LAN2 port on a single grid member or on node 1 of an HA grid member.
Note: Use this method in combination with lan2_port_speed. If any of these attributes are undefined, the default values for duplex and speed settings are used.

=over

=item B<Parameter>

Valid values are "Half" or "Full". The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get lan2_port_duplex
 my $lan2_port_duplex = $obj->lan2_port_duplex();
 #Modify lan2_port_duplex
 $obj->lan2_port_duplex("Half");

=back

=back

=head2 lan2_port_speed( )

=over

Use this method to set or retrieve the connection speed of the LAN2 port on a single grid member or on node 1 of an HA grid member.
Note: Use this method in combination with lan2_port_duplex. If any of these attributes are undefined, the default values for duplex and speed settings are used.

=over

=item B<Parameter>

Valid values are 10, 100 or 1000. The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get lan2_port_speed
 my $lan2_port_speed = $obj->lan2_port_speed();
 #Modify lan2_port_speed
 $obj->lan2_port_speed(10);

=back

=back

=head2 lan2_reserved_interface( )

=over

Use this method to set or retrieve the discovery reserved interface of the LAN2 port on a single grid member or on node 1 of an HA grid member.

=over

=item B<Parameter>

Valid value is an L<Infoblox::Grid::Discovery::DeviceInterface|Infoblox::Grid::Discovery::DeviceInterface> object.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get attribute value
 my $attr = $grid_member->lan2_reserved_interface();
 #Modify attribute value
 $grid_member->lan2_reserved_interface($interface);

=back

=back

=head2 lan2_router_id( )

=over

Use this method to set or retrieve the LAN2 virtual router ID of a grid member. Required only when the member is an HA pair.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

A number with the LAN2 router identification. Valid values are from 1 through 255.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get LAN2 virtual router ID
 my $lan2_router_id = $grid_member->lan2_router_id();
 #Modify LAN2 virtual router ID
 $grid_member->lan2_router_id("123");

=back

=back

=head2 lan2_vlan_id( )

=over

Use this method to set or retrieve the VLAN ID of the IPv4 LAN2 port. Note that to configure the LAN2 port, the lan2_port flag must be set to 'true'.

=over

=item B<Parameter>

Valid values are unsigned integers between 1 and 4095, inclusive. The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get attribute value
 my $attr = $grid_member->lan2_vlan_id();
 #Modify attribute value
 $grid_member->lan2_vlan_id(10);

=back

=back

=head2 lan_node2_port_duplex( )

=over

Use this method to specify or retrieve the duplex setting of the LAN port on node 2 of an HA grid member.
Note: Use this method in combination with lan_node2_port_speed. If any of these attributes are undefined, the default values for duplex and speed settings are used.

=over

=item B<Parameter>

Valid values are "Half" or "Full". The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get lan_node2_port_duplex
 my $lan_node2_port_duplex = $obj->lan_node2_port_duplex();
 #Modify lan_node2_port_duplex
 $obj->lan_node2_port_duplex("Half");

=back

=back

=head2 lan_node2_port_speed( )

=over

Use this method to set or retrieve the connection speed of the LAN port on node 2 of an HA grid member.
Note: Use this method in combination with lan_node2_port_duplex. If any of these attributes are undefined, the default values for duplex and speed settings are used.

=over

=item B<Parameter>

Valid values are 10, 100 or 1000. The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get lan_node2_port_speed
 my $lan_node2_port_speed = $obj->lan_node2_port_speed();
 #Modify lan_node2_port_speed
 $obj->lan_node2_port_speed(10);

=back

=back

=head2 lan_port_duplex( )

=over

Use this method to specify or retrieve the duplex setting of the LAN port on a single grid member or on node 1 of an HA grid member..
Note: Use this method in combination with lan_port_speed. If any of these attributes are undefined, the default values for duplex and speed settings are used.

=over

=item B<Parameter>

Valid values are "Half" or "Full". The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get lan_port_duplex
 my $lan_port_duplex = $obj->lan_port_duplex();
 #Modify lan_port_duplex
 $obj->lan_port_duplex("Half");

=back

=back

=head2 lan_port_speed( )

=over

Use this method to set or retrieve the connection speed of the LAN port on a single grid member or on node 1 of an HA grid member..
Note: Use this method in combination with lan_port_duplex. If any of these attributes are undefined, the default values for duplex and speed settings are used.

=over

=item B<Parameter>

Valid values are 10, 100 or 1000. The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get lan_port_speed
 my $lan_port_speed = $obj->lan_port_speed();
 #Modify lan_port_speed
 $obj->lan_port_speed(10);

=back

=back

=head2 lcd_input( )

=over

Use this method to set or retrieve the lcd_input flag of a grid member. This flag enables/disables the Liquid Crystal Display (LCD) input buttons on the front panel of the appliance.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the lcd_input flag or "false" to deactivate/unset it. The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get lcd input flag
 my $lcd_input = $grid_member->lcd_input();
 #Modify lcd input flag
 $grid_member->lcd_input("true");
 #Undef lcd input flag
 $grid_member->lcd_input(undef);

=back

=back

=head2 lcd_autodim( )

=over

Use this method to set or retrieve the number of seconds before the Liquid Crystal Display (LCD) on the front panel of the appliance automatically dims.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The number of seconds before the LCD automatically dims. Valid values are between 5 and 3600. The default value is 30.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get lcd_autodim
 my $lcd_autodim = $grid_member->lcd_autodim();
 #Modify the autodim value
 $grid_member->lcd_autodim(60);

=back

=back

=head2 lcd_brightness( )

=over

Use this method to set or retrieve the brightness level of the LCD on the front panel of the appliance.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid values are between 1 and 10. The default value is 7.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get lcd_brightness
 my $lcd_brightness = $grid_member->lcd_brightness();
 #Modify the brightness value
 $grid_member->lcd_brightness(3);

=back

=back

=head2 lcd_hwident( )

=over

Use this method to set or retrieve whether the grid member's hardware ID identification functionality is active.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the lcd_hwident flag or "false" to deactivate/unset it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get the lcd_hwident status
 my $lcd_hwident = $grid_member->lcd_hwident();
 #Modify the lcd_hwident status
 $grid_member->lcd_hwident("true");

=back

=back

=head2 lcd_version( )

=over

Use this method to retrieve the version of the Liquid Crystal Display (LCD) of the appliance.

=over

=item B<Parameter>

None.

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get lcd_version
 my $lcd_version = $grid_member->lcd_version();

=back

=back

=head2 lom_gateway( )

=over

Use this method to set or retrieve the gateway IP address of a grid member for the LOM functionality.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv4 address is a 32-bit number in dotted decimal notation. It consists of four 8-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get lom_gateway
 my $lom_gateway = $grid_member->lom_gateway();
 #Modify lom_gateway
 $grid_member->lom_gateway("3.0.0.1");

=back

=back

=head2 lom_ipv4addr( )

=over

Use this method to set or retrieve the IPv4 address of a grid member for the LOM functionality.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv4 address is a 32-bit number in dotted decimal notation. It consists of four 8-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get lom_ipv4addr
 my $lom_ipv4addr = $grid_member->lom_ipv4addr();
 #Modify lom_ipv4addr
 $grid_member->lom_ipv4addr("3.0.0.3");

=back

=back

=head2 lom_is_capable( )

=over

Use this method to retrieve a flag describing if a grid member is capable of the LOM functionality.

=over

=item B<Parameter>

The method returns "true" if the member is capable of LOM operation, "false" otherwise.

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get lom_is_capable
 my $lom_is_capable = $grid_member->lom_is_capable();

=back

=back

=head2 lom_mask( )

=over

Use this method to set or retrieve the netmask of a grid member for the LOM functionality.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Netmask address is a 32-bit number in dotted decimal notation. It consists of four 8-bit groups of decimal digits separated by decimal points (example: 255.255.0.0).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get lom_mask
 my $lom_mask = $grid_member->lom_mask();
 #Modify lom_mask
 $grid_member->lom_mask("255.255.0.0");

=back

=back

=head2 lom_users( )

=over

Use this method to set or retrieve the list of users for the LOM functionality.

Setting this method to a defined value implicitly sets the override_lom_users method to "true". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_lom_users attribute to "false".

Note that when lom_users is set to a defined value and override_dlom_users is set to "false", the last operation takes precedence. Thus the sequence $object->lom_users([$user1,$user2]); $object->override_lom_users("false"); will set override_lom_users to "false", and the sequence $object->override_lom_users("false"); $object->lom_users([$user1,$user2]); will result in override_lom_users="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid value is an array reference that contains L<Infoblox::Grid::LOM::User|Infoblox::Grid::LOM::User> objects.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get lom_users from the member
 my $users = $grid_member->lom_users();
 #Modify the lom users
 $grid_member->lom_users([$u1, $u2]);

=back

=back

=head2 mask( )

=over

Use this method to set or retrieve the netmask of a grid member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Netmask address is a 32-bit number in dotted decimal notation. It consists of four 8-bit groups of decimal digits separated by decimal points (example: 255.255.0.0).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get mask
 my $mask = $grid_member->mask();
 #Modify mask
 $grid_member->mask("255.255.0.0");

=back

=back

=head2 master_candidate( )

=over

Use this method to set or retrieve the master_candidate flag of a grid member. This flag enables the grid member to assume the role of grid master as a disaster recovery measure.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the master_candidate flag or "false" to deactivate/unset it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get master candidate flag
 my $master_candidate = $grid_member->master_candidate();
 #Modify master candidate flag
 $grid_member->master_candidate("true");

=back

=back

=head2 member_service_communication( )

=over

Use this method to set or retrieve the communication type for various services.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is an array reference that contains  L<Infoblox::Grid::Member::Communication|Infoblox::Grid::Member::Communication> objects.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 # Get the attribute value
 my $attr = $grid_member->member_service_communication();
 # Modify the attribute value
 $grid_member->member_service_communication([$c1, $c2, $c3]);

=back

=back

=head2 mgmt_dscp( )

=over

Use this method to set or retrieve the DSCP value of the IPv4 MGMT port.

Setting this method to a defined value implicitly sets the override_mgmt_dscp method to "true". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_mgmt_dscp attribute to "false".

Note that when dscp is set to a defined value and override_mgmt_dscp is set to "false", the last operation takes precedence. Thus the sequence $object->mgmt_dscp(11); $object->override_mgmt_dscp("false"); will set override_mgmt_dscp to "false", and the sequence $object->override_mgmt_dscp("false"); $object->mgmt_dscp(11); will result in override_mgmt_dscp="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid values are integers between 0 and 63, inclusive. The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get attribute value
 my $value = $grid_member->mgmt_dscp();
 #Modify attribute value
 $grid_member->mgmt_dscp(11);

=back

=back

=head2 mgmt_gateway( )

=over

Use this method to set or retrieve the gateway IP address of the MGMT port.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv4 address is a 32-bit number in dotted decimal notation. It consists of four 8-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get mgmt gateway
 my $mgmt_gateway = $grid_member->mgmt_gateway();
 #Modify mgmt gateway
 $grid_member->mgmt_gateway("4.0.0.1");

=back

=back

=head2 mgmt_lan( )

=over

Use this method to set or retrieve the LAN IP address of the MGMT port.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv4 address is a 32-bit number in dotted decimal notation. It consists of four 8-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get mgmt lan
 my $mgmt_lan = $grid_member->mgmt_lan();
 #Modify mgmt lan
 $grid_member->mgmt_lan("4.0.0.2");

=back

=back

=head2 mgmt_ipv6addr( )

=over

Use this method to set or retrieve the LAN IPv6 address of the MGMT port.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv6 address is a 128-bit number represented as eight groups of four hexadecimal digits (i.e. two octets), each group separated by a colon(:) (example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334). Leading zeroes and groups of consecutive zeros within the value can be omitted to produce a more compact representation (example: 2001::1, ::1).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get MGMT IPv6 address
 my $mgmt_ipv6addr = $grid_member->mgmt_ipv6addr();
 #Modify MGMT IPv6 address
 $grid_member->mgmt_ipv6addr("2001::2");

=back

=back

=head2 mgmt_ipv6_cidr( )

=over

Use this method to set or retrieve the CIDR of the MGMT port. Required only when mgmt_ipv6addr is specified.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify the netmask in CIDR format.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get MGMT cidr
 my $mgmt_cidr = $grid_member->mgmt_cidr();
 #Modify MGMT cidr
 $grid_member->mgmt_cidr("64");

=back

=back

=head2 mgmt_ipv6_dscp( )

=over

Use this method to set or retrieve the DSCP value of the IPv6 MGMT port.

Setting this method to a defined value implicitly sets the override_mgmt_ipv6_dscp method to "true". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_mgmt_ipv6_dscp attribute to "false".

Note that when dscp is set to a defined value and override_mgmt_ipv6_dscp is set to "false", the last operation takes precedence. Thus the sequence $object->mgmt_ipv6_dscp(11); $object->override_mgmt_ipv6_dscp("false"); will set override_mgmt_ipv6_dscp to "false", and the sequence $object->override_mgmt_ipv6_dscp("false"); $object->mgmt_ipv6_dscp(11); will result in override_mgmt_ipv6_dscp="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid values are integers between 0 and 63, inclusive. The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get attribute value
 my $value = $grid_member->mgmt_ipv6_dscp();
 #Modify attribute value
 $grid_member->mgmt_ipv6_dscp(11);

=back

=back

=head2 mgmt_ipv6_enable_auto_config( )

=over

Use this method to enable/disable IPv6 auto-configuration of the MGMT interface.

When IPv6 auto-configuration is enabled, a gateway is not needed since it will be automatically discovered.

=over

=item B<Parameter>

Specify "true" to enable IPv6 auto-configuration or "false" to disable it. Default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

=item B<Example>

 #Get IPv6 auto-configuration
 my $ipv6_autoconfig_enabled = $grid_member->mgmt_ipv6_enable_auto_config();
 #Modify IPv6 auto-configuration
 $grid_member->mgmt_ipv6_enable_auto_config("true");

=back

=back

=head2 mgmt_ipv6_gateway( )

=over

Use this method to set or retrieve the LAN IPv6 gateway of the MGMT port.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv6 address is a 128-bit number represented as eight groups of four hexadecimal digits (i.e. two octets), each group separated by a colon(:) (example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334). Leading zeroes and groups of consecutive zeros within the value can be omitted to produce a more compact representation (example: 2001::1, ::1).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get MGMT IPv6 gateway
 my $mgmt_ipv6_gateway = $grid_member->mgmt_ipv6_gateway();
 #Modify MGMT IPv6 gateway
 $grid_member->mgmt_ipv6_gateway("2001::1");

=back

=back

=head2 mgmt_mask( )

=over

Use this method to set or retrieve the netmask of the MGMT port.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Netmask address is a 32-bit number in dotted decimal notation. It consists of four 8-bit groups of decimal digits separated by decimal points (example: 255.255.0.0).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get mgmt mask
 my $mgmt_mask = $grid_member->mgmt_mask();
 #Modify mgmt mask
 $grid_member->mgmt_mask("255.255.0.0");

=back

=back

=head2 mgmt_node2_port_duplex( )

=over

Use this method to specify the duplex setting of the MGMT port on node 2 of an HA pair.
Note: Use this method in combination with mgmt_node2_port_speed. If any of these attributes are undefined, the default values for duplex and speed settings are used.

=over

=item B<Parameter>

Valid values are "Half" or "Full". The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get mgmt_node2_port_duplex
 my $mgmt_node2_port_duplex = $obj->mgmt_node2_port_duplex();
 #Modify mgmt_node2_port_duplex
 $obj->mgmt_node2_port_duplex("Half");

=back

=back

=head2 mgmt_node2_port_speed( )

=over

Use this method to set the connection speed of the MGMT port on node 2 of an HA pair.
Note: Use this method in combination with mgmt_node2_port_duplex. If any of these attributes are undefined, the default values for duplex and speed settings are used.

=over

=item B<Parameter>

Valid values are 10, 100 or 1000. The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get mgmt_node2_port_speed
 my $mgmt_node2_port_speed = $obj->mgmt_node2_port_speed();
 #Modify mgmt_node2_port_speed
 $obj->mgmt_node2_port_speed(10);

=back

=back

=head2 mgmt_port( )

=over

Use this method to set or retrieve the MGMT port flag of a grid member. You can restrict administrative access to an Infoblox appliance by connecting the MGMT port to a subnet containing only management systems.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

Note that node1_mgmt_port, node2_mgmt_port and mgmt_port share the value; setting any of them will have the same effect.

=over

=item B<Parameter>

Specify "true" to set the mgmt_port flag or "false" to deactivate/unset it. The default value is "false". To disable the mgmt_port flag, you must disable the "node1_mgmt_port" and "node2_mgmt_port" flags as well.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get MGMT port flag
 my $mgmt_port = $grid_member->mgmt_port();
 #Modify MGMT port flag
 $grid_member->mgmt_port("true");

=back

=back

=head2 mgmt_port_duplex( )

=over

Use this method to specify the duplex setting of the MGMT port on a single grid member or on node 1 of an HA grid member.
Note: Use this method in combination with mgmt_port_speed. If any of these attributes are undefined, the default values for duplex and speed settings are used.

=over

=item B<Parameter>

Valid values are "Half" or "Full". The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get mgmt_port_duplex
 my $mgmt_port_duplex = $obj->mgmt_port_duplex();
 #Modify mgmt_port_duplex
 $obj->mgmt_port_duplex("Half");

=back

=back

=head2 mgmt_port_speed( )

=over

Use this method to specify the connection speed of the MGMT port on a single grid member or on node 1 of an HA grid member.
Note: Use this method in combination with mgmt_port_duplex. If any of these attributes are undefined, the default values for duplex and speed settings are used.

=over

=item B<Parameter>

Valid values are 10, 100 or 1000. The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get mgmt_port_speed
 my $mgmt_port_speed = $obj->mgmt_port_speed();
 #Modify mgmt_port_speed
 $obj->mgmt_port_speed(10);

=back

=back

=head2 mgmt_reserved_interface( )

=over

Use this method to set or retrieve the discovery reserved interface of the MGMT port on a single grid member or on node 1 of an HA grid member.

=over

=item B<Parameter>

Valid value is an L<Infoblox::Grid::Discovery::DeviceInterface|Infoblox::Grid::Discovery::DeviceInterface> object.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get attribute value
 my $attr = $grid_member->mgmt_reserved_interface();
 #Modify attribute value
 $grid_member->mgmt_reserved_interface($interface);

=back

=back

=head2 mmdb_ea_build_time( )

=over

Use this method to retrieve the extensible attributes MaxMind database build time. This is a read-only attribute.

=over

=item B<Parameter>

None

=item B<Returns>

The method returns the attribute value. The number of seconds that have elapsed since January 1, 1970 UTC.

=item B<Example>

 #Get mmdb_ea_build_time value
 my $value = $object->mmdb_ea_build_time();

=back

=back

=head2 mmdb_geoip_build_time( )

=over

Use this method to retrieve the GeoIP MaxMind database build time. This is a read-only attribute.

=over

=item B<Parameter>

None

=item B<Returns>

The method returns the attribute value. The number of seconds that have elapsed since January 1, 1970 UTC.

=item B<Example>

 #Get mmdb_ea_build_time value
 my $value = $object->mmdb_ea_build_time();

=back

=back

=head2 name( )

=over

Use this method to set or retrieve the host name of a grid member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The host name in FQDN (Fully Qualified Domain Name) format of a grid member. The FQDN consists of the host name followed by the domain name (example: abc.com). A host name can have a maximum of 256 bytes.

Note that name matching is not case-sensitive, and that names are inserted in lowercase.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get name
 my $name = $grid_member->name();
 #Modify name
 $grid_member->name("hostname2.com");

=back

=back

=head2 nat_enabled( )

=over

Use this method to set or retrieve the NAT compatibility setting.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to enable the NAT compatibility setting or "false" to disable it.

This method will also be automatically set to "true" or "false" when "nat_group", "nat_ip_address", "node1_nat" and "node2_nat" change. If any of them is set, nat_enabled will be set to "true"; if all of them are undefined, it will be set to "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get nat group
 my $nat_group = $grid_member->nat_group();
 #Modify nat group
 $grid_member->nat_group("nat_group");

=back

=back

=head2 nat_group( )

=over

Use this method to set or retrieve the NAT group of a grid member. Required only when NAT compatibility is enabled.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Text with the NAT (Network Address Translation) group name with a maximum of 256 bytes. Default value is empty.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get nat group
 my $nat_group = $grid_member->nat_group();
 #Modify nat group
 $grid_member->nat_group("nat_group");

=back

=back

=head2 nat_ip_address( )

=over

Use this method to set or retrieve the NAT IP address of a grid member. Required only when NAT compatibility is enabled.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv4 address is a 32-bit number in dotted decimal notation. It consists of four 8-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get nat IP address
 my $nat_ip_address = $grid_member->nat_ip_address();
 #Modify nat ip address
 $grid_member->nat_ip_address("5.5.5.5");

=back

=back

=head2 nic_failover_enabled( )

=over

Use this method to set or retrieve the nic_failover_enabled flag of a grid member. This is required only when the member is a single appliance. To enable this flag, the lan2_port flag must also be set to 'true'.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the nic_failover_enabled flag or "false" to deactivate/unset it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get NIC failover enabled flag
 my $nic_failover_enabled = $grid_member->nic_failover_enabled();
 #Modify NIC failover enabled flag
 $grid_member->nic_failover_enabled("true");

=back

=back

=head2 nic_failover_enable_primary( )

=over

Use this method to set or retrieve the flag that indicates whether to prefer LAN1 when it's available or not.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to nic_failover_enable_primary flag or "false" to deactivate/unset it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get nic_failover_enable_primary value
 my $value = $object->nic_failover_enable_primary();

 #Modify nic_failover_enable_primary value
 $object->nic_failover_enable_primary("true");

=back

=back

=head2 node1_ha( )

=over

Use this method to set or retrieve the HA IP address of node 1. Required only when the member is an HA pair.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv4 address is a 32-bit number in dotted decimal notation. It consists of four 8-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get node1 ha IP address
 my $node1_ha = $grid_member->node1_ha();
 #Modify node1 ha IP address
 $grid_member->node1_ha("3.0.0.4");

=back

=back

=head2 node1_ha_reserved_interface( )

=over

Use this method to set or retrieve the discovery reserved interface of the HA port on node 1 of an HA grid member.

=over

=item B<Parameter>

Valid value is an L<Infoblox::Grid::Discovery::DeviceInterface|Infoblox::Grid::Discovery::DeviceInterface> object.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get attribute value
 my $attr = $grid_member->node1_ha_reserved_interface();
 #Modify attribute value
 $grid_member->node1_ha_reserved_interface($interface);

=back

=back

=head2 node1_paid_nios( )

=over

Use this method to retrieve whether the node 1 of an HA grid member is Paid NIOS.

=over

=item B<Parameter>

None

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get Paid NIOS status
 my $node1_paid_nios = $grid_member->node1_paid_nios();

=back

=back

=head2 node1_hwplatform( )

=over

Use this method to retrieve the hardware platform of node 1 of an HA grid member.

=over

=item B<Parameter>

None

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get hardware platform
 my $node1_hwplatform = $grid_member->node1_hwplatform();

=back

=back

=head2 node1_hwid( )

=over

Use this method to retrieve the hardware ID of node 1 of an HA grid member.

=over

=item B<Parameter>

None

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get node1 hardware ID
 my $node1_hwid = $grid_member->node1_hwid();

=back

=back

=head2 node1_lan( )

=over

Use this method to set or retrieve the LAN IPv4 address of node 1 of an HA grid member. Required only when the member is an HA pair.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv4 address is a 32-bit number in dotted decimal notation. It consists of four 8-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get LAN IP address of node1
 my $node1_lan = $grid_member->node1_lan();
 #Modify LAN IP address of node1
 $grid_member->node1_lan("3.0.0.9");

=back

=back

=head2 node1_lan_ipv6addr( )

=over

Use this method to set or retrieve the LAN IPv6 address of node 1 of an HA grid member. Required only when the member is an HA pair.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv6 address is a 128-bit number represented as eight groups of four hexadecimal digits (i.e. two octets), each group separated by a colon(:) (example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334). Leading zeroes and groups of consecutive zeros within the value can be omitted to produce a more compact representation (example: 2001::1, ::1).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get LAN IPv6 address of node1
 my $node1_lan_ipv6addr = $grid_member->node1_lan_ipv6addr();
 #Modify LAN IPv6 address of node1
 $grid_member->node1_lan_ipv6addr("2001::1");

=back

=back

=head2 node1_lan_reserved_interface( )

=over

Use this method to set or retrieve the discovery reserved interface of the LAN port on node 1 of an HA grid member.

=over

=item B<Parameter>

Valid value is an L<Infoblox::Grid::Discovery::DeviceInterface|Infoblox::Grid::Discovery::DeviceInterface> object.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get attribute value
 my $attr = $grid_member->node1_lan_reserved_interface();
 #Modify attribute value
 $grid_member->node1_lan_reserved_interface($interface);

=back

=back

=head2 node1_lan2_reserved_interface( )

=over

Use this method to set or retrieve the discovery reserved interface of the LAN2 port on node 1 of an HA grid member.

=over

=item B<Parameter>

Valid value is an L<Infoblox::Grid::Discovery::DeviceInterface|Infoblox::Grid::Discovery::DeviceInterface> object.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get attribute value
 my $attr = $grid_member->node1_lan2_reserved_interface();
 #Modify attribute value
 $grid_member->node1_lan2_reserved_interface($interface);

=back

=back

=head2 node1_lcd_autodim( )

=over

Use this method to set or retrieve the number of seconds before the LCD on the front panel of node 1 of an HA grid member automatically dims.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The number of seconds. Valid values are between 5 and 3600. The default value is 30.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get lcd_autodim on node 1
 my $node1_lcd_autodim = $grid_member->node1_lcd_autodim();
 #Modify the autodim value
 $grid_member->node1_lcd_autodim(60);

=back

=back

=head2 node1_lcd_brightness( )

=over

Use this method to set or retrieve the brightness level of the LCD on the front panel of node 1 of an HA grid member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid values are between 1 and 10. The default value is 7.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get lcd_brightness on node 1
 my $node1_lcd_brightness = $grid_member->node1_lcd_brightness();
 #Modify the brightness value
 $grid_member->node1_lcd_brightness(3);

=back

=back

=head2 node1_lcd_hwident( )

=over

Use this method to set or retrieve whether the node 1 of an HA grid member's hardware ID identification functionality is active.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the lcd_hwident flag or "false" to deactivate/unset it. The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get the lcd_hwident status
 my $node1_lcd_hwident = $grid_member->node1_lcd_hwident();
 #Modify the lcd_hwident status
 $grid_member->node1_lcd_hwident("true");

=back

=back

=head2 node1_lcd_version( )

=over

Use this method to retrieve the version of the Liquid Crystal Display (LCD) of the node 1 of an HA grid member.

=over

=item B<Parameter>

None.

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get node1_lcd_version
 my $node1_lcd_version = $grid_member->node1_lcd_version();

=back

=back

=head2 node1_lom_gateway( )

=over

Use this method to set or retrieve the gateway IP address on node 1 of an HA grid member for the LOM functionality.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv4 address is a 32-bit number in dotted decimal notation. It consists of four 8-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get node1_lom_gateway
 my $node1_lom_gateway = $grid_member->node1_lom_gateway();
 #Modify node1_lom_gateway
 $grid_member->node1_lom_gateway("3.0.0.1");

=back

=back

=head2 node1_lom_is_capable( )

=over

Use this method to retrieve a flag describing if node 1 of an HA grid member is capable of the LOM functionality.

=over

=item B<Parameter>

The method returns "true" if the node is capable of LOM operation, "false" otherwise.

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get node1_lom_is_capable
 my $node1_lom_is_capable = $grid_member->node1_lom_is_capable();

=back

=back

=head2 node1_lom_ipv4addr( )

=over

Use this method to set or retrieve the IPv4 address on node 1 of an HA grid member for the LOM functionality.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv4 address is a 32-bit number in dotted decimal notation. It consists of four 8-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get node1_lom_ipv4addr
 my $node1_lom_ipv4addr = $grid_member->node1_lom_ipv4addr();
 #Modify node1_lom_ipv4addr
 $grid_member->node1_lom_ipv4addr("3.0.0.3");

=back

=back

=head2 node1_lom_mask( )

=over

Use this method to set or retrieve the netmask on node 1 of an HA grid member for the LOM functionality.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Netmask address is a 32-bit number in dotted decimal notation. It consists of four 8-bit groups of decimal digits separated by decimal points (example: 255.255.0.0).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get node1_lom_mask
 my $node1_lom_mask = $grid_member->node1_lom_mask();
 #Modify node1_lom_mask
 $grid_member->node1_lom_mask("255.255.0.0");

=back

=back

=head2 node1_mgmt_dscp( )

=over

Use this method to set or retrieve the DSCP value of the IPv4 MGMT port on node 1 of an HA grid member.

Setting this method to a defined value implicitly sets the override_node1_mgmt_dscp method to "true". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_node1_mgmt_dscp attribute to "false".

Note that when dscp is set to a defined value and override_node1_mgmt_dscp is set to "false", the last operation takes precedence. Thus the sequence $object->node1_mgmt_dscp(11); $object->override_node1_mgmt_dscp("false"); will set override_node1_mgmt_dscp to "false", and the sequence $object->override_node1_mgmt_dscp("false"); $object->node1_mgmt_dscp(11); will result in override_node1_mgmt_dscp="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid values are integers between 0 and 63, inclusive. The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get attribute value
 my $value = $grid_member->node1_mgmt_dscp();
 #Modify attribute value
 $grid_member->node1_mgmt_dscp(11);

=back

=back

=head2 node1_mgmt_gateway( )

=over

Use this method to set or retrieve the gateway IP address of the MGMT port on node 1 of an HA grid member. Required only when the MGMT port is enabled.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv4 address is a 32-bit number in dotted decimal notation. It consists of four 8-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get gateway of MGMT port of node1
 my $node1_mgmt_gateway = $grid_member->node1_mgmt_gateway();
 #Modify gateway of MGMT port of node1
 $grid_member->node1_mgmt_gateway("6.0.0.1");

=back

=back

=head2 node1_mgmt_ipv6addr( )

=over

Use this method to set or retrieve the LAN IPv6 address of the MGMT port on node 1 of an HA grid member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv6 address is a 128-bit number represented as eight groups of four hexadecimal digits (i.e. two octets), each group separated by a colon(:) (example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334). Leading zeroes and groups of consecutive zeros within the value can be omitted to produce a more compact representation (example: 2001::1, ::1).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get MGMT IPv6 address of node 1
 my $node1_mgmt_ipv6addr = $grid_member->node1_mgmt_ipv6addr();
 #Modify MGMT IPv6 address of node 1
 $grid_member->node1_mgmt_ipv6addr("2001::2");

=back

=back

=head2 node1_mgmt_ipv6_cidr( )

=over

Use this method to set or retrieve the CIDR of the MGMT port on node 1 of an HA grid member. Required only when node1_mgmt_ipv6addr is specified.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify the netmask in CIDR format.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get MGMT cidr of node 1
 my $node1_mgmt_cidr = $grid_member->node1_mgmt_cidr();
 #Modify MGMT cidr of node 1
 $grid_member->node1_mgmt_cidr("64");

=back

=back

=head2 node1_mgmt_ipv6_dscp( )

=over

Use this method to set or retrieve the DSCP value of the IPv6 MGMT port on node 1 of an HA grid member.

Setting this method to a defined value implicitly sets the override_node1_mgmt_ipv6_dscp method to "true". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_node1_mgmt_ipv6_dscp attribute to "false".

Note that when dscp is set to a defined value and override_node1_mgmt_ipv6_dscp is set to "false", the last operation takes precedence. Thus the sequence $object->node1_mgmt_ipv6_dscp(11); $object->override_node1_mgmt_ipv6_dscp("false"); will set override_node1_mgmt_ipv6_dscp to "false", and the sequence $object->override_node1_mgmt_ipv6_dscp("false"); $object->node1_mgmt_ipv6_dscp(11); will result in override_node1_mgmt_ipv6_dscp="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid values are integers between 0 and 63, inclusive. The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get attribute value
 my $value = $grid_member->node1_mgmt_ipv6_dscp();
 #Modify attribute value
 $grid_member->node1_mgmt_ipv6_dscp(11);

=back

=back

=head2 node1_mgmt_ipv6_enable_auto_config( )

=over

Use this method to enable/disable IPv6 auto-configuration of the MGMT interface.

When IPv6 auto-configuration is enabled, a gateway is not needed since it will be automatically discovered.

=over

=item B<Parameter>

Specify "true" to enable IPv6 auto-configuration or "false" to disable it. Default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

=item B<Example>

 #Get IPv6 auto-configuration of node 1
 my $ipv6_autoconfig_enabled = $grid_member->node1_mgmt_ipv6_enable_auto_config();
 #Modify IPv6 auto-configuration of node 1
 $grid_member->node1_mgmt_ipv6_enable_auto_config("true");

=back

=back

=head2 node1_mgmt_ipv6_gateway( )

=over

Use this method to set or retrieve the LAN IPv6 gateway of the MGMT port on node 1 of an HA grid member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv6 address is a 128-bit number represented as eight groups of four hexadecimal digits (i.e. two octets), each group separated by a colon(:) (example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334). Leading zeroes and groups of consecutive zeros within the value can be omitted to produce a more compact representation (example: 2001::1, ::1).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get MGMT IPv6 gateway of node 1
 my $node1_mgmt_ipv6_gateway = $grid_member->node1_mgmt_ipv6_gateway();
 #Modify MGMT IPv6 gateway of node 1
 $grid_member->node1_mgmt_ipv6_gateway("2001::1");

=back

=back

=head2 node1_mgmt_mask( )

=over

Use this method to set or retrieve the netmask of the MGMT port on node 1 of an HA grid member. Required only when the MGMT port is enabled.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Netmask address is a 32-bit number in dotted decimal notation. It consists of four 8-bit groups of decimal digits separated by decimal points (example: 255.255.0.0).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get netmask of MGMT port of node 1
 my $node1_mgmt_mask = $grid_member->node1_mgmt_mask();
 #Modify netmask of MGMT port of node 1
 $grid_member->node1_mgmt_mask("255.255.0.0");

=back

=back

=head2 node1_mgmt_lan( )

=over

Use this method to set or retrieve the LAN IP address of the MGMT port on node 1 of an HA grid member. Required only when the MGMT port is enabled.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv4 address is a 32-bit number in dotted decimal notation. It consists of four 8-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get LAN IP address of MGMT port on node 1
 my $node1_mgmt_lan = $grid_member->node1_mgmt_lan();
 #Modify LAN IP address of MGMT port on node 1
 $grid_member->node1_mgmt_lan("6.0.0.5");

=back

=back

=head2 node1_mgmt_port( )

=over

Use this method to set or retrieve the MGMT port flag of an HA grid member. Required only when the MGMT port is enabled.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

Note that node1_mgmt_port, node2_mgmt_port and mgmt_port share the value; setting any of them will have the same effect.

=over

=item B<Parameter>

Specify "true" to set the node1_mgmt_port flag or "false" to deactivate/unset it. The default value is undefined. To disable node1_mgmt_port flag we also need to disable "mgmt_port" and "node2_mgmt_port" flags.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get node 1 MGMT port flag
 my $node1_mgmt_port = $grid_member->node1_mgmt_port();
 #Modify node 1 MGMT port flag
 $grid_member->node1_mgmt_port("true");

=back

=back

=head2 node1_mgmt_reserved_interface( )

=over

Use this method to set or retrieve the discovery reserved interface of the MGMT port on node 1 of an HA grid member.

=over

=item B<Parameter>

Valid value is an L<Infoblox::Grid::Discovery::DeviceInterface|Infoblox::Grid::Discovery::DeviceInterface> object.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get attribute value
 my $attr = $grid_member->node1_mgmt_reserved_interface();
 #Modify attribute value
 $grid_member->node1_mgmt_reserved_interface($interface);

=back

=back

=head2 node1_nat( )

=over

Use this method to set or retrieve the Network Address Translation (NAT) address of node 1 of an HA grid member. Required only when NAT compatibility is enabled.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv4 address is a 32-bit number in dotted decimal notation. It consists of four 8-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get Network Address Translation (NAT) address of node 1
 my $node1_nat = $grid_member->node1_nat();
 #Modify Network Address Translation (NAT) address of node 1
 $grid_member->node1_nat("5.2.2.1");

=back

=back

=head2 node1_service_status( )

=over

Use this method to retrieve the service status list of a grid member.

=over

=item B<Returns>

On retrieval, the member returns an array reference that contains  L<Infoblox::Grid::Member::ServiceStatus|Infoblox::Grid::Member::ServiceStatus> objects.

=item B<Example>

 #Get the service status list
 my $services_list = $grid_member->node1_service_status();

=back

=back

=head2 vpn_mtu( )

=over

Use this method to set or retrieve the VPN maximum transmission unit (MTU).

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify the value to set the vpn_mtu value.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get VPN MTU
 my $vpn_mtu = $grid_member->vpn_mtu();
 #Modify VPN MTU
 $grid_member->vpn_mtu(600);

=back

=back

=head2 node1_vpn_on_mgmt( )

=over

Use this method to set or retrieve the VPN on MGMT port flag of an HA grid member. Valid only when the MGMT port is enabled and the member is not a master candidate. This flag enables VPN services on the MGMT port of an HA grid member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

Note that node1_vpn_on_mgmt, node2_vpn_on_mgmt and vpn_on_mgmt share the value; setting any of them will have the same effect.

=over

=item B<Parameter>

Specify "true" to set the node1_vpn_on_mgmt flag or "false" to deactivate/unset it. The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get node 1 VPN on MGMT port flag
 my $node1_vpn_on_mgmt = $grid_member->node1_vpn_on_mgmt();
 #Modify node 1 VPN on MGMT port flag
 $grid_member->node1_vpn_on_mgmt("false");

=back

=back

=head2 node1_hwtype( )

=over

Use this method to retrieve the hardware type of node 1 of an HA grid member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The actual hardware type is populated when the physical node joins the grid. The default value is "".

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get node1 hardware type
 my $node1_hwtype = $grid_member->node1_hwtype();

=back

=back

=head2 node2_ha( )

=over

Use this method to set or retrieve the HA IP address of node 2 of an HA grid member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv4 address is a 32-bit number in dotted decimal notation. It consists of four 8-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get node 2 HA IP address
 my $node2_ha = $grid_member->node2_ha();
 #Modify node 2 HA IP address
 $grid_member->node2_ha("3.0.0.6");

=back

=back

=head2 node2_ha_reserved_interface( )

=over

Use this method to set or retrieve the discovery reserved interface of the HA port on node 2 of an HA grid member.

=over

=item B<Parameter>

Valid value is an L<Infoblox::Grid::Discovery::DeviceInterface|Infoblox::Grid::Discovery::DeviceInterface> object.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get attribute value
 my $attr = $grid_member->node2_ha_reserved_interface();
 #Modify attribute value
 $grid_member->node2_ha_reserved_interface($interface);

=back

=back

=head2 node2_paid_nios( )

=over

Use this method to retrieve whether the node 2 of an HA grid member is Paid NIOS.

=over

=item B<Parameter>

None

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get Paid NIOS status
 my $node2_paid_nios = $grid_member->node2_paid_nios();

=back

=back

=head2 node2_hwplatform( )

=over

Use this method to retrieve the hardware platform of node 2 of an HA grid member.

=over

=item B<Parameter>

None

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get hardware platform
 my $node2_hwplatform = $grid_member->node2_hwplatform();

=back

=back

=head2 node2_hwid( )

=over

Use this method to retrieve the hardware ID of node 2 of an HA grid member.

=over

=item B<Parameter>

None

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get node2 hardware ID
 my $node2_hwid = $grid_member->node2_hwid();

=back

=back

=head2 node2_lan( )

=over

Use this method to set or retrieve the LAN IP address of node 2 of an HA grid member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv4 address is a 32-bit number in dotted decimal notation. It consists of four 8-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get LAN IP address of node 2
 my $node2_lan = $grid_member->node2_lan();
 #Modify LAN IP address of node 2
 $grid_member->node2_lan("3.0.0.5");

=back

=back

=head2 node2_lan_ipv6addr( )

=over

Use this method to set or retrieve the LAN IPv6 address of node 2 of an HA grid member. Required only when the member is an HA pair.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv6 address is a 128-bit number represented as eight groups of four hexadecimal digits (i.e. two octets), each group separated by a colon(:) (example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334). Leading zeroes and groups of consecutive zeros within the value can be omitted to produce a more compact representation (example: 2001::1, ::1).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get LAN IPv6 address of node2
 my $node2_lan_ipv6addr = $grid_member->node2_lan_ipv6addr();
 #Modify LAN IPv6 address of node2
 $grid_member->node2_lan_ipv6addr("2001::1");

=back

=back

=head2 node2_lan_reserved_interface( )

=over

Use this method to set or retrieve the discovery reserved interface of the LAN port on node 2 of an HA grid member.

=over

=item B<Parameter>

Valid value is an L<Infoblox::Grid::Discovery::DeviceInterface|Infoblox::Grid::Discovery::DeviceInterface> object.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get attribute value
 my $attr = $grid_member->node2_lan_reserved_interface();
 #Modify attribute value
 $grid_member->node2_lan_reserved_interface($interface);

=back

=back

=head2 node2_lan2_reserved_interface( )

=over

Use this method to set or retrieve the discovery reserved interface of the LAN2 port on node 2 of an HA grid member.

=over

=item B<Parameter>

Valid value is an L<Infoblox::Grid::Discovery::DeviceInterface|Infoblox::Grid::Discovery::DeviceInterface> object.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get attribute value
 my $attr = $grid_member->node2_lan2_reserved_interface();
 #Modify attribute value
 $grid_member->node2_lan2_reserved_interface($interface);

=back

=back

=head2 node2_lcd_autodim( )

=over

Use this method to set or retrieve the number of seconds before the LCD on the front panel of node 2 of an HA grid member automatically dims.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The number of seconds. Valid values are between 5 and 3600. The default value is 30.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get lcd_autodim on node 2
 my $node2_lcd_autodim = $grid_member->node2_lcd_autodim();
 #Modify the autodim value
 $grid_member->node2_lcd_autodim(60);

=back

=back

=head2 node2_lcd_brightness( )

=over

Use this method to set or retrieve the brightness level of the LCD on the front panel of node 2 of an HA grid member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid values are between 1 and 10. The default value is 7.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get lcd_brightness on node 2
 my $node2_lcd_brightness = $grid_member->node2_lcd_brightness();
 #Modify the brightness value
 $grid_member->node2_lcd_brightness(3);

=back

=back

=head2 node2_lcd_hwident( )

=over

Use this method to set or retrieve whether the node 2 of an HA grid member's hardware ID identification functionality is active.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the node2_lcd_hwident flag or "false" to deactivate/unset it. The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get the lcd_hwident status
 my $node2_lcd_hwident = $grid_member->node2_lcd_hwident();
 #Modify the lcd_hwident status
 $grid_member->node2_lcd_hwident("true");

=back

=back

=head2 node2_lcd_version( )

=over

Use this method to retrieve the version of the Liquid Crystal Display (LCD) of the node 2 of an HA grid member.

=over

=item B<Parameter>

None.

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get node2_lcd_version
 my $node2_lcd_version = $grid_member->node2_lcd_version();

=back

=back

=head2 node2_lom_gateway( )

=over

Use this method to set or retrieve the gateway IP address on node 2 of an HA grid member for the LOM functionality.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv4 address is a 32-bit number in dotted decimal notation. It consists of four 8-bit groups of decimal digits separated by decimal points (example: 192.168.1.1).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get node2_lom_gateway
 my $node2_lom_gateway = $grid_member->node2_lom_gateway();
 #Modify node2_lom_gateway
 $grid_member->node2_lom_gateway("3.0.0.1");

=back

=back

=head2 node2_lom_is_capable( )

=over

Use this method to retrieve a flag describing if node 1 of an HA grid member is capable of the LOM functionality.

=over

=item B<Parameter>

The method returns "true" if the node is capable of LOM operation, "false" otherwise.

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get node2_lom_is_capable
 my $node2_lom_is_capable = $grid_member->node2_lom_is_capable();

=back

=back

=head2 node2_lom_ipv4addr( )

=over

Use this method to set or retrieve the IPv4 address on node 2 of an HA grid member for the LOM functionality.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv4 address is a 32-bit number in dotted decimal notation. It consists of four 8-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get node2_lom_ipv4addr
 my $node2_lom_ipv4addr = $grid_member->node2_lom_ipv4addr();
 #Modify node2_lom_ipv4addr
 $grid_member->node2_lom_ipv4addr("3.0.0.3");

=back

=back

=head2 node2_lom_mask( )

=over

Use this method to set or retrieve the netmask on node 2 of an HA grid member for the LOM functionality.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Netmask address is a 32-bit number in dotted decimal notation. It consists of four 8-bit groups of decimal digits separated by decimal points (example: 255.255.0.0).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get node2_lom_mask
 my $node2_lom_mask = $grid_member->node2_lom_mask();
 #Modify node2_lom_mask
 $grid_member->node2_lom_mask("255.255.0.0");

=back

=back

=head2 node2_mgmt_dscp( )

=over

Use this method to set or retrieve the DSCP value of the IPv4 MGMT port on node 2 of an HA grid member.

Setting this method to a defined value implicitly sets the override_node2_mgmt_dscp method to "true". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_node2_mgmt_dscp attribute to "false".

Note that when dscp is set to a defined value and override_node2_mgmt_dscp is set to "false", the last operation takes precedence. Thus the sequence $object->node2_mgmt_dscp(11); $object->override_node2_mgmt_dscp("false"); will set override_node2_mgmt_dscp to "false", and the sequence $object->override_node2_mgmt_dscp("false"); $object->node2_mgmt_dscp(11); will result in override_node2_mgmt_dscp="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid values are integers between 0 and 63, inclusive. The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get attribute value
 my $value = $grid_member->node2_mgmt_dscp();
 #Modify attribute value
 $grid_member->node2_mgmt_dscp(11);

=back

=back

=head2 node2_mgmt_gateway( )

=over

Use this method to set or retrieve the gateway IP address of the MGMT port on node 2 of an HA grid member. Required only when the MGMT port is enabled.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv4 address is a 32-bit number in dotted decimal notation. It consists of four 8-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get gateway of MGMT port of node 2
 my $node2_mgmt_gateway = $grid_member->node2_mgmt_gateway();
 #Modify gateway of MGMT port of node 2
 $grid_member->node2_mgmt_gateway("7.0.0.1");

=back

=back

=head2 node2_mgmt_mask( )

=over

Use this method to set or retrieve the netmask of the MGMT port on node 2 of an HA grid member. Required only when the MGMT port is enabled.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Netmask address is a 32-bit number in dotted decimal notation. It consists of four 8-bit groups of decimal digits separated by decimal points (example: 255.255.0.0).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get netmask of MGMT port of node 2
 my $node2_mgmt_mask = $grid_member->node2_mgmt_mask();
 #Modify netmask of MGMT port of node 2
 $grid_member->node2_mgmt_mask("255.255.0.0");

=back

=back

=head2 node2_mgmt_lan( )

=over

Use this method to set or retrieve the LAN IP address of the MGMT port on node 2 of an HA grid member. Required only when the MGMT port is enabled.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv4 address is a 32-bit number in dotted decimal notation. It consists of four 8-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get LAN IP address of MGMT port of node 2
 my $node2_mgmt_lan = $grid_member->node2_mgmt_lan();
 #Modify LAN IP address of MGMT port of node 2
 $grid_member->node2_mgmt_lan("7.0.0.5");

=back

=back

=head2 node2_mgmt_port( )

=over

Use this method to set or retrieve the MGMT port flag of an HA grid member. Required only when the MGMT port is enabled.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

Note that node1_mgmt_port, node2_mgmt_port and mgmt_port share the value: setting any of them will have the same effect.

=over

=item B<Parameter>

Specify "true" to set the node2_mgmt_port flag or "false" to deactivate/unset it. The default value is undefined. To disable node2_mgmt_port flag, you must disable the "mgmt_port" and "node1_mgmt_port" flags as well.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get MGMT port flag of node 2
 my $node2_mgmt_port = $grid_member->node2_mgmt_port();
 #Modify MGMT port flag of node 2
 $grid_member->node2_mgmt_port("true");

=back

=back

=head2 node2_mgmt_reserved_interface( )

=over

Use this method to set or retrieve the discovery reserved interface of the MGMT port on node 2 of an HA grid member.

=over

=item B<Parameter>

Valid value is an L<Infoblox::Grid::Discovery::DeviceInterface|Infoblox::Grid::Discovery::DeviceInterface> object.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get attribute value
 my $attr = $grid_member->node2_mgmt_reserved_interface();
 #Modify attribute value
 $grid_member->node2_mgmt_reserved_interface($interface);

=back

=back

=head2 node2_mgmt_ipv6_dscp( )

=over

Use this method to set or retrieve the DSCP value of the IPv6 MGMT port on node 2 of an HA grid member.

Setting this method to a defined value implicitly sets the override_node2_mgmt_ipv6_dscp method to "true". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_node2_mgmt_ipv6_dscp attribute to "false".

Note that when dscp is set to a defined value and override_node2_mgmt_ipv6_dscp is set to "false", the last operation takes precedence. Thus the sequence $object->node2_mgmt_ipv6_dscp(11); $object->override_node2_mgmt_ipv6_dscp("false"); will set override_node2_mgmt_ipv6_dscp to "false", and the sequence $object->override_node2_mgmt_ipv6_dscp("false"); $object->node2_mgmt_ipv6_dscp(11); will result in override_node2_mgmt_ipv6_dscp="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid values are integers between 0 and 63, inclusive. The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get attribute value
 my $value = $grid_member->node2_mgmt_ipv6_dscp();
 #Modify attribute value
 $grid_member->node2_mgmt_ipv6_dscp(11);

=back

=back

=head2 node2_nat( )

=over

Use this method to set or retrieve the Network Address Translation (NAT) address of node 2. Required only when NAT compatibility is enabled.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An IPv4 address is a 32-bit number in dotted decimal notation. It consists of four 8-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get Network Address Translation (NAT) address of node2
 my $node2_nat = $grid_member->node2_nat();
 #Modify Network Address Translation (NAT) address of node2
 $grid_member->node2_nat("5.4.4.6");

=back

=back

=head2 node2_service_status( )

=over

Use this method to retrieve the service status list of a grid member.

=over

=item B<Returns>

On retrieval, the member returns an array reference that contains  L<Infoblox::Grid::Member::ServiceStatus|Infoblox::Grid::Member::ServiceStatus> objects.

=item B<Example>

 #Get the service status list
 my $services_list = $grid_member->node2_service_status();

=back

=back

=head2 node2_vpn_on_mgmt( )

=over

Use this method to set or retrieve the VPN on MGMT port flag of an HA grid member. Valid only when the MGMT port is enabled and the member is not a master candidate. This flag enables VPN services on the MGMT port of an HA grid member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

Note that node1_vpn_on_mgmt, node2_vpn_on_mgmt and vpn_on_mgmt share the value: setting any of them will have the same effect.

=over

=item B<Parameter>

Specify "true" to set the node2_vpn_on_mgmt flag or "false" to deactivate/unset it. The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get node 2 VPN on MGMT port flag
 my $node2_vpn_on_mgmt = $grid_member->node2_vpn_on_mgmt();
 #Modify node 2 VPN on MGMT port flag
 $grid_member->node2_vpn_on_mgmt("false");

=back

=back

=head2 node2_hwtype( )

=over

Use this method to retrieve the hardware type of node 2 of an HA grid member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The actual hardware type is populated when the physical node joins the grid. The default value is "".

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get node2 hardware type
 my $node2_hwtype = $grid_member->node2_hwtype();

=back

=back

=head2 notification_email_addr( )

=over

Use this method to set or retrieve the notification email address of a grid member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The email address. Default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get notification email address
 my $notification_email_addr = $grid_member->notification_email_addr();
 #Modify notification email address
 $grid_member->notification_email_addr("admin\@infoblox.com");

=back

=back

=head2 ntp_access_list( )

=over

Use this method to set or retrieve the Network Time Protocols (NTP) access control list of a grid member. Valid only when the enable_ntp flag is set to "true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid value is an L<Infoblox::Grid::NamedACL|Infoblox::Grid::NamedACL> object
 or an array reference that contains L<Infoblox::Grid::NTPAccess|Infoblox::Grid::NTPAccess> objects
.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get NTP access control list
 my $ntp_access_list = $grid_member->ntp_access_list();
 #Modify NTP access control list
 $grid_member->ntp_access_list([$ntpac1,$ntpac2]);
 #Undef NTP access control list
 $grid_member->ntp_access_list(undef);
 #Use Infoblox::Grid::NamedACL
 $grid_member->ntp_access_list($nacl);

=back

=back

=head1 ntp_kod( )

=over

Use this method to enable Kiss-o'-Death packets on the NTP server.

Setting this method to a defined value implicitly sets the override_ntp_kod method to "true". Setting the parameter to undefined causes the appliance to use the Grid default and automatically resets the override_ntp_kod attribute to "false".

Note that when ntp_kod is set to a defined value and override_ntp_kod is set to "false", the last operation takes precedence. Thus the sequence $object->ntp_kod("true"); $object->override_ntp_kod("false"); will set override_ntp_kod to "false", and the sequence $object->override_ntp_kod("false"); $object->ntp_kod("true"); will result in override_ntp_kod="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to enable Kiss-o'-Death packets on the NTP server or "false" to disable them. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get the current value of the ntp_kod parameter
 my $ntp_kod = $grid->ntp_kod();
 #Set the ntp_kod parameter
 $grid->ntp_kod("true");

=back

=back

=head2 ntp_service_type( )

=over

Use this method to set or retrieve the NTP service type for assigned Named ACL object.

The attribute value is ignored if 'ntp_access_list' attribute is not a Named ACL object.

=over

=item B<Parameter>

Valid values are "Time" or "Time and NTP control". The default value is "Time".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get ntp_service_type
 my $service = $grid_member->ntp_service_type();
 #Modify ntp_service_type
 $grid_member->ntp_service_type("Time and NTP control");

=back

=back

=head2 ntp_authentication_key( )

=over

Use this method to set or retrieve the Network Time Protocol (NTP) authentication key(s) of a grid member. Valid only when the enable_ntp flag is set to "true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid value is an array reference that contains  L<Infoblox::Grid::NTPKey|Infoblox::Grid::NTPKey> object(s).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get NTP authentication key
 my $ntp_authentication_key = $grid_member->ntp_authentication_key();
 #Modify NTP authentication key
 my $ntp_key1 = Infoblox::Grid::NTPKey->new(
     key_number => "1111",
     key_type   => "M",
     key_string => "aaaa"
 );
 my $ntp_key2 = Infoblox::Grid::NTPKey->new(
     key_number => "2222",
     key_type   => "n",
     key_string => "d3e54352e5548080"
 );
 $grid_member->ntp_authentication_key([$ntp_key1, $ntp_key2]);

=back

=back

=head2  ntp_server( )

=over

Use this method to set or retrieve the NTP server list.

=over

=item B<Parameter>

Array reference that contains Infoblox::Grid::NTPServer objects or undef.

Specifying a reference to an empty array while the
"exclude_grid_master_as_ntp_server" attribute is set to "false" sets the Grid Master as the only NTP source for the given Member.
Setting the value of this parameter to undef disables the feature.

NOTE: Currently, if you need to specify an external NTP server with authentication, the NTP keys that you use must be known
to the Infoblox::Grid object. See the following example.

NOTE: Setting this to a list also sets external_ntp_servers_enabled to 'true'. Setting this to undef also sets
external_ntp_servers_enabled to 'false'.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

=item B<Example>

 #Get the ntp_server list for the given member
 my $ntp_server_list=$grid_member->ntp_server();

 #Modify ntp_server property
 my $ntp_server1 = Infoblox::Grid::NTPServer->new(address => "1.1.1.1");
 my $ntp_server2 = Infoblox::Grid::NTPServer->new(address => "2.2.2.2");
 $grid_member->ntp_server([$ntp_server1,$ntp_server2]);

 #Setting grid master as the only NTP source
 my $session=Infoblox::Session->new(
     master   => "127.0.0.1",
     username => "admin",
     password => "infoblox"
    );
 die(Infoblox::status_code().":".Infoblox::status_detail()) unless $session;

 my $grid_member=$session->get(
                               object => "Infoblox::Grid::Member",
                               name   => "infoblox.localdomain"
                              );
 die($session->status_code()." : ".$session->status_detail()) unless (ref($grid_member) eq "Infoblox::Grid::Member");

 $grid_member->ntp_server([]);
 $grid_member->exclude_grid_master_as_ntp_server("false");
 $session->modify($grid_member) or die($session->status_code()." : ".$session->status_detail());

 #Adding external NTP servers with authentication
 my $session=Infoblox::Session->new(
     master   => "127.0.0.1",
     username => "admin",
     password => "infoblox"
    );
 die(Infoblox::status_code().":".Infoblox::status_detail()) unless $session;
 my $grid_member=$session->get(
                               object => "Infoblox::Grid::Member",
                               name   => "infoblox.localdomain"
                              );
 die($session->status_code()." : ".$session->status_detail()) unless (ref($grid_member) eq "Infoblox::Grid::Member");

 my $grid=$session->get(
                          object => "Infoblox::Grid",
                          name   => "Infoblox"
                        );
 die($session->status_code()." : ".$session->status_detail()) unless (ref($grid) eq "Infoblox::Grid");

 #It is assumed in the following that the grid has NTP enabled
 die("Grid must have ntp enabled) unless ($grid->enable_ntp() eq "true");

 my $ntp_key_1= Infoblox::Grid::NTPKey->new(
            key_number => "101",
            key_type   => "n",
            key_string => "d3e54352e5548080"
        );
 $grid->ntp_authentication_key([$ntp_key_1]);
 $session->modify($grid) or die(($session->status_code()." : ".$session->status_detail());

 my $ntp_server=Infoblox::Grid::NTPServer->new(
                                                address => "1.1.1.1"
                                                authentication => "true"
                                                ntp_key=>$ntp_key_1
                                               );

 $grid_member->ntp_server([$ntp_server]);
 $session->modify($grid_member) or die(($session->status_code()." : ".$session->status_detail());

=back

=back

=head2 ospf_list( )

=over

Use this method to set or retrieve the OSPF area configuration (for anycast) list of a grid member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid value is an array reference that contains  L<Infoblox::Grid::Member::OSPF|Infoblox::Grid::Member::OSPF> object(s).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get OSPF list
 my $ospf_list = $grid_member->ospf_list();
 #Modify OSPF list
 my $ospf1 = Infoblox::Grid::Member::OSPF->new(
         area_id             => "1",
         interface           => "LAN_HA",
         authentication_type => "none",
 );

 $grid_member->ospf_list([$ospf1]);

=back

=back

=head2 override_enable_lom( )

=over

The override_enable_lom attribute controls whether the enable_lom value in the member is used, instead of the grid default.

The override_enable_lom attribute can be specified explicitly. It is also set implicitly when enable_lom is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the override_enable_lom flag or "false" to deactivate/unset it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get override_enable_lom from the member
 my $override = $grid_member->override_enable_lom();
 #Modify override_enable_lom
 $grid_member->override_enable_lom("true");

=back

=back

=head2 override_lom_users( )

=over

The override_lom_users attribute controls whether the lom_users value in the member is used, instead of the grid default.

The override_lom_users attribute can be specified explicitly. It is also set implicitly when lom_users is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the override_lom_users flag or "false" to deactivate/unset it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get override_lom_users from the member
 my $override = $grid_member->override_lom_users();
 #Modify lom_users
 $grid_member->override_lom_users("true");

=back

=back

=head2 override_dscp( )

=over

The override_dscp attribute contols whether the member DSCP value is used, instead of the Grid default.

The override_dscp attribute can be specified explicitly. It is also set implicitly when DSCP is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the override_dscp flag or "false" to deactivate/unset it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get override_dscp from the member
 my $override = $grid_member->override_dscp();
 #Modify override_dscp
 $grid_member->override_dscp("true");

=back

=back

=head2 override_enable_member_redirect( )

=over

The override_enable_member_redirect attribute controls whether the enable_member_redirect value in the member is used, instead of the grid default.

The override_enable_member_redirect attribute can be specified explicitly. It is also set implicitly when enable_member_redirect is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the override_enable_member_redirect flag or "false" to deactivate/unset it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get override_enable_member_redirect from the member
 my $override = $grid_member->override_enable_member_redirect();
 #Modify enable_member_redirect
 $grid_member->override_enable_member_redirect("true");

=back

=back

=head2 override_lan1_dscp( )

=over

The override_lan1_dscp attribute contols whether the DSCP value of the IPv4 LAN1 port is used, instead of the Grid default.

The override_lan1_dscp attribute can be specified explicitly. It is also set implicitly when DSCP is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the override_lan1_dscp flag or "false" to deactivate/unset it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get override_lan1_dscp from the member
 my $override = $grid_member->override_lan1_dscp();
 #Modify override_lan1_dscp
 $grid_member->override_lan1_dscp("true");

=back

=back

=head2 override_lan1_ipv6_dscp( )

=over

The override_lan1_ipv6_dscp attribute contols whether the DSCP value of the IPv6 LAN1 port is used, instead of the Grid default.

The override_lan1_ipv6_dscp attribute can be specified explicitly. It is also set implicitly when DSCP is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the override_lan1_ipv6_dscp flag or "false" to deactivate/unset it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get override_lan1_ipv6_dscp from the member
 my $override = $grid_member->override_lan1_ipv6_dscp();
 #Modify override_lan1_ipv6_dscp
 $grid_member->override_lan1_ipv6_dscp("true");

=back

=back

=head2 override_lan2_dscp( )

=over

The override_lan2_dscp attribute contols whether the DSCP value of the IPv4 LAN2 port is used, instead of the Grid default.

The override_lan2_dscp attribute can be specified explicitly. It is also set implicitly when DSCP is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the override_lan2_dscp flag or "false" to deactivate/unset it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get override_lan2_dscp from the member
 my $override = $grid_member->override_lan2_dscp();
 #Modify override_lan2_dscp
 $grid_member->override_lan2_dscp("true");

=back

=back

=head2 override_lan2_ipv6_dscp( )

=over

The override_lan2_ipv6_dscp attribute contols whether the DSCP value of the IPv6 LAN2 port is used, instead of the Grid default.

The override_lan2_ipv6_dscp attribute can be specified explicitly. It is also set implicitly when DSCP is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the override_lan2_ipv6_dscp flag or "false" to deactivate/unset it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get override_lan2_ipv6_dscp from the member
 my $override = $grid_member->override_lan2_ipv6_dscp();
 #Modify override_lan2_ipv6_dscp
 $grid_member->override_lan2_ipv6_dscp("true");

=back

=back

=head2 override_mgmt_dscp( )

=over

The override_mgmt_dscp attribute contols whether the DSCP value of the IPv4 MGMT port is used, instead of the Grid default.

The override_mgmt_dscp attribute can be specified explicitly. It is also set implicitly when DSCP is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the override_mgmt_dscp flag or "false" to deactivate/unset it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get override_mgmt_dscp from the member
 my $override = $grid_member->override_mgmt_dscp();
 #Modify override_mgmt_dscp
 $grid_member->override_mgmt_dscp("true");

=back

=back

=head2 override_mgmt_ipv6_dscp( )

=over

The override_mgmt_ipv6_dscp attribute contols whether the DSCP value of the IPv6 MGMT port is used, instead of the Grid default.

The override_mgmt_ipv6_dscp attribute can be specified explicitly. It is also set implicitly when DSCP is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the override_mgmt_ipv6_dscp flag or "false" to deactivate/unset it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get override_mgmt_ipv6_dscp from the member
 my $override = $grid_member->override_mgmt_ipv6_dscp();
 #Modify override_mgmt_ipv6_dscp
 $grid_member->override_mgmt_ipv6_dscp("true");

=back

=back

=head2 override_node1_mgmt_dscp( )

=over

The override_node1_mgmt_dscp attribute contols whether the DSCP value of the IPv4 MGMT port on node 1 of an HA grid member is used, instead of the Grid default.

The override_node1_mgmt_dscp attribute can be specified explicitly. It is also set implicitly when DSCP is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the override_node1_mgmt_dscp flag or "false" to deactivate/unset it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get override_node1_mgmt_dscp from the member
 my $override = $grid_member->override_node1_mgmt_dscp();
 #Modify override_node1_mgmt_dscp
 $grid_member->override_node1_mgmt_dscp("true");

=back

=back

=head2 override_node1_mgmt_ipv6_dscp( )

=over

The override_node1_mgmt_ipv6_dscp attribute contols whether the DSCP value of the IPv6 MGMT port on node 1 of an HA grid member is used, instead of the Grid default.

The override_node1_mgmt_ipv6_dscp attribute can be specified explicitly. It is also set implicitly when DSCP is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the override_node1_mgmt_ipv6_dscp flag or "false" to deactivate/unset it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get override_node1_mgmt_ipv6_dscp from the member
 my $override = $grid_member->override_node1_mgmt_ipv6_dscp();
 #Modify override_node1_mgmt_ipv6_dscp
 $grid_member->override_node1_mgmt_ipv6_dscp("true");

=back

=back

=head2 override_node2_mgmt_dscp( )

=over

The override_node2_mgmt_dscp attribute contols whether the DSCP value of the IPv4 MGMT port on node 2 of an HA grid member is used, instead of the Grid default.

The override_node2_mgmt_dscp attribute can be specified explicitly. It is also set implicitly when DSCP is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the override_node2_mgmt_dscp flag or "false" to deactivate/unset it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get override_node2_mgmt_dscp from the member
 my $override = $grid_member->override_node2_mgmt_dscp();
 #Modify override_node2_mgmt_dscp
 $grid_member->override_node2_mgmt_dscp("true");

=back

=back

=head2 override_node2_mgmt_ipv6_dscp( )

=over

The override_node2_mgmt_ipv6_dscp attribute contols whether the DSCP value of the IPv6 MGMT port on node 2 of an HA grid member is used, instead of the Grid default.

The override_node2_mgmt_ipv6_dscp attribute can be specified explicitly. It is also set implicitly when DSCP is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the override_node2_mgmt_ipv6_dscp flag or "false" to deactivate/unset it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get override_node2_mgmt_ipv6_dscp from the member
 my $override = $grid_member->override_node2_mgmt_ipv6_dscp();
 #Modify override_node2_mgmt_ipv6_dscp
 $grid_member->override_node2_mgmt_ipv6_dscp("true");

=back

=back

=head2 override_ntp_kod( )

=over

The override_ntp_kod attribute controls whether the ntp_kod value in the member is used, instead of the Grid default.

The override_ntp_kod attribute can be specified explicitly. It is also set implicitly when ntp_kod is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the override_ntp_kod flag or "false" to deactivate it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get override_ntp_kod from the member
 my $override = $grid_member->override_ntp_kod();
 #Modify override_ntp_kod
 $grid_member->override_ntp_kod("true");

=back

=back

=head2 override_syslog_backup_servers( )

=over

The override_syslog_backup_servers attribute controls whether the syslog_backup_servers value for the Member is used, instead of the Grid default.

The override_syslog_backup_servers attribute can be specified explicitly. It is also set implicitly when syslog_backup_servers is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify 'true' to set the override_syslog_backup_servers flag or 'false' to deactivate/unset it. The default value is 'false'.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #get override_syslog_backup_servers of member
 my $override_syslog_backup_servers = $grid_member->override_syslog_backup_servers();

 #modify override_syslog_backup_servers
 $grid_member->override_syslog_backup_servers('true');

=back

=back

=head2 override_threshold_traps( )

=over

The override_threshold_traps attribute controls whether the threshold_traps value in the member is used, instead of the grid default.

The override_threshold_traps attribute can be specified explicitly. It is also set implicitly when threshold_traps is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the override_threshold_traps flag or "false" to deactivate/unset it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get override_threshold_traps of member
 my $override_threshold_traps = $grid_member->override_threshold_traps();
 #Set override_threshold_traps
 $grid_member->override_threshold_traps("true");

=back

=back

=head2 override_trap_notifications( )

=over

The override_trap_notifications attribute controls whether the trap_notifications value in the member is used, instead of the grid default.

The override_trap_notifications attribute can be specified explicitly. It is also set implicitly when trap_notifications is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the override_trap_notifications flag or "false" to deactivate/unset it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get override_trap_notifications of member
 my $override_trap_notifications = $grid_member->override_trap_notifications();
 #Set override_trap_notifications
 $grid_member->override_trap_notifications("true");

=back

=back

=head2 passive_ha_arp_enabled( )

=over

Use this method to set or retrieve the ARP protocol setting on the passive node of an HA pair. If you do not specify a value, the default value is "false". You can only set this value to "true" if the member is an HA pair.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the passive_ha_arp_enabled flag or "false" to deactivate/unset it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get member passive_ha_arp_enabled
 my $passive_ha_arp_enabled = $grid_member->passive_ha_arp_enabled();
 #Modify member passive_ha_arp_enabled
 $grid_member->passive_ha_arp_enabled("true");

=back

=back

=head2 platform( )

=over

Use this method to set or retrieve the platform type of a grid member. If you do not specify a value, the default value is "Infoblox".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid value is one of either "Infoblox", "Cisco", "Riverbed", or "VNIOS".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get member platform
 my $platform = $grid_member->platform();
 #Modify node 2 hardware type
 $grid_member->platform("Cisco");

=back

=back

=head2 prefer_resolver( )

=over

Use this method to set or retrieve the preferred name server of the grid member. The grid member sends queries to this name server first.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid values are L<Infoblox::DNS::Nameserver|Infoblox::DNS::Nameserver> object and L<Infoblox::DNS::Member|Infoblox::DNS::Member> object.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get preferred resolver
 my $prefer_resolver = $grid_member->prefer_resolver();
 #Modify preferred resolver
 my $member1 = Infoblox::DNS::Member->new(
     name           => $host_name,
     ipv4addr       => $host_ip,
     stealth        => "false",
     lead           => "false",
     grid_replicate => "false"
 );
 $grid_member->prefer_resolver($member1);
 #Undef prefer resolver
 $grid_member->prefer_resolver(undef);

=back

=back

=head2 pre_provisioning( )

=over

Use this method to set or retrieve the pre-provisioned Grid member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid value is an L<Infoblox::Grid::Member::PreProvisioning|Infoblox::Grid::Member::PreProvisioning> object.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get PreProvisioning grid Member
 my $pp = $grid_member->pre_provisioning();
 #Modify PreProvisioning grid Member
 my $hw = Infoblox::Grid::Member::PreProvisioning::Hardware->new(
    hwtype          => 'IB-4010',
    hwmodel         => 'Rev1',
 );

 my $pp = Infoblox::Grid::Member::PreProvisioning->new(
    hardware_info   => [$hw],
    license         => ['dns', 'dhcp'],
 );
 $grid_member->pre_provisioning($pp);

=back

=back

=head2 preserve_if_owns_delegation( )

=over

Use this method to set or retrieve the preserve_if_owns_delegation attribute. If you do not specify a value, the default value is "false".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the preserve_if_owns_delegation flag or "false" to deactivate/unset it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get member preserve_if_owns_delegation
 my $preserve_if_owns_delegation  = $grid_member->preserve_if_owns_delegation ();
 #Modify member preserve_if_owns_delegation
 $grid_member->preserve_if_owns_delegation ("true");

=back

=back

=head2 query_comm_string( )

=over

Use this method to set or retrieve the Simple Network Management Protocol (SNMP) query community string that the SNMP management system must send together with its queries to the grid member. An SNMP community string is a text string that acts as a password. It is used to authenticate messages that are sent between the management station (the SNMP manager) and the grid member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Text with the Simple Network Management Protocol (SNMP) query community string with a maximum of 50 bytes. Default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get query community string
 my $query_comm_string = $grid_member->query_comm_string();
 #Modify query community string
 $grid_member->query_comm_string("test");
 #Undef query communication string
 $grid_member->query_comm_string(undef);

=back

=back

=head2 remote_console_access( )

=over

Use this method to set or retrieve the remote_console support access flag of a grid member. When you enable remote console access, a client can access the device using a Secure Shell (SSH) connection.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the remote_console_access flag or "false" to deactivate/unset it. The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get remote console access flag
 my $remote_console_access = $grid_member->remote_console_access();
 #Modify remote console access flag
 $grid_member->remote_console_access("true");
 #Undef remote console access flag
 $grid_member->remote_console_access(undef);

=back

=back

=head2 router_ID( )

=over

Use this method to set or retrieve the virtual router ID of an HA grid member. Required only when the member is an HA pair.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Number with the router identification. Default value is undefined. Valid values should be between 1 and 255

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get router ID
 my $router_ID = $grid_member->router_ID();
 #Modify router ID
 $grid_member->router_ID("34");

=back

=back

=head2 search_domains( )

=over

Use this method to set or retrieve the Search Domain Group, which is a group of domain names that the Infoblox device can add to partial queries that do not specify a domain name. Note that you can set this parameter only when prefer_resolver or alternate_resolver is set.

=over

=item B<Parameter>

Valid value is a reference to an array of strings.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

=item B<Example>

 #Get search_domains
 my $search_domains = $grid_member->search_domains();
 #Modify search_domains
 $grid_member->search_domains(["domain1.com", "domain2.com"]);

=back

=back

=head2 service_status( )

=over

Use this method to retrieve the service status list of a grid member.

=over

=item B<Returns>

On retrieval, the member returns an array reference that contains  L<Infoblox::Grid::Member::ServiceStatus|Infoblox::Grid::Member::ServiceStatus> objects.

=item B<Example>

 #Get the service status list
 my $services_list = $grid_member->service_status();

=back

=back

=head2 service_type_configuration( )

=over

Use this method to set or retrieve the configuration option for the member service type.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is one of the following: "ALL_V4", "ALL_V6" or "CUSTOM".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 # Get the value of service_type_configuration
 my $service_type_configuration = $grid_member->service_type_configuration();
 # Modify service_type_configuration
 $grid_member->service_type_configuration("ALL_V6");

=back

=back

=head2 snmp_admin( )

=over

Use this method to set or retrieve the Simple Network Management Protocol (SNMP) admin object of a grid member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid value is an L<Infoblox::Grid::SNMP::Admin|Infoblox::Grid::SNMP::Admin> object.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get SNMP admin
 my $snmp_admin = $grid_member->snmp_admin();
 #Modify SNMP admin
 my $snmp_admin_obj = Infoblox::Grid::SNMP::Admin->new(
     sysContact_node1  => "Somebody",
     sysDescr_node1    => "SunOS noc1 5.6 Generic_105181-03 sun4u",
     sysLocation_node1 => "Infoblox Headquarter",
     sysName_node1     => "noc1"
 );
 $grid_member->snmp_admin($snmp_admin_obj);
 #Undef snmp admin
 $grid_member->snmp_admin(undef);

=back

=back

=head2  snmpv3_query_users( )

=over

Use this method to set or retrieve the SNMPv3 user setting at the grid level.

=over

=item B<Parameter>

Valid value is a reference to the list of L<Infoblox::Grid::SNMP::User> objects.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

=item B<Example>

 #Get snmpv3_query_users field
 my $snmpv3_users = $gridmember->snmpv3_query_users();
 my $user = $$snmpv3_users[0];
 #Set snmpv3_query_users field
 $gridmember->snmpv3_query_users([$user1, $user2]);

=back

=back

=head2 static_routes( )

=over

Use this method to set or retrieve the static routes list of a grid member. This list contains the static routes of a grid member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid value is an array reference that contains  L<Infoblox::Grid::Member::StaticRoute|Infoblox::Grid::Member::StaticRoute> object(s).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get static routes list
 my $static_routes = $grid_member->static_routes();
 #Modify static routes list
 my $route = Infoblox::Grid::Member::StaticRoute->new(
    "network" => "192.168.2.0/24",
    "gateway" => "192.168.1.1",
 );
 $grid_member->static_routes([$route]);

=back

=back

=head2 support_access( )

=over

Use this method to set or retrieve the support access flag of a grid member. This flag enables a Secure Shell (SSH) daemon that only Infoblox Technical Support can access to perform troubleshooting at the grid member level.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the remote_console_access flag or "false" to deactivate/unset it. The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get support access flag
 my $support_access = $grid_member->support_access();
 #Modify support access flag
 $grid_member->support_access("true");
 #Undef support access
 $grid_member->support_access(undef);

=back

=back

=head2 support_access_info( )

=over

Use this method to retrieve the information string for support access.

=over

=item B<Parameter>

None.

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get support_access_info
 my $support_access_info = $grid_member->support_access_info();

=back

=back

=head2 syslog_proxy_tcp_port( )

=over

Use this method to set or retrieve the Transmission Control Protocol (TCP) listening port for syslog proxy.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

TCP port number. Default value is 514. Valid values should be between 1 and 65535.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get syslog proxy tcp port
 my $syslog_proxy_tcp_port = $grid_member->syslog_proxy_tcp_port();
 #Modify syslog proxy tcp port
 $grid_member->syslog_proxy_tcp_port(514);

=back

=back

=head2 syslog_proxy_udp_port( )

=over

Use this method to set or retrieve the User Datagram Protocol (UDP) listening port for syslog proxy.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

UDP port number. Default value is 514. Valid values should be between 1 and 65535.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get syslog proxy udp port
 my $syslog_proxy_udp_port = $grid_member->syslog_proxy_udp_port();
 #Modify syslog proxy udp port
 $grid_member->syslog_proxy_udp_port(514);

=back

=back

=head2 syslog_size( )

=over

Use this method to set or retrieve the grid member syslog rotation size in megabytes.

=over

=item B<Parameter>

Valid value is between 10 and 300.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get syslog_size
 my $syslog_size = $obj->syslog_size();
 #Modify syslog_size
 $obj->syslog_size(100);

=back

=back

=head2 syslog_backup_servers( )

=over

Use this method to set or retrieve an array that contains syslog backup server settings for a Grid member.

Setting this method to a defined value implicitly sets the override_syslog_backup_servers method to 'true'. Setting the parameter to undefined causes the appliance to use the Grid default and automatically resets the override_syslog_backup_servers attribute to 'false'.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid value is an array reference that contains L<Infoblox::Grid::SyslogBackupServer|Infoblox::Grid::SyslogBackupServer> objects.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #get syslog_backup_servers value
 my $servers = $grid_member->syslog_backup_servers();

 #modify syslog_backup_servers value
 $grid_member->syslog_backup_servers([$server1, $server2]);

=back

=back

=head2 syslog_server( )

=over

Use this method to set or retrieve the syslog server of a grid member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid value is an array reference that contains L<Infoblox::Grid::SyslogServer|Infoblox::Grid::SyslogServer> object(s).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get syslog server
 my $syslog_server = $grid_member->syslog_server();
 #Modify syslog server
 my $syslog1 = Infoblox::Grid::SyslogServer->new(
     ipv4addr => "44.44.44.44",
     severity => "debug",
 );
 my $syslog2 = Infoblox::Grid::SyslogServer->new(
     ipv4addr => "55.55.55.55",
     severity => "debug",
 );

 $grid_member->syslog_server([$syslog1, $syslog2]);
 #Undef syslog server
 $grid_member->syslog_server(undef);

=back

=back

=head2 time_zone( )

=over

Use this method to set or retrieve the time zone of the grid member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The UTC string that represents the time zone. For example "(UTC - 5:00) Eastern Time (US and Canada)". Default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get time zone
 my $time_zone = $grid_member->time_zone();
 #Modify time zone
 $grid_member->time_zone("(UTC - 5:00) Eastern Time (US and Canada)");
 #Undef time zone
 $grid_member->time_zone(undef);

=back

=back

=head2 threshold_traps( )

=over

Use this method to retrieve the reference to the list of threshold traps. Each element in the list is a reference to the Infoblox::Grid::SNMP::ThresholdTrap object. If the member inherits traps from the grid, the threshold_traps value is undefined.

Setting this method to a defined value implicitly sets the override_threshold_traps method to "true". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_threshold_traps attribute to "false".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

List of Infoblox::Grid::SNMP::ThresholdTrap objects.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get threshold traps
 my $threshold_traps = $member->threshold_traps();
 #Modify threshold traps
 my $threshold_traps = $member->threshold_traps();
 foreach(@$threshold_traps){if $_->trap_name() eq 'Rootfs'; $_->trap_reset=60;} #Change value for 'Rootfs' trap
 $grid->threshold_traps($threshold_traps);
 $session->modify($member);

=back

=back

=head2 traffic_capture( )

=over

Use this method to control traffic capture for the specified member. Note that when you use this method, the object MUST be retrieved through a get or search call, or created with an add call.

=over

=item B<Parameter>

The method accepts an L<Infoblox::Grid::Member::Capture::Control|Infoblox::Grid::Member::Capture::Control> object as a parameter.

=item B<Returns>

When passing a capture control object as a parameter, the method returns true if the specified traffic control operation succeeds. It returns false when the operation fails.

If invoked without a parameter, the method returns a L<Infoblox::Grid::Member::Capture::Status|Infoblox::Grid::Member::Capture::Status> object that describes the current traffic capture status.

Please see the status and control objects for usage examples.

=back

=back

=head2 trap_comm_string( )

=over

Use this method to set or retrieve the Simple Network Management Protocol (SNMP) trap community string of the grid member. An SNMP trap community string is a text string that acts as a password. It is used to authenticate messages that are sent between the grid member and the SNMP management systems.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Text with the Simple Network Management Protocol (SNMP) trap community, with a maximum of 50 bytes. Default value is undefined. To undefine trap_comm_string we also need to undefine "trap_receiver" attribute.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get trap community string
 my $trap_comm_string = $grid_member->trap_comm_string();
 #Modify trap community string
 $grid_member->trap_comm_string("trap_string");

=back

=back

=head2 trap_notifications( )

=over

Use this method to configure trap notifications. Each element in the list is a reference to the Infoblox::Grid::SNMP::TrapNotification object. If the trap_notifications value is undefined the member inherits trap notifications from the grid.

Explicitly setting this method to a defined value implicitly sets the override_trap_notifications method to "true". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_trap_notifications attribute to "false".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Reference to a list of Infoblox::Grid::SNMP::TrapNotification objects. The default value is a reference to a list of all trap notifications.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get a reference to a trap notifications array
 my $trap_notifications = $member->trap_notifications();
 #Modify trap notifications
 my $notifications = $member->trap_notifications();
 foreach(@$notifications){if $_->trap_type() eq 'CPU'; $_->enable_email="true";} #Change value for 'CPU' trap
 $member->trap_notifications($notifications);
 $session->modify($member);

=back

=back

=head2 trap_receiver( )

=over

Use this method to set or retrieve the Simple Network Management Protocol (SNMP) trap receivers of a grid member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid value is an array reference that contains IPv4 addresses and L<Infoblox::Grid::SNMP::TrapReceiver> objects. Default value is undefined. To undefine trap_receiver, you must also undefine the "trap_comm_string" attribute.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get trap receiver
 my $trap_receiver = $grid_member->trap_receiver();
 #Modify trap receiver (SNMPv2)
 $grid_member->trap_receiver(["10.0.0.10"]);
 #SNMPv3 trap receivers
 my $receiver1 = Infoblox::Grid::SNMP::TrapReceiver->new( ip_addr => "19.20.21.22", user => $user);
 $gridmember->trap_receiver([$receiver1]);

=back

=back

=head2 upgrade_group( )

=over

Use this method to set or retrieve the name of the upgrade group to which this Grid member belongs.

=over

=item B<Parameter>

Valid value is a string representing the upgrade group name.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get upgrade_group
 my $upgrade_group = $obj->upgrade_group();
 #Modify upgrade_group
 $obj->upgrade_group("group2");

=back

=back

=head2 use_v4_vrrp( )

=over

Use this method to switch between VRRPv4 and VRRPv6.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to use VRRPv4 or "false" to use VRRPv6.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get use_v4_vrrp
 my $use_v4_vrrp = $obj->use_v4_vrrp();
 #Modify use_v4_vrrp
 $obj->use_v4_vrrp("false");

=back

=back

=head2 vpn_on_mgmt( )

=over

Use this method to set or retrieve the VPN services on the MGMT port of a grid member that is a single appliance.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

Note that node1_vpn_on_mgmt, node2_vpn_on_mgmt and vpn_on_mgmt share the value; setting any of them will have the same effect.

=over

=item B<Parameter>

Specify "true" to set the vpn_on_mgmt flag or "false" to deactivate/unset it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get VPN on MGMT port flag
 my $vpn_on_mgmt = $grid_member->vpn_on_mgmt();
 #Modify VPN on MGMT port flag
 $grid_member->vpn_on_mgmt("false");

=back

=back

=head2 vlan_id( )

=over

Use this method to set or retrieve the VLAN ID of a grid member.

=over

=item B<Parameter>

Valid value is an unsigned integer between 1 and 4095 inclusive. The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get attribute value
 my $attr = $grid_member->vlan_id();
 #Modify attribute value
 $grid_member->vlan_id(10);

=back

=back


=head2 create_token( )

=over

Use this function to create the authorization token string for each physical node of the pre-provisioned member.

=over

=item B<Parameter>

None

=item B<Returns>

The method returns a reference to an array of L<Infoblox::Grid::Member::PNodeToken|Infoblox::Grid::Member::PNodeToken> objects.

=item B<Example>

 my $tokens = $grid_member->create_token();

=back

=back

=head2 read_token( )

=over

Use this function to read the authorization token string for each physical node of the pre-provisioned member.

=over

=item B<Parameter>

None

=item B<Returns>

The method returns a reference to an array of L<Infoblox::Grid::Member::PNodeToken|Infoblox::Grid::Member::PNodeToken> objects.
If tokens were not created previously, or have already expired, an empty array will be returned.

=item B<Example>

 my $tokens = $grid_member->read_token();

=back

=back


=head1 SAMPLE CODE

The following sample code demonstrates the different functions that can be applied to an object such as add, get, modify, search and remove. This sample also includes error handling for the operations.

B<#Preparation prior to getting and modifying a grid member object>

 use strict;
 use Infoblox;

 #refers to Infoblox Appliance IP address
 my $host_ip = "192.168.1.2";

 #Create a session to the Infoblox appliance

 my $session = Infoblox::Session->new(
     master   => $host_ip,
     username => "admin",
     password => "infoblox"
 );
 unless ($session) {
        die("Construct session failed: ",
                Infoblox::status_code() . ":" . Infoblox::status_detail());
 }
 print "Session created successfully\n";

 my $sysserv1 = Infoblox::Grid::SyslogServer->new(
     ipv4addr => "7.7.7.7"
 );
 unless ($sysserv1) {
        die("Construct sysserv1 failed: ",
                Infoblox::status_code() . ":" . Infoblox::status_detail());
 }
 print "Sysserv1 created successfully\n";

B<#Create a grid member object>

 my $grid_member = Infoblox::Grid::Member->new(
     name          => "hostname.com",
     ipv4addr      => "3.0.0.2",
     mask          => "255.0.0.0",
     gateway       => "3.0.0.1",
     syslog_server => [$sysserv1],
     comment       => "Script Generated"
     );
 unless ($grid_member) {
        die("Construct grid member object failed: ",
                Infoblox::status_code() . ":" . Infoblox::status_detail());
 }
 print "Grid member object created successfully\n";

 #Adding the member object to appliance through session
 my $response = $session->add( $grid_member );

 unless ($response) {
     die("Add grid member failed: ",
            $session->status_code() . ":" . $session->status_detail());
 }
 print"Grid member added successfully \n";

B<#Search for a grid member object>

  my @retrieved_objs = $session->search(
      object => "Infoblox::Grid::Member",
      name   => ".*\\.com");
  my $object = $retrieved_objs[0];

  unless ($object) {
         die("Search grid member object failed: ",
                 $session->status_code() . ":" . $session->status_detail());
  }
  print "Search grid member object found at least 1 matching entry\n";

B<#Get and modify the member object>

 #Get grid member through session
 my @retrieved_objs = $session->get(
     object => "Infoblox::Grid::Member",
     name   => "hostname.com"
     );
 my $grid_member = $retrieved_objs[0];

 unless ($grid_member) {
     die("Get grid member object failed: ",
            $session->status_code() . ":" . $session->status_detail());
 }
 print"Get grid member successful \n";

 # Modify one of the attributes of selected grid member.

 $grid_member->comment("Modified member object");

 #Applying the changes
 $session->modify($grid_member)
    or die("Modify grid member failed",
             $session->status_code() . ":" . $session->status_detail());
 print"Grid member modified successfully \n";

B<#Remove the grid member object>

 #Get grid member through session
 my @retrieved_objs = $session->get(
     object => "Infoblox::Grid::Member",
     name   => "hostname.com"
     );
 my $desired_grid_member = $retrieved_objs[0];

 unless ($desired_grid_member) {
     die("Get grid member object failed: ",
            $session->status_code() . ":" . $session->status_detail());
 }
 print"Get grid member successful \n";

 #Submit the object for removal
 $session->remove( $desired_grid_member )
     or die("Remove grid member failed",
            $session->status_code() . ":" . $session->status_detail());
 print"Grid member removed successfully \n";

 ####PROGRAM ENDS####

=head1 AUTHOR

Infoblox Inc. L<http://www.infoblox.com/>

=head1 SEE ALSO

L<Infoblox::Grid|Infoblox::Grid>, L<Infoblox::Grid::NTPKey|Infoblox::Grid::NTPKey>, L<Infoblox::Grid::SNMP::Admin|Infoblox::Grid::SNMP::Admin>, L<Infoblox::Grid::SyslogServer|Infoblox::Grid::SyslogServer>, L<Infoblox::Session|Infoblox::Session>, L<Infoblox::Grid::NamedACL|Infoblox::Grid::NamedACL>, L<Infoblox::Grid::SyslogBackupServer|Infoblox::Grid::SyslogBackupServer>
L<Infoblox::Grid::Member::OSPF|Infoblox::Grid::Member::OSPF>,L<Infoblox::Grid::LOM::User|Infoblox::Grid::LOM::User>, L<Infoblox::DNS::Member|Infoblox::DNS::Member>, L<Infoblox::DNS::Nameserver|Infoblox::DNS::Nameserver>,

=head1 COPYRIGHT

Copyright (c) 2017 Infoblox Inc.

=cut
