=head1 NAME

Infoblox::Grid::Member::License - License object.

=head1 DESCRIPTION

Licenses are pre-installed on an Infoblox device according to the software packages ordered at the time of purchase. You can upgrade an Infoblox device with the Keystone license. Contact Infoblox Technical Support to get the Keystone license and install it on the device.

=head1 CONSTRUCTOR

 my $license = Infoblox::Grid::Member::License->new(
     key  => $string,    #Required
 );

=head1 SESSION METHODS

This section describes all the methods in the Infoblox::Session module that you can apply to a License object.

=head2 Infoblox::Session->add( )

=over

Use this method to add a License object to the Infoblox device. See L<Infoblox::Session-E<gt>add()|Infoblox::Session/add()/> for parameters and return values.

=over

=item B<Example>

 #Construct an object
 my $license = Infoblox::Grid::Member::License->new(
     key  => "EQAAAIMhrdkGjSnnmBlgQSA14b16"
 );

 # Submit for addition
 my $response = $session->add( $license );

=back

=back

=head2 Infoblox::Session->get( )

=over

Use this method to retrieve the existing objects from an Infoblox appliance. See L<Infoblox::Session-E<gt>get()|Infoblox::Session/get()/> for parameters and return values.

=over

=item B<Key Reference>

 Apply the following attributes to search the License object(s):

     "type"  - Optional. The license type.
     "limit" - Optional. The limitation of license.
     "key"   - Optional. The license string.

=item B<Example>

 my $retrieved_objs = $session->get(object => "Infoblox::Grid::Member::License");

=back

=back

=head2 Infoblox::Session->search( )

=over

Use this method to retrieve the existing objects from an Infoblox appliance. See L<Infoblox::Session-E<gt>search()|Infoblox::Session/search()/> for parameters and return values.

=over

=item B<Key Reference>

 Apply the following attributes to search the License object(s):

     "type"  - Optional. The license type.
     "limit" - Optional. The limitation of license.
     "key"   - Optional. The license string.

=item B<Example>

 my @retrieved_objs = $session->search(
     object => "Infoblox::Grid::Member::License",
     type   => "DNS"
 );

=back

=back

=head2 Infoblox::Session->remove( )

=over

Use this method to remove a License object from the Infoblox device. See L<Infoblox::Session-E<gt>remove()|Infoblox::Session/remove()/> for parameters and return values.

=over

=item B<Example>

 # Remove the object
 my $response = $session->remove( $license );

=back

=back

=head2 Infoblox::Grid::Member->node1_licenses( ) / Infoblox::Grid::Member->node2_licenses( )

=over

Use this function to retrieve the licenses of a specific Infoblox grid member.

=over

=item B<Example>

 #Retrieve the licenses from a grid member
 my $licenses = $grid_member->node1_licenses();

=back

=back

=head1 METHODS

This section describes all the methods that you can use to set or retrieve the attribute values of a License object.

=head2 expiration( )

=over

Use this method to retrieve the license expiration timestamp. This is a read-only attribute.

=over

=item B<Parameter>

None

=item B<Returns>

The method returns the number of seconds elapsed since January 1, 1970, in UTC format.

=item B<Example>

 #Get expiration value
 my $expiration = $object->expiration();

=back

=back

=head2 expiration_status( )

=over

Use this method to retrieve the license expiration status. This is a read-only attribute.

=over

=item B<Parameter>

None

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get expiration_status value
 my $expiration_status = $object->expiration_status();

=back

=back

=head2 key( )

=over

Use this method to set or retrieve the license key.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify the string with the license key of the device.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get key
 my $key = $license->key();

 #Modify key
 $license->key("EQAAAKsmItQcEWiFb6csgab2VeQ7");

=back

=back

=head2 kind( )

=over

Use this method to retrieve the overall type of license. This is a read-only attribute.

=over

=item B<Parameter>

None.

=item B<Returns>

The method returns the attribute value. Valid values are:

 "Static"  - The overall license type is static license.

 "Dynamic" - The overall license type is dynamic license.

=item B<Example>

 #Get the overall type of license
 my $kind = $license->kind();

=back

=back

=head2 hwid( )

=over

Use this method to retrieve the hardware ID of the physical node on which the license is installed. This is a read-only attribute.

=over

=item B<Parameter>

None

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get the hardware ID
 my $hwid = $license->hwid();

=back

=back

=head2 limit( )

=over

Use this method to retrieve the license limit value. This is a read-only attribute.

=over

=item B<Parameter>

None

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get limit value
 my $limit = $object->limit();

=back

=back

=head2 limit_context( )

=over

Use this method to retrieve the context of the license limit. This is a read-only attribute.

=over

=item B<Parameter>

None

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get limit_context value
 my $limit_context = $object->limit_context();

=back

=back

=head2 type( )

=over

Use this method to retrieve the type of license.

=over

=item B<Returns>

The method returns the attribute value. Valid values are:

 "AnyCast"                   - Enables the AnyCast services.

 "Cloud Network Automation"  - Enable cloud functionality for the GUI.

 "Cloud Platform"            - Enable cloud API service on the Cloud Platform Appliance.

 "DNSCacheAcceleration"      - Enables the DNS Cache Acceleration service.

 "DDI Trial"                 - Enables the DDI Trial mode.

 "DHCP"                      - Enables the Dynamic Host Configuration Protocol (DHCP) service.

 "Discovery"                 - Enables the Discovery service.

 "DNS"                       - Enables the Domain Name System (DNS) service.

 "DNS Query Rewrite"         - Enables support for DNS Query Rewrite.

 "FireEye"                   - Enables support for FireEye zones.

 "KeystoneDVS"               - Enables Grid-based global management and reporting for Domain Name System (DNS), Dynamic Host Configuration Protocol (DHCP), and IP address management (IPAM) appliance solutions.

 "KeystoneSup"               - Enables the Grid maintenance service.

 "IF-MAP Service"            - Enables the IF-MAP service.

 "IF-MAP Federation"         - Enables support for IF-MAP Federation connectors.

 "IF-MAP Evaluation"         - Enables support for IF-MAP Evaluation.

 "IPAM Freeware"             - Enables IPAM Express.

 "LDAP"                      - Enables the Lightweight Directory Access Protocol (LDAP) service.

 "Load Balancer"             - Enables support for Load Balancer.

 "Multi-Grid Management"     - Enables Multi-Grid Management.

 "MS Management"             - Enables Microsoft Management.

 "NIOSMaintenance"           - Enables nonstop core network services such as Domain Name System (DNS), Dynamic Host Configuration Protocol (DHCP), and IP address management (IPAM).

 "OEM"                       - Enables OEM mode.

 "Query Redirection"         - Enables the Query Redirection service.

 "RADIUS"                    - Enables the RADIUS service.

 "Reporting"                 - Enables the Reporting service.

 "Response Policy Zones"     - Enables support for Response Policy zones.

 "Security Ecosystem"        - Enables support for Security Ecosystem services, such as the TAXII server.

 "Trinzic Automation Engine" - Enables the Network Automation Engine.

 "Threat Protection"         - Enables the Threat Protection service.

 "Threat Protection Update"  - Enables the Threat Protection Update service.

 "Threat Protection Software Add-On" - Enables the Threat Protection Software Add-On.

 "vNIOS"                     - Enables support for a specific vNIOS virtual appliance model.

 "Threat Analytics"          - Enables the Threat Analytics service.

 "Security Ecosystem"        - Enables the Security Ecosystem feature.

 "Flex Grid Activation"      - Allows all features to be enabled unless there is a conflict with hardware or existing enabled services.

=item B<Example>

 #Get type
 my $type = $license->type();

=back

=back


=head1 SAMPLE CODE

The following sample code demonstrates different operations that can be applied to a License object, such as create and remove an object. This sample code also includes error handling for the operations.

B<#Preparation prior to a license insertion>

 #PROGRAM STARTS: Include all the modules that will be used
 use strict;
 use Infoblox;

 #Create a session to the Infoblox device
 my $session = Infoblox::Session->new(
     master   => "192.168.1.2",
     username => "admin",
     password => "infoblox"
 );

 unless ($session) {
    die("Construct session failed: ",
        Infoblox::status_code() . ":" . Infoblox::status_detail());
 }
 print "Session created successfully\n";

B<#Add License object to Infoblox device>

 #Construct a License object

 my $license = Infoblox::Grid::Member::License->new(
     key  => "EQAAAIMhrdkGjSnnmBlgQSA14b16"
 );

 unless ($license) {
    die("Construct License object failed: ",
        Infoblox::status_code() . ":" . Infoblox::status_detail());
 }
 print "License object created successfully\n";

 #Adding the license object to Infoblox Appliance through session.
 $session->add($license)
     or die("Add License failed: ",
            $session->status_code() . ":" . $session->status_detail() . "\nPlease contact Infoblox Technical Support to get the license key and add them to the device\n");

 print "Added License to Infoblox Appliance successfully.\n";

 ####PROGRAM ENDS####

=head1 AUTHOR

Infoblox Inc. L<http://www.infoblox.com/>

=head1 SEE ALSO

L<Infoblox::Session|Infoblox::Session>

=head1 COPYRIGHT

Copyright (c) 2017 Infoblox Inc.

=cut
