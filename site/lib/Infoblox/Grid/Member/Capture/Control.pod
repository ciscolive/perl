=head1 NAME

Infoblox::Grid::Member::Capture::Control - Traffic capture control object

=head1 DESCRIPTION

You can control traffic capture for a grid member via the settings in this object.

=head1 CONSTRUCTOR

 my $control = Infoblox::Grid::Member::Capture::Control->new(
               action         => "START" | "STOP",                       # Required
               interface      => "ALL" | "HA" | "LAN1" | "LAN2" | "MGMT",# Required
               seconds_to_run => $num,                                   # Required
 );

=head1 MODULE METHODS

The following functions are available to be applied to a traffic capture control object.

=head2 Infoblox::Grid::Member->traffic_capture( )

=over

Use this function to control traffic capture for the Grid Member. See L<Infoblox::Grid::Member-E<gt>traffic_capture()|Infoblox::Grid::Member/traffic_capture()/> for parameters and return values. Note that the member object must be retrieved from the appliance in order for the traffic capture method to be available.

=over

=back

=back

=head1 METHODS

This section describes all the methods that you can use to control traffic capture for a grid member.

=head2 action( )

=over

Use this method to select the traffic capture action.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid values are "START" or "STOP".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Setting the action
   $control->action("START");

=back

=back

=head2 interface( )

=over

Use this method to specify the interface on which you capture traffic.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid values are "ALL", "HA", "LAN", "LAN2" or "MGMT".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Choosing the interface
   $control->interface("ALL");

=back

=back

=head2 seconds_to_run( )

=over

Use this method to select the number of seconds for which you want to run the traffic capture.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid value is an integer specifying the number of seconds.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Setting the capture interfal
   $control->seconds_to_run(5);

=back

=back

=head1 SAMPLE CODE

The following sample code demonstrates the different functions that can be applied to a capture control object. This sample also includes error handling for the operations.

B<#Preparation prior to traffic capture object operations>

 #PROGRAM STARTS: Include all the modules that will be used

 use strict;
 use Infoblox;

 #Create a session to the Infoblox appliance
 my $session = Infoblox::Session->new(
     master   => "192.168.1.2",
     username => "admin",
     password => "infoblox"
 );
 unless ($session) {
    die("Construct session failed: ",
        Infoblox::status_code() . ":" . Infoblox::status_detail());
 }
 print "Session created successfully\n";

B<#Start traffic capture for a member>

 # Get the grid member object.
 my $object = $session->get(
     object => "Infoblox::Grid::Member",
     name => "infoblox.localdomain",
 );

 unless ($object) {
       die("get grid member failed: ",
       $session->status_code() . ":" . $session->status_detail());
 }
 print "grid member get successful\n";

 my $capture = Infoblox::Grid::Member::Capture::Control->new(
                                                             action => 'START',
                                                             interface => 'ALL',
                                                             seconds_to_run => 2,
                                                            );
 unless ($object->traffic_capture($capture)) {
       die("traffic capture failed: ",
       $session->status_code() . ":" . $session->status_detail());
 }

 print "traffic capture started\n";

 ####PROGRAM ENDS####

=head1 AUTHOR

Infoblox Inc. L<http://www.infoblox.com/>

=head1 SEE ALSO

L<Infoblox::Session|Infoblox::Session>, L<Infoblox::Grid::Member|Infoblox::Grid::Member>

=head1 COPYRIGHT

Copyright (c) 2017 Infoblox Inc. 

=cut
