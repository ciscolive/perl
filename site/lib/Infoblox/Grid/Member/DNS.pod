=head1 NAME

Infoblox::Grid::Member::DNS - Grid Member DNS object.

=head1 DESCRIPTION

You can configure the DNS properties of a grid member, including enabling/disabling DNS services and other DNS service parameters. The service configurations of  a grid are inherited by all members. For this reason, it is recommended that you configure services at the grid level before configuring member services. When you configure DNS services at the grid level, all grid members inherit the grid-level configuration settings, unless you specifically override them for selected members.

=head1 CONSTRUCTOR

The Infoblox::Grid::Member::DNS object is automatically generated upon the successful installation of the Infoblox appliance. It does not require manual construction.

=head1 SESSION METHODS

This section describes all the methods in the Infoblox::Session module that you can apply to a grid member DNS object.

=head2 Infoblox::Session->get( )

=over

Use this method to retrieve all the matching objects from the Infoblox appliance. See L<Infoblox::Session-E<gt>get()|Infoblox::Session/get()/> for parameters and return values.

=over

=item B<Key Reference>

Apply the following attributes to get a specific grid member DNS object:

  name - Optional.   Host name in string format
  ipv4addr - Optional.   IPv4 address of the member
  ipv6addr - Optional.   IPv6 address of the member
  extattrs     - Optional. A hash reference containing extensible attributes.
  extensible_attributes - Optional. A hash reference containing extensible attributes.

=item B<Example>

  my $object   = $session->get(
     object    => "Infoblox::Grid::Member::DNS",
     name      => "infoblox.localdomain",
      );

 # get all Grid::Member::DNS objects with a given extensible attribute
 my @retrieved_objs = $session->get(
     object => "Infoblox::Grid::Member::DNS",
     extensible_attributes => { 'Site' => 'Santa Clara' });

=back

=back

=head2 Infoblox::Session->modify( )

=over

Use this method to modify an object in the Infoblox appliance. See L<Infoblox::Session-E<gt>modify()|Infoblox::Session/modify()/> for parameters and return values.

If you have applied an access control list to an object, you must restart services after you update the access control list for the changes to take effect. See L<Infoblox::Session-E<gt>restart()|Infoblox::Session/restart()/> method.

=over

=item B<Example>

   #Use this method to modify the enable_dns  property.
   $object->enable_dns("false");
   #Submit modification
   my $response = $session->modify( $object );

=back

=back

=head1 METHODS

This section describes all the methods that you can use to configure and retrieve the attribute values of the DNS properties of  a grid member.

=head2 anonymize_response_logging( )

=over

Use this method to set or retrieve the flag that indicates whether the anonymization of captured DNS responses is enabled or disabled.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify 'true' to enable anonymization of captured DNS responses or 'false' to disable it. The default value is 'false'.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get anonymize_response_logging value
 my $anonymize_response_logging = $object->anonymize_response_logging();

 #Modify anonymize_response_logging value
 $object->anonymize_response_logging('true');

=back

=back

=head2  additional_ip_list( )

=over

Use this method to add or retrieve  a list of additional  IP addresses on which DNS is enabled for a grid member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid value is an IPv4 or an IPv6 address added  to the  IP configuration  list of a grid member.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Get additional_ip_list
   $memberdns->additional_ip_list();
   #Modify additional_ip_list
   $memberdns->additional_ip_list( ["10.0.0.10"] );

=back

=back

=head2  allow_gss_tsig_zone_updates( )

=over

Use this method to enable/disable GSS-TSIG zone updates for this member. This setting overrides the grid GSS-TSIG zone update settings.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to allow GSS-TSIG zone updates for this member or "false" to disallow them. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Get allow_gss_tsig_zone_updates
   my $allow_gss_tsig_zone_updates = $memberdns->allow_gss_tsig_zone_updates( );
   #Modify allow_gss_tsig_zone_updates
   $memberdns->allow_gss_tsig_zone_updates("true");

=back

=back

=head2  allow_query( )

=over

Use this method to add or retrieve an allow_query list.

Select "allow query" to permit queries from the specified IPv4 or IPv6 addresses and networks. The list  specifies IP address(es) and/or  network(s) from which queries are allowed or denied. The appliance can also use Transaction Signature (TSIG) keys to authenticate the queries. This setting overrides the grid query settings.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid value is an L<Infoblox::Grid::NamedACL|Infoblox::Grid::NamedACL> object or an array reference  that contains IPv4/IPv6 addresses, networks and/or L<Infoblox::DNS::TSIGKey|Infoblox::DNS::TSIGKey> object(s).  To deny  queries, add "!" as a prefix to address(es) and network(s). Specify "any"  to allow queries from any  address. By default, queries are allowed from any address. Undefine the value to use the Grid::DNS level allow_query list.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Get allow_query
   $memberdns->allow_query();
   #Modify allow_query
   $memberdns->allow_query( ["any"] );

   #Specifying TSIG keys
   my $tsig_key1 = $session->gen_tsig_key();
   my $query_key = Infoblox::DNS::TSIGKey->new(
     name => "query_key1",
     key  => $tsig_key1
   );
   #Modify allow_query
   $memberdns->allow_query( [ "10.0.0.10" , "20.0.0.0/24" ,"2001::123a","2003::222/64","!"."30.0.0.30" , "!"."40.10.0.0/24","!"."2004::125b","!"."2006::34bc"] );

   #Modify allow_query to use Grid level settings
   $memberdns->allow_query(undef);
   #Use Infoblox::Grid::NamedACL
   $memberdns->allow_query($nacl);

=back

=back

=head2 allow_recursive_query( )

=over

Use this method to enable/disable responses to recursive queries.
This setting overrides grid recursive query settings.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to allow responses to recursive queries or "false" to reject recursive queries. The default value is "false". Undefine to use the Grid::DNS level allow_recursive_query setting. Note: You should also undefine the recursive_query_list list to use the Grid::DNS level settings.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Get allow_recursive_query
   my $allow_recursive_query = $memberdns->allow_recursive_query( );
   #Modify allow_recursive_query
   $memberdns->allow_recursive_query("true");

=back

=back

=head2 allow_transfer( )

=over

Use this method to allow or reject zone transfers from specified IPv4 or IPv6 addresses and networks or to allow transfers from hosts authenticated by Transaction signature (TSIG) key. This setting overrides the grid zone transfer settings.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid value is an L<Infoblox::Grid::NamedACL|Infoblox::Grid::NamedACL> object or an array reference that contains IPv4/IPv6 addresses, networks and/or  L<Infoblox::DNS::TSIGKey|Infoblox::DNS::TSIGKey> object(s). To reject zone transfers, add '!' as a prefix to IP addresses and networks. Specify "any" to allow any transfer, or undefine to use the Grid::DNS level allow_transfer list.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Getting allow_transfer
   my $memberdns = $object->allow_transfer( );
   #Modifying allow_transfer
   $memberdns->allow_transfer(["any"]);

   #Specifying TSIG keys
   my $tsig_key1 = $session->gen_tsig_key();
   my $key1 = Infoblox::DNS::TSIGKey->new(
     name => "key1",
     key  => $tsig_key1
   );
   my $key2 = Infoblox::DNS::TSIGKey->new(
     name => "tsig_xfer",
     key  => ":2xCOMPAT"
   );
   #Modifying allow_transfer
   $memberdns->allow_transfer(["10.0.0.10", $key1, "20.0.0.0/24", $key2, "2004::325f","2007::876c/64","!"."30.0.0.30", "!"."40.10.0.0/24"]);

   #Use Grid::DNS level allow_transfer list
   $memberdns->allow_transfer(undef);

   #Use Infoblox::Grid::NamedACL
   $memberdns->allow_transfer($nacl);

=back

=back

=head2 allow_update( )

=over

Use this method to allow or reject dynamic updates from specified IPv4 or IPv6 addresses, networks or from host authenticated by TSIG key. This setting overrides grid update settings.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid value is an L<Infoblox::Grid::NamedACL|Infoblox::Grid::NamedACL> object or an array reference that contains IPv4/IPv6 addresses, networks and/or L<Infoblox::DNS::TSIGKey|Infoblox::DNS::TSIGKey> object(s). To reject updates, add '!' as a prefix to IP addresses and networks. Specify "any" to allow any update, or undefine to use the Grid::DNS level allow_update list.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Getting allow_update
   $memberdns->allow_update();
   #Modifying allow_update
   $memberdns->allow_update(["any"]);

   #Creating TSIG Key object.
   my $update_key1 = $session->gen_tsig_key();
   my $up_key1 = Infoblox::DNS::TSIGKey->new(
     name => "update_key",
     key  => $update_key1
     );
   #Modifying allow_update
   $memberdns->allow_update([ $up_key1, "10.0.0.10", "20.0.0.0/24","2008::129b","!"."30.0.0.30", "!"."40.10.0.0/24","!"."2004::76bc/64"]);

   #Use Grid::DNS level allow_update list
   $memberdns->allow_update(undef);
   $memberdns->update_keys(undef);
   #Use Infoblox::Grid::NamedACL
   $memberdns->allow_update($nacl);

=back

=back

=head2 attack_mitigation( )

=over

Use this method to set or retrieve DNS attack mitigation settings for the member.

Setting this method to a defined value implicitly sets the override_attack_mitigation method to "true". Setting the parameter to undefined causes the appliance to use the Grid DNS default and automatically resets the override_attack_mitigation method to "false".

Note that when attack_mitigation is set to a defined value and override_attack_mitigation is set to "false", the last operation takes precedence. Thus the sequence $object->attack_mitigation($attack_mitigation); $object->override_attack_mitigation("false"); will set override_attack_mitigation to "false", and the sequence $object->override_attack_mitigation("false"); $object->attack_mitigation($attack_mitigation); will result in override_attack_mitigation="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is an L<Infoblox::Grid::DNS::AttackMitigation|Infoblox::Grid::DNS::AttackMitigation> object.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get attack_mitigation value
 my $attack_mitigation = $memberdns->attack_mitigation();
 #Modify attack_mitigation
 $memberdns->attack_mitigation($attack_mitigation);

=back

=back

=head2 auto_blackhole( )

=over

Use this method to set or retrieve the auto blackhole settings for the member.

Setting this method to a defined value implicitly sets the override_auto_blackhole method to "true". Setting the parameter to undefined causes the appliance to use the Grid DNS default and automatically resets the override_auto_blackhole method to "false".

Note that when auto_blackhole is set to a defined value and override_auto_blackhole is set to "false", the last operation takes precedence. Thus the sequence $object->auto_blackhole($auto_blackhole); $object->override_auto_blackhole("false"); will set override_auto_blackhole to "false", and the sequence $object->override_auto_blackhole("false"); $object->auto_blackhole($auto_blackhole); will result in override_auto_blackhole="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is an L<Infoblox::Grid::DNS::AutoBlackHole|Infoblox::Grid::DNS::AutoBlackHole> object.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get auto_blackhole value
 my $auto_blackhole = $memberdns->auto_blackhole();
 #Modify auto_blackhole
 $memberdns->auto_blackhole($auto_blackhole);

=back

=back

=head2 auto_create_a_and_ptr_for_lan2( )

=over

Use this method to enable/disable the auto-generation of A and PTR records for the LAN2 IP address, if DNS service is enabled on LAN2.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to enable the auto-generation of A and PTR records for the LAN2 IP address or "false" to disable it. Default is "true".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Getting auto_create_a_and_ptr_for_lan2
   my $auto_create_a_and_ptr_for_lan2 = $memberdns->auto_create_a_and_ptr_for_lan2( );
   #Modifying auto_create_a_and_ptr_for_lan2
   $memberdns->auto_create_a_and_ptr_for_lan2("true");

=back

=back

=head2 auto_create_a_and_ipv6ptr_for_lan2( )

=over

Use this method to enable/disable the auto-generation of AAAA and IPv6 PTR records for the LAN2 IP address, if DNS service is enabled on LAN2.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to enable the auto-generation of AAAA and IPv6 PTR records for the LAN2 IP address or "false" to disable it. Default is "true".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Getting auto_create_a_and_ipv6ptr_for_lan2
   my $auto_create_a_and_ipv6ptr_for_lan2 = $memberdns->auto_create_a_and_ipv6ptr_for_lan2( );
   #Modifying auto_create_a_and_ipv6ptr_for_lan2
   $memberdns->auto_create_a_and_ipv6ptr_for_lan2("true");

=back

=back

=head2 auto_sort_views( )

=over

Use this method to enable/disable  a grid member to automatically sort DNS views. The order of the DNS views determines the order in which the appliance checks the match lists.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to enable the automatic sorting of DNS views or "false" to disable it. Default is "false"

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Getting auto_sort_views
   $memberdns->auto_sort_views( );
   #Modifying auto_sort_views
   $memberdns->auto_sort_views("true");

=back

=back

=head2 blackhole_list( )

=over

Use this method to set or retrieve the list of IPv4 or IPv6 addresses and networks from which DNS queries are blocked. This setting overrides the grid blackhole_list.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

A valid value is an L<Infoblox::Grid::NamedACL|Infoblox::Grid::NamedACL> object or an array reference that contains IPv4/IPv6 addresses and networks. To allow queries, add '!' as the prefix to IP addresses and networks. Specify "any" to block queries or undefine the usage of Grid::DNS level blackhole_list. Note: You should also undefine the enable_blackhole list to use Grid::DNS level settings.

=item B<Returns>

When you specify a parameter and the modification succeeds, the method returns "true". When the operation fails, the method returns "false".

When you do not specify a parameter, the method returns the attribute value.

=item B<Example>

    #Getting blackhole_list
    my $blackhole_list = $memberdns->blackhole_list( );
    #Modifying blackhole_list
    $memberdns->blackhole_list(["any"]);
    #Modifying blackhole_list
    $memberdns->blackhole_list(["10.0.0.10", "20.0.0.0/24","2010::256/64","!"."2011::23cb/64","!"."30.0.0.30", "!"."40.10.0.0/24"]);
    #Use Grid::DNS level blackhole_list
    $memberdns->blackhole_list(undef);
    $memberdns->enable_blackhole(undef);
    #Use Infoblox::Grid::NamedACL
    $memberdns->blackhole_list($nacl);

=back

=back

=head2 blacklist_action( )

=over

Use this method to specify the action to perform when a domain name matches the pattern defined in a rule that is specified by the blacklist_ruleset method.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid values are "REDIRECT" or "REFUSE". The default value is "REFUSE".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

=item B<Examples>

  #Get blacklist_action
  my $blacklist_action = $memberdns->blacklist_action();
  #Modify blacklist_action
  $memberdns->blacklist_action("REDIRECT");

=back

=back

=head2 blacklist_log_query( )

=over

Use this method to set or retrieve the flag that indicates whether blacklist redirection queries are logged.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to enable logging, or "false" to disable it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Get blacklist_log_query
   my $blacklist_log_query = $memberdns->nxdomain_log_query( );
   #Modify blacklist_log_query
   $memberdns->blacklist_log_query("true");

=back

=back

=head2 blacklist_redirect_addresses( )

=over

Use this method to specify the IP addresses the appliance includes in the response it sends in place of a blacklisted IP address.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is an array of IPv4 addresses. The default value is undefined.

Setting this parameter to ["10.0.0.10", "10.0.0.20"] or [], implicitly sets the override_blacklist_redirect attribute to "true". Setting this parameter to undefined causes the appliance to use the grid-level blacklist redirection settings and automatically sets the override_blacklist_redirect attribute to "false" if "enable_blacklist_redirect" is also undefined. But if "enable_blacklist_redirect" contains a value, then the override_blacklist_redirect attribute is set to "true".

Note that when blacklist_redirect_addresses contains a valid array reference and override_blacklist_redirect is set to "false", the last operation takes precedence. Thus the sequence $memberdns->blacklist_redirect_addresses(["10.0.0.10", "10.0.0.20"]); $memberdns->override_blacklist_redirect("false"); sets override_blacklist_redirect to "false", and the sequence $memberdns->override_blacklist_redirect("false"); $memberdns->blacklist_redirect_addresses(["10.0.0.10", "10.0.0.20"]); sets override_blacklist_redirect to "true".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Get blacklist_redirect_addresses
   my $blacklist_redirect_addresses = $memberdns->blacklist_redirect_addresses( );
   #Modify blacklist_redirect_addresses
   $memberdns->blacklist_redirect_addresses(["10.0.0.10", "10.0.0.20"]);

=back

=back

=head2 blacklist_redirect_ttl( )

=over

Use this method to set or retrieve the TTL value of the synthetic DNS responses that result from blacklist redirection.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

A 32-bit integer, from 0 to 4294967295, that represents the TTL in seconds. The default value is 60.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Get blacklist_redirect_ttl
   my $blacklist_redirect_ttl = $memberdns->blacklist_redirect_ttl( );
   #Modify blacklist_redirect_ttl
   $memberdns->blacklist_redirect_ttl(60);

=back

=back

=head2 blacklist_rulesets( )

=over

Use this method to specify or retrieve L<Infoblox::DNS::Ruleset|Infoblox::DNS::Ruleset> object names assigned at the grid level for blacklist redirection.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is an array reference that contains the names of the L<Infoblox::DNS::Ruleset|Infoblox::DNS::Ruleset> objects assigned to the grid. The names must be in string format.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Get blacklist_rulesets
   my $blacklist_rulesets = $memberdns->blacklist_rulesets();
   #Modify blacklist_rulesets
   $memberdns->blacklist_rulesets(["ruleset1", "ruleset2"]);

=back

=back

=head2 bind_check_names_policy( )

=over

Use this method to set or retrieve the BIND check names policy, which indicates the action the appliance takes when it
encounters host names that do not comply with the Strict Hostname Checking policy. This method applies only if
the host name restriction policy  is set to "Strict Hostname Checking".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The allowed values of the parameter are "fail", "warn" or undefined. This indicates the desired BIND behavior in the case of
illegal hostnames. The default value is undefined, which means the appliance ignores illegal hostnames.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get bind_check_names_policy value
 my $names_policy = $memberdns->bind_check_names_policy();
 #Modify bind_check_names_policy
 $memberdns->bind_check_names_policy("warn");

=back

=back

=head2 bind_hostname_directive( )

=over

Use this method to set or retrieve the value of BIND 'hostname' directive.

Setting this method to a defined value implicitly sets the override_bind_hostname_directive method to "true". Setting the parameter to undefined causes the appliance to use the Grid DNS default and automatically resets the override_bind_hostname_directive method to "false".

Note that when bind_hostname_directive is set to a defined value and override_bind_hostname_directive is set to "false", the last operation takes precedence. Thus the sequence $object->bind_hostname_directive("HOSTNAME"); $object->override_bind_hostname_directive("false"); will set override_bind_hostname_directive to "false", and the sequence $object->override_bind_hostname_directive("false"); $object->bind_hostname_directive("true"); will result in override_bind_hostname_directive="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid values are "NONE", "HOSTNAME" and "USER_DEFINED". The default value is "NONE".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Get bind_hostname_directive
   my $bind_hostname_directive = $memberdns->bind_hostname_directive();
   #Modify bind_hostname_directive
   $memberdns->bind_hostname_directive("HOSTNAME");

=back

=back

=head2 bind_hostname_directive_fqdn( )

=over

Use this method to set or retrieve the value of BIND user-defined hostname for 'hostname' directive.

Note that to enable user-defined 'hostname' the bind_hostname_directive should be set to "USER_DEFINED".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is Fully-Qualified Domain Name (FQDN) in a string format. The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Get bind_hostname_directive_fqdn
   my $bind_hostname_directive_fqdn = $memberdns->bind_hostname_directive_fqdn();
   #Modify bind_hostname_directive_fqdn
   $memberdns->bind_hostname_directive_fqdn("foo-bar.com");

=back

=back

=head2 capture_dns_queries_on_all_domains( )

=over

Use this method to set or retrieve the flag that indicates whether the capturing of DNS queries for all domains is enabled or disabled.

Setting this method to a defined value implicitly sets the override_capture_dns_queries_on_all_domains method to "true". Setting the parameter to undefined causes the appliance to use the Grid DNS default and automatically resets the override_capture_dns_queries_on_all_domains method to "false".

Note that when capture_dns_queries_on_all_domains is set to a defined value and override_capture_dns_queries_on_all_domains is set to "false", the last operation takes precedence. Thus the sequence $object->capture_dns_queries_on_all_domains("true"); $object->override_capture_dns_queries_on_all_domains("false"); will set override_capture_dns_queries_on_all_domains to "false", and the sequence $object->override_capture_dns_queries_on_all_domains("false"); $object->capture_dns_queries_on_all_domains("true"); will result in override_capture_dns_queries_on_all_domains="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify 'true' to enable capturing of DNS queries for all domains or 'false' to disable it. The default value is 'false'.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get capture_dns_queries_on_all_domains value
 my $capture_dns_queries_on_all_domains = $object->capture_dns_queries_on_all_domains();

 #Modify capture_dns_queries_on_all_domains value
 $object->capture_dns_queries_on_all_domains('true');

=back

=back

=head2 copy_xfer_to_notify( )

=over

Use this method to enable/disable copying of the allowed IPs from zone transfer list into also-notify statement in named.conf.

=over

=item B<Parameter>

Set the parameter to "true" to enable copying of the allowed IPs from zone transfer list into also-notify statement in named.conf. Set the parameter to "false" to disable it.

The default value of the parameter is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

  # Get attribute value
  my $value = $memberdns->copy_xfer_to_notify();
  # Modify attribute value
  $memberdns->copy_xfer_to_notify('true');

=back

=back

=head2 custom_root_name_servers( )

=over

Use this method to set or retrieve the list of customized root nameserver(s). You can either select and use Internet root name servers or specify custom root name servers by providing a host name and IP address to which the Infoblox appliance can send queries.
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid value is an array reference that contains L<Infoblox::DNS::RootNameServer|Infoblox::DNS::RootNameServer> object(s).

=item B<Returns>

If you specify a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get the root nameserver list
 my $rootNS_list = $memberdns->custom_root_name_servers();
 #Modify the root nameserver list
 #Creating RootNameServer objects.
 my $rootns1 = Infoblox::DNS::RootNameServer->new(
     ipv4addr  => "4.4.4.4",
     host_name => "rns1.test.com",
     );

 my $rootns2 = Infoblox::DNS::RootNameServer->new(
     ipv4addr  => "5.5.5.5",
     host_name => "rns2.test.com",
     );

 $memberdns->custom_root_name_servers([$rootns1, $rootns2]);

=back

=back

=head2 disable_edns( )

=over

Use this method to disable or enable EDNS0 support for queries that require recursive resolution on Grid members.

Setting this method to a defined value implicitly sets the override_disable_edns method to "true". Setting the parameter to undefined causes the appliance to use the grid DNS default and automatically resets the override_disable_edns method to "false".

Note that when disable_edns is set to a defined value and override_disable_edns is set to "false", the last operation takes precedence. Thus the sequence $object->disable_edns("true"); $object->override_disable_edns("false"); will set override_disable_edns to "false", and the sequence $object->override_disable_edns("false"); $object->disable_edns("true"); will result in override_disable_edns="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to disable EDNS0 or "false" to enable it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get disable_edns flag
 my $disable_edns = $memberdns->disable_edns();
 #Modify disable_edns flag
 $memberdns->disable_edns("true");

=back

=back

=head2 dns_cache_acceleration_ttl( )

=over

Use this method to set or retrieve the minimum TTL value, in seconds, that a DNS record must have in order for it to be cached by the DNS Cache Acceleration service.

Setting this method to a defined value implicitly sets the override_dns_cache_acceleration_ttl method to "true". Setting the parameter to undefined causes the appliance to use the grid DNS default and automatically resets the override_dns_cache_acceleration_ttl method to "false".

Note that when dns_cache_acceleration_ttl is set to a defined value and override_dns_cache_acceleration_ttl is set to "false", the last operation takes precedence. Thus the sequence $object->dns_cache_acceleration_ttl(60); $object->override_dns_cache_acceleration_ttl("false"); will set override_dns_cache_acceleration_ttl to "false", and the sequence $object->override_dns_cache_acceleration_ttl("false"); $object->dns_cache_acceleration_ttl(30); will result in override_dns_cache_acceleration_ttl="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

An integer from 1 to 65000 that represents the TTL in seconds. The default value is 1.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Get dns_cache_acceleration_ttl
   my $dns_cache_acceleration_ttl = $member_dns->dns_cache_acceleration_ttl( );
   #Modify dns_cache_acceleration_ttl
   $member_dns->dns_cache_acceleration_ttl(60);

=back

=back

=head2 dns_cache_acceleration_status( )

=over

Use this method to retrieve the DNS cache acceleration status.

=over

=item B<Parameter>

None.

=item B<Returns>

The method returns the attribute value, which is one of the following: "Failed", "Inactive", "Offline", "Unknown", "Warning", or "Working".

=item B<Example>

   #Get dns_cache_acceleration_status
   my $dns_cache_acceleration_status = $member_dns->dns_cache_acceleration_status( );

=back

=back

=head2 dns_health_check_anycast_control( )

=over

Use this method to set or retrieve the flag that indicates whether the anycast failure (BFD session down) is enabled on Member failure or not.

Setting this parameter to defined value, implicitly sets the override_dns_health_check attribute to "true".
Setting this parameter to undefined causes the appliance to use the Grid-level DNS health check settings
and automatically sets the override_dns_health_check attribute to "false" if following fields are undefined:

 dns_health_check_domain_list
 dns_health_check_recursion_flag
 dns_health_check_interval
 dns_health_check_retries
 dns_health_check_timeout
 enable_dns_health_check

But if any of the fields above contains a value, then the override_dns_health_check attribute is set to "true".

Note that when dns_health_check_anycast_control contains a value and override_dns_health_check is set to "false", the last operation takes precedence. Thus the sequence $zone->dns_health_check_anycast_control("true"); $zone->override_dns_health_check("false"); sets override_dns_health_check to "false", and the sequence $zone->override_dns_health_check("false"); $zone->dns_health_check_anycast_control("true"); sets override_dns_health_check to "true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify 'true' to enable anycast failure on Member failure, and 'false' to disable it.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get dns_health_check_anycast_control value
 my $value = $object->dns_health_check_anycast_control();

 #Modify dns_health_check_anycast_control value
 $object->dns_health_check_anycast_control('true');

=back

=back

=head2 dns_health_check_domain_list( )

=over

Use this method to set or retrieve the list of domain names for the DNS health check.

Setting this parameter to defined value, implicitly sets the override_dns_health_check attribute to "true".
Setting this parameter to undefined causes the appliance to use the Grid-level DNS health check settings
and automatically sets the override_dns_health_check attribute to "false" if following fields are undefined:

 dns_health_check_recursion_flag
 dns_health_check_anycast_control
 dns_health_check_interval
 dns_health_check_retries
 dns_health_check_timeout
 enable_dns_health_check

But if any of the fields above contains a value, then the override_dns_health_check attribute is set to "true".

Note that when dns_health_check_anycast_control contains a value and override_dns_health_check is set to "false", the last operation takes precedence.
Thus the sequence $zone->dns_health_check_domain_list(['domain1.com', 'domain2.com']);
$zone->override_dns_health_check("false");
sets override_dns_health_check to "false",
and the sequence $zone->override_dns_health_check("false");
$zone->dns_health_check_domain_list(['domain1.com', 'domain2.com']);
sets override_dns_health_check to "true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is an array reference that contains desired domain names in string format.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get dns_health_check_domain_list value
 my $value = $object->dns_health_check_domain_list();

 #Modify dns_health_check_domain_list value
 $object->dns_health_check_domain_list(['foo.com', 'bar.net']);

=back

=back

=head2 dns_health_check_interval( )

=over

Use this method to set or retrieve the time interval (in seconds) for DNS health check.

Setting this parameter to defined value, implicitly sets the override_dns_health_check attribute to "true".
Setting this parameter to undefined causes the appliance to use the Grid-level DNS health check settings
and automatically sets the override_dns_health_check attribute to "false" if following fields are undefined:

 dns_health_check_domain_list
 dns_health_check_recursion_flag
 dns_health_check_anycast_control
 dns_health_check_retries
 dns_health_check_timeout
 enable_dns_health_check

But if any of the fields above contains a value, then the override_dns_health_check attribute is set to "true".

Note that when dns_health_check_interval contains a value and override_dns_health_check is set to "false", the last operation takes precedence.
Thus the sequence $zone->dns_health_check_interval("500");
$zone->override_dns_health_check("false");
sets override_dns_health_check to "false",
and the sequence $zone->override_dns_health_check("false");
$zone->dns_health_check_interval("500");
sets override_dns_health_check to "true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is an unsigned integer between 10 and 21600 that represents number of seconds between two health checks.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get dns_health_check_interval value
 my $value = $object->dns_health_check_interval();

 #Modify dns_health_check_interval value
 $object->dns_health_check_interval(2000);

=back

=back

=head2 dns_health_check_recursion_flag( )

=over

Use this method to set or retrieve the flag that indicates whether the recursive DNS health check is enabled or not.

Setting this parameter to defined value, implicitly sets the override_dns_health_check attribute to "true".
Setting this parameter to undefined causes the appliance to use the Grid-level DNS health check settings
and automatically sets the override_dns_health_check attribute to "false" if following fields are undefined:

 dns_health_check_domain_list
 dns_health_check_anycast_control
 dns_health_check_interval
 dns_health_check_retries
 dns_health_check_timeout
 enable_dns_health_check

But if any of the fields above contains a value, then the override_dns_health_check attribute is set to "true".

Note that when dns_health_check_recursion_flag contains a value and override_dns_health_check is set to "false", the last operation takes precedence.
Thus the sequence $zone->dns_health_check_recursion_flag("true");
$zone->override_dns_health_check("false");
sets override_dns_health_check to "false",
and the sequence $zone->override_dns_health_check("false");
$zone->dns_health_check_recursion_flag("true");
sets override_dns_health_check to "true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify 'true' to enable recursive DNS health check queries, and 'false' to disable it.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get dns_health_check_recursion_flag value
 my $value = $object->dns_health_check_recursion_flag();

 #Modify dns_health_check_recursion_flag value
 $object->dns_health_check_recursion_flag('true');

=back

=back

=head2 dns_health_check_retries( )

=over

Use this method to set or retrieve the number of DNS health check retries.

Setting this parameter to defined value, implicitly sets the override_dns_health_check attribute to "true".
Setting this parameter to undefined causes the appliance to use the Grid-level DNS health check settings
and automatically sets the override_dns_health_check attribute to "false" if following fields are undefined:

 dns_health_check_domain_list
 dns_health_check_recursion_flag
 dns_health_check_anycast_control
 dns_health_check_interval
 dns_health_check_timeout
 enable_dns_health_check

But if any of the fields above contains a value, then the override_dns_health_check attribute is set to "true".

Note that when dns_health_check_retries contains a value and override_dns_health_check is set to "false", the last operation takes precedence.
Thus the sequence $zone->dns_health_check_retries("4");
$zone->override_dns_health_check("false");
sets override_dns_health_check to "false",
and the sequence $zone->override_dns_health_check("false");
$zone->dns_health_check_retries("4");
sets override_dns_health_check to "true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is an unsigned integer between 1 and 10.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get dns_health_check_retries value
 my $value = $object->dns_health_check_retries();

 #Modify dns_health_check_retries value
 $object->dns_health_check_retries(2);

=back

=back

=head2 dns_health_check_timeout( )

=over

Use this method to set or retrieve the DNS health check timeout interval (in seconds).

Setting this parameter to defined value, implicitly sets the override_dns_health_check attribute to "true".
Setting this parameter to undefined causes the appliance to use the Grid-level DNS health check settings
and automatically sets the override_dns_health_check attribute to "false" if following fields are undefined:

 dns_health_check_domain_list
 dns_health_check_recursion_flag
 dns_health_check_anycast_control
 dns_health_check_interval
 dns_health_check_retries
 enable_dns_health_check

But if any of the fields above contains a value, then the override_dns_health_check attribute is set to "true".

Note that when dns_health_check_timeout contains a value and override_dns_health_check is set to "false", the last operation takes precedence.
Thus the sequence $zone->dns_health_check_timeout("4");
$zone->override_dns_health_check("false");
sets override_dns_health_check to "false",
and the sequence $zone->override_dns_health_check("false");
$zone->dns_health_check_timeout("4");
sets override_dns_health_check to "true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is an unsigned integer between 1 and 10.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get dns_health_check_timeout value
 my $value = $object->dns_health_check_timeout();

 #Modify dns_health_check_timeout value
 $object->dns_health_check_timeout(10);

=back

=back

=head2 dns64_groups( )

=over

Use this method to set or retrieve the list of DNS64 synthesis groups associated with this member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

Setting this method to a defined value implicitly sets the override_dns64 method to "true". Setting the parameter to undefined causes the appliance to use the grid DNS default and automatically resets the override_dns64 method to "false".

Note that when dns64_groups is set to a defined value and override_dns64_groups is set to "false", the last operation takes precedence. Thus the sequence $object->dns64_groups([$group1]); $object->override_dns64("false"); will set override_dns64 to "false", and the sequence $object->override_dns64("false"); $object->dns64_groups([$group1]); will result in override_dns64="true".

=over

=item B<Parameter>

Valid value is an array reference that contains L<Infoblox::Grid::DNS::DNS64Group|Infoblox::Grid::DNS::DNS64Group> objects.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get the list of DNS64 synthesis groups
 my $dns64_groups_list = $memberdns->dns64_groups();

 #Modify it
 my $group = $session->get(
                         object => "Infoblox::Grid::DNS::DNS64Group"),
                         name => "groupname",
                         prefix => "groupprefix",
                       );
 $memberdns->dns64_groups([$group]);

=back

=back

=head2 dnssec_enabled( )

=over

Use this method to enable/disable  the DNSSEC feature.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Set the parameter to "true" to enable  the DNSSEC feature. Set the parameter to "false" to disable the feature.

Setting  this parameter to  "true" or "false" implicitly  sets the override_dnssec attribute to "true".
Setting the parameter to undefined causes  the appliance to use  the  grid-level DNSSEC settings  and  automatically sets the override_dnssec attribute to "false".

Note that in the case when dnssec_enabled is set to "true"/"false" and override_dnssec is set to "false" simultaneously,
the last operation takes precedence. Thus the sequence $grid_member->dnssec_enabled("false"); $grid_member->override_dnssec("false");
will set override_dnssec to "false", and the sequence   $grid_member->override_dnssec("false"); $grid_member->dnssec_enabled("false"); will result in override_dnssec="true".

The default value of the parameter is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get dnssec_enabled
 my $dnssec_enabled = $memberdns->dnssec_enabled();
 #Modify dnssec_enabled
 $memberdns->dnssec_enabled("true");
 #Set the value to undefined to inherit grid level settings.
 $memberdns->dnssec_enabled(undef);

=back

=back

=head2 dnssec_expired_signatures_enabled( )

=over

Use this method to  control whether the DNS member accepts expired signatures.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Set the parameter to "true" to accept  expired signatures. Set it to "false" to  reject expired signatures.

The default value of the parameter is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get dnssec_expired_signatures_enabled
 my $dnssec_expired_signatures_enabled = $memberdns->dnssec_expired_signatures_enabled();
 #Modify dnssec_expired_signatures_enabled
 $memberdns->dnssec_expired_signatures_enabled("true");

=back

=back

=head2 dnssec_validation_enabled( )

=over

Use this method to  enable  or disable DNS  security validation.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Set the parameter to "true" to enable the validation. Set it to "false" to disable the validation.

The default value of the parameter is "true".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get dnssec_validation_enabled
 my $dnssec_validation_enabled = $memberdns->dnssec_validation_enabled();
 #Modify dnssec_validation_enabled
 $memberdns->dnssec_validation_enabled("false");

=back

=back

=head2 dnssec_blacklist_enabled()

=over

Use this method to enable and disable blacklist rules for DNSSEC-enabled clients.

=over

=item B<Parameter>

Set the parameter to "true" to apply blacklist rules for DNSSEC-enabled clients. Set to "false" to disable them.

The default value of the parameter is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get dnssec_blacklist_enabled
 my $dnssec_blacklist_enabled = $memberdns->dnssec_blacklist_enabled();
 #Modify dnssec_blacklist_enabled
 $memberdns->dnssec_blacklist_enabled("true");

=back

=back

=head2 dnssec_negative_trust_anchors( )

=over

Use this method to set or retrieve the list of zones for which the appliance does not perform DNSSEC validation.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is an array of strings that contains the lsit of zones for which the appliance does not perform DNSSEC validation.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get dnssec_negative_trust_anchors value
 my $value = $member_dns->dnssec_negative_trust_anchors();
 #Modify dnssec_negative_trust_anchors value
 $member_dns->dnssec_negative_trust_anchors($zones);

=back

=back

=head2 dnssec_dns64_enabled()

=over

Use this method to enable and disable DNS64 groups for DNSSEC-enabled clients.

=over

=item B<Parameter>

Set the parameter to "true" to apply DNS64 groups for DNSSEC-enabled clients. Set to "false" to disable them.

The default value of the parameter is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get dnssec_dns64_enabled
 my $dnssec_dns64_enabled = $member_dns->dnssec_dns64_enabled();
 #Modify dnssec_dns64_enabled
 $member_dns->dnssec_dns64_enabled("true");

=back

=back

=head2 dnssec_nxdomain_enabled()

=over

Use this method to enable and disable NXDOMAIN rules for DNSSEC-enabled clients.

=over

=item B<Parameter>

Set the parameter to "true" to apply NXDOMAIN rules for DNSSEC-enabled clients. Set to "false" to disable them.

The default value of the parameter is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get dnssec_nxdomain_enabled
 my $dnssec_nxdomain_enabled = $memberdns->dnssec_nxdomain_enabled();
 #Modify dnssec_nxdomain_enabled
 $memberdns->dnssec_nxdomain_enabled("true");

=back

=back

=head2 dnssec_rpz_enabled()

=over

Use this method to enable and disable RPZ policies for DNSSEC-enabled clients.

=over

=item B<Parameter>

Set the parameter to "true" to apply RPZ policies for DNSSEC-enabled clients. Set to "false" to disable them.

The default value of the parameter is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get dnssec_rpz_enabled
 my $dnssec_rpz_enabled = $memberdns->dnssec_rpz_enabled();
 #Modify dnssec_rpz_enabled
 $memberdns->dnssec_rpz_enabled("true");

=back

=back

=head2 dnssec_trusted_keys( )

=over

Use this method to specify the list of trusted keys for  the DNSSEC feature.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Array reference that contains a list of Infoblox::DNS::DnssecTrustedKey objects.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns a reference to a list of the trusted keys.

=item B<Example>

 #Get dnssec_trusted_keys
 my $dnssec_trusted_keys = $memberdns->dnssec_trusted_keys();
 #Modify dnssec_trusted_keys
 my $key1=Infoblox::DNS::DnssecTrustedKey->new(
    fqdn => "myzone.com",
    algorithm => "RSAMD5",
    key       => "c2ltcGxlIGtleQo="
    );
 $memberdns->dnssec_trusted_keys([$key1]);

=back

=back

=head2 dns_notify_transfer_source_interface( )

=over

Use this method to specify  which IP address is used as the source for  DDNS notify and transfer operations.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid values are "VIP", "MGMT", "LAN2", "Any" or an IPV4 address. Default is "VIP".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Getting dns_source_interface
   my $dns_source_interface = $memberdns->dns_source_interface( );
   #Modifying dns_source_interface
   $memberdns->dns_source_interface("VIP");

=back

=back

=head2 dns_query_capture_file_time_limit( )

=over

Use this method to set or retrieve the DNS query capture file time (in minutes) limit.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is unsigned integer between 1 and 10. The default value is 10.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get dns_query_capture_file_time_limit value
 my $dns_query_capture_file_time_limit = $object->dns_query_capture_file_time_limit();

 #Modify dns_query_capture_file_time_limit value
 $object->dns_query_capture_file_time_limit('5');

=back

=back

=head2 dns_query_source_interface( )

=over

Use this method to specify  which IP address is used as the source for  DDNS query operations.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid values are "VIP", "MGMT", "LAN2", "Any" or an IPV4 address. Default is "VIP".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Getting dns_source_interface
   my $dns_source_interface = $memberdns->dns_source_interface( );
   #Modifying dns_source_interface
   $memberdns->dns_source_interface("VIP");

=back

=back

=head2 dns_view_address_settings( )

=over

Use this method to set or retrieve the list of address settings for Grid member views.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is an array of L<Infoblox::Grid::Member::DNS::ViewAddressSetting|Infoblox::Grid::Member::DNS::ViewAddressSetting> objects.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get dns_view_address_settings value
 my $value = $object->dns_view_address_settings();

 #Construct view address setting
 my $view_address_setting = Infoblox::Grid::Member::DNS::ViewAddressSetting->new('view_name' => 'view1');

 #Modify dns_view_address_settings value 
 $object->dns_view_address_settings([$view_address_setting]);

=back

=back

=head2 domains_to_capture_dns_queries( )

=over

Use this method to set or retrieve the list of domains to capture DNS queries.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is an array reference that contains desired domain names in a string format.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get domains_to_capture_dns_queries value
 my $domains_to_capture_dns_queries = $object->domains_to_capture_dns_queries();

 #Modify domains_to_capture_dns_queries value
 $object->domains_to_capture_dns_queries(['domain1.com', 'domain2.com']);

=back

=back

=head2 dtc_edns_prefer_client_subnet( )

=over

Use this method to set or retrieve the flag that indicates whether the use of the edns-client-subnet option for DTC is enabled or disabled.

Setting this method to a defined value implicitly sets the override_dtc_edns_prefer_client_subnet method to "true". Setting the parameter to undefined causes the appliance to use the Grid DNS default and automatically resets the override_dtc_edns_prefer_client_subnet method to "false".

Note that when dtc_edns_prefer_client_subnet is set to a defined value and override_dtc_edns_prefer_client_subnet is set to "false", the last operation takes precedence. Thus the sequence $object->dtc_edns_prefer_client_subnet("true"); $object->override_dtc_edns_prefer_client_subnet("false"); will set override_dtc_edns_prefer_client_subnet to "false", and the sequence $object->override_dtc_edns_prefer_client_subnet("false"); $object->dtc_edns_prefer_client_subnet("true"); will result in override_dtc_edns_prefer_client_subnet="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify 'true' to enable use of the edns-client-subnet option for DTC or 'false' to disable it.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get dtc_edns_prefer_client_subnet value
 my $dtc_edns_prefer_client_subnet = $object->dtc_edns_prefer_client_subnet();

 #Modify dtc_edns_prefer_client_subnet value
 $object->dtc_edns_prefer_client_subnet('true');

=back

=back

=head2 dtc_health_source_interface( )

=over

Use this method to set or retrieve the source address for the health checks.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is one of the following: VIP, MGMT, LAN2, ANY or IPv4 / IPv6 address.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

    #Getting dtc_health_source_interface
    my $dtc_source_interface = $memberdns->dtc_health_source_interface();
    #Modifying dtc_health_source_interface
    $memberdns->dtc_health_source_interface('VIP');

=back

=back

=head2 enable_blackhole( )

=over

Use this method to enable or disable the blocking of DNS queries.
This setting overrides the grid enable_blackhole settings.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to block DNS queries or "false" to disable blocking DNS queries. The default value is "false".

=item B<Returns>

When you specify a parameter and the modification succeeds, the method returns "true". When the operation fails, the method returns "false".

When you do not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Get enable_blackhole
   my $enable_blackhole = $object->enable_blackhole( );
   #Modify enable_blackhole
   $memberdns->enable_blackhole("true");

=back

=back

=head2 enable_blacklist( )

=over

Use this method to enable or disable a blacklist on the grid member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the enable_blacklist flag or "false" to deactivate/unset it. The default is "false".

Setting this parameter to "true" or "false" implicitly sets the override_blacklist attribute to "true". Setting the parameter to undefined causes the appliance to use the grid-level blacklist settings and automatically sets the override_blacklist attribute to "false" if "blacklist_redirect_addresses" is also undefined.

Note that when enable_blacklist is set to "true"/"false" and override_blacklist is set to "false", the last operation takes precedence. Thus the sequence $memberdns->enable_blacklist("false"); $memberdns->override_blacklist("false"); sets override_blacklist to "false", and the sequence $memberdns->override_blacklist("false"); $memberdns->enable_blacklist("false"); sets override_blacklist to "true".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Getting enable_blacklist
   my $enable_blacklist = $memberdns->enable_blacklist( );
   #Modifying enable_blacklist
   $memberdns->enable_blacklist("true");

=back

=back

=head2 enable_capture_dns_queries( )

=over

Use this method to set or retrieve the flag that indicates whether the capture of DNS queries is enabled or disabled.

Setting this method to a defined value implicitly sets the override_enable_capture_dns method to "true". Setting the parameter to undefined unless enable_capture_dns_responses is defined causes the appliance to use the Grid DNS default and automatically resets the override_enable_capture_dns method to "false".

Note that when enable_capture_dns_queries is set to a defined value and override_enable_capture_dns is set to "false", the last operation takes precedence. Thus the sequence $object->enable_capture_dns_queries("true"); $object->override_enable_capture_dns("false"); will set override_enable_capture_dns to "false", and the sequence $object->override_enable_capture_dns("false"); $object->enable_capture_dns_queries("true"); will result in override_enable_capture_dns="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify 'true' to enable the capture of DNS queries or 'false' to disable it. The default value is 'false'.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get enable_capture_dns_queries value
 my $enable_capture_dns_queries = $object->enable_capture_dns_queries();

 #Modify enable_capture_dns_queries value
 $object->enable_capture_dns_queries('true');

=back

=back

=head2 enable_capture_dns_responses( )

=over

Use this method to set or retrieve the flag that indicates whether the capture of DNS responses is enabled or disabled.

Setting this method to a defined value implicitly sets the override_enable_capture_dns method to "true". Setting the parameter to undefined unless enable_capture_dns_queries is defined causes the appliance to use the Grid DNS default and automatically resets the override_enable_capture_dns method to "false".

Note that when enable_capture_dns_responses is set to a defined value and override_enable_capture_dns is set to "false", the last operation takes precedence. Thus the sequence $object->enable_capture_dns_responses("true"); $object->override_enable_capture_dns("false"); will set override_enable_capture_dns to "false", and the sequence $object->override_enable_capture_dns("false"); $object->enable_capture_dns_responses("true"); will result in override_enable_capture_dns="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify 'true' to enable the capture of DNS responses or 'false' to disable it. The default value is 'false'.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get enable_capture_dns_responses value
 my $enable_capture_dns_responses = $object->enable_capture_dns_responses();

 #Modify enable_capture_dns_responses value
 $object->enable_capture_dns_responses('true');

=back

=back

=head2 enable_dns( )

=over

Use this method to enable/disable the DNS service of a member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to enable DNS service or "false" to disable it. The default value is "true".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Getting enable_dns
   $memberdns->enable_dns( );
   #Modifying enable_dns
   $memberdns->enable_dns("true");

=back

=back

=head2 enable_dns_cache_acceleration( )

=over

Use this method to enable/disable the DNS Cache Acceleration service of a member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to enable the DNS Cache Acceleration service or "false" to disable it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Getting enable_dns_cache_acceleration
   $memberdns->enable_dns_cache_acceleration( );
   #Modifying enable_dns_cache_acceleration
   $memberdns->enable_dns_cache_acceleration("true");

=back

=back

=head2 enable_dns_health_check( )

=over

Use this method to set or retrieve the flag that indicates whether the DNS health check is enabled or not.

Setting this parameter to defined value, implicitly sets the override_dns_health_check attribute to "true".
Setting this parameter to undefined causes the appliance to use the Grid-level DNS health check settings
and automatically sets the override_dns_health_check attribute to "false" if following fields are undefined:

 dns_health_check_domain_list
 dns_health_check_recursion_flag
 dns_health_check_anycast_control
 dns_health_check_interval
 dns_health_check_retries
 dns_health_check_timeout

But if any of the fields above contains a value, then the override_dns_health_check attribute is set to "true".

Note that when enable_dns_health_check contains a value and override_dns_health_check is set to "false", the last operation takes precedence.
Thus the sequence $zone->enable_dns_health_check("true");
$zone->override_dns_health_check("false");
sets override_dns_health_check to "false",
and the sequence $zone->override_dns_health_check("false");
$zone->enable_dns_health_check("true");
sets override_dns_health_check to "true".


Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify 'true' to enable DNS health check, and 'false' to disable it.

=item B<Returns>

When you specify a parameter and the modification succeeds, the method returns "true". When the operation fails, the method returns "false".

When you do not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get enable_dns_health_check value
 my $value = $object->enable_dns_health_check();

 #Modify enable_dns_health_check value 
 $object->enable_dns_health_check('true');

=back

=back

=head2 enable_dns64( )

=over

Use this method to enable/disable DNS64 support for this member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

Setting this method to a defined value implicitly sets the override_dns64 method to "true". Setting the parameter to undefined causes the appliance to use the grid DNS default and automatically resets the override_dns64 method to "false".

Note that when enable_dns64 is set to a defined value and override_enable_dns64 is set to "false", the last operation takes precedence. Thus the sequence $object->enable_dns64("true"); $object->override_dns64("false"); will set override_dns64 to "false", and the sequence $object->override_dns64("true"); $object->enable_dns64("testdomain"); will result in override_dns64="true".

=over

=item B<Parameter>

Specify "true" to set the enable_dns64 flag or "false" to deactivate and unset it. The default value is "false".

=item B<Returns>

When you specify a parameter and the modification succeeds, the method returns "true". When the operation fails, the method returns "false".

When you do not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get the enable_dns64 flag
 my $enable_dns64 = $memberdns->enable_dns64();
 #Modify the enable_dns64 flag
 $memberdns->enable_dns64("true");

=back

=back

=head2 enable_excluded_domain_names( )

=over

Use this method to set or retrieve the flag that indicates whether the excluding domain names captured DNS query and response is enabled or disabled..

Setting this method to a defined value implicitly sets the override_enable_excluded_domain_names method to "true". Setting the parameter to undefined causes the appliance to use the Grid DNS default and automatically resets the override_enable_excluded_domain_names method to "false".

Note that when enable_excluded_domain_names is set to a defined value and override_enable_excluded_domain_names is set to "false", the last operation takes precedence. Thus the sequence $object->enable_excluded_domain_names("true"); $object->override_enable_excluded_domain_names("false"); will set override_enable_excluded_domain_names to "false", and the sequence $object->override_enable_excluded_domain_names("false"); $object->enable_excluded_domain_names("true"); will result in override_enable_excluded_domain_names="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify 'true' to enable the excluding domain names from captured DNS query and response or 'false' to disable it. The default value is 'false'.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get enable_excluded_domain_names value
 my $enable_excluded_domain_names = $object->enable_excluded_domain_names();

 #Modify enable_excluded_domain_names value
 $object->enable_excluded_domain_names('true');

=back

=back

=head2 enable_fixed_rrset_order_fqdns( )

=over

Use this method to enable or disable fixed RRset order for specified FQDNs.

Setting this method to a defined value implicitly sets the override_fixed_rrset_order_fqdns method to "true".

Note that when enable_fixed_rrset_order_fqdns is set to a defined value and override_fixed_rrset_order_fqdns is set to "false", the last operation takes precedence. Thus the sequence $object->enable_fixed_rrset_order_fqdns("true"); $object->override_fixed_rrset_order_fqdns("false"); will set override_fixed_rrset_order_fqdns to "false", and the sequence $object->override_fixed_rrset_order_fqdns("false"); $object->enable_fixed_rrset_order_fqdns("true"); will result in override_fixed_rrset_order_fqdns="true".

The enable_fixed_rrset_order_fqdns attribute can be specified explicitly. It is also set implicitly when fixed_rrset_order_fqdns is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to enable fixed RRset order for specified FQDNs or "false" to disable it.

=item B<Returns>

When you specify a parameter and the modification succeeds, the method returns "true". When the operation fails, the method returns "false".

When you do not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get enable_fixed_rrset_order_fqdns flag
 my $enable_fixed_rrset_order_fqdns = $member_dns->enable_fixed_rrset_order_fqdns();
 #Modify enable_fixed_rrset_order_fqdns flag
 $member_dns->enable_fixed_rrset_order_fqdns("true");

=back

=back

=head2 enable_ftc( )

=over

Use this method to set or retrieve the flag that indicates whether the Fault Tolerant Caching (FTC) feature is enabled or not.

Setting this method to a defined value implicitly sets the override_ftc method to "true".
Setting the parameter to undefined if ftc_expired_record_ttl and ftc_expired_record_timeout are also undefined causes the appliance to use the Grid DNS default and automatically resets the override_ftc method to "false".

Note that when enable_ftc is set to a defined value and override_ftc is set to "false", the last operation takes precedence.
Thus the sequence $object->enable_ftc("true"); $object->override_ftc("false"); will set override_ftc to "false",
and the sequence $object->override_ftc("false"); $object->enable_ftc("true"); will result in override_ftc="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify 'true' to enable FTC or 'false' to disable it. The default value is 'false'.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Get enable_ftc
   my $enable_ftc = $memberdns->enable_ftc();
   #Modify enable_ftc
   $memberdns->enable_ftc('true');

=back

=back

=head2 enable_gss_tsig( )

=over

Use this method to enable/disable the appliance to receive GSS-TSIG authenticated updates from DHCP clients. You must import the keytab file before you enable this feature. See L<Infoblox::Session-E<gt>import_data()|Infoblox::Session/import_data()/>.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to enable the the appliance to receive GSS-TSIG authenticated updates or "false" to disable it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Getting enable_gss_tsig
   $my $enable_gss_tsig = $memberdns->enable_gss_tsig( );
   #Modifying enable_gss_tsig
   $session->import_data(
        type        => 'keytab',
        path        => '/infoblox/tests/datasets/gss-tsig-gs.keytab',
        service     => 'dns',
        virtual_ip  => '192.168.1.2');
   $memberdns->enable_gss_tsig("true");

=back

=back

=head2 enable_query_rewrite( )

=over

Use this method to enable or disable DNS query rewrite for this member.

Setting this method to a defined value implicitly sets the override_query_rewrite method to "true". Setting the parameter to undefined causes the appliance to use the grid-level enable_query_rewrite value and automatically resets the override_query_rewrite method to "false".

Note that when enable_query_rewrite is set to a defined value and override_query_rewrite is set to "false", the last operation takes precedence. Thus the sequence $object->enable_query_rewrite("true"); $object->override_query_rewrite("false"); will set override_query_rewrite to "false", and the sequence $object->override_query_rewrite("true"); $object->enable_query_rewrite("testdomain"); will result in override_query_rewrite="true".

=over

=item B<Parameter>

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get enable_query_rewrite
 $memberdns->enable_query_rewrite( );
 #Modify enable_query_rewrite
 $memberdns->enable_query_rewrite("true");

=back

=back

=head2 excluded_domain_names( )

=over

Use this method to set or retrieve the list of domains that are excluded from DNS response and query capturing.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is an array reference that contains desired domain names in a string format.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get excluded_domain_names value
 my $excluded_domain_names = $object->excluded_domain_names();

 #Modify excluded_domain_names value
 $object->excluded_domain_names(['domain1.com', 'domain2.com']);

=back

=back

=head2 extattrs( )

=over

Use this method to set or retrieve the extensible attributes associated with a Grid Member DNS object.

=over

=item B<Parameter>

Valid value is a hash reference containing the names of extensible attributes and their associated values ( L<Infoblox::Grid::Extattr|Infoblox::Grid::Extattr> objects ).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get extattrs
 my $ref_extattrs = $memberdns->extattrs();
 #Modify extattrs
 $memberdns->extattrs({ 'Site' => $extattr1, 'Administrator' => $extattr2 });

=back

=back

=head2 extensible_attributes( )

=over

Use this method to set or retrieve the extensible attributes associated with a Grid Member DNS object.

This method is read-only. Use the  L<Infoblox::Grid::Member|Infoblox::Grid::Member> object to set or modify the grid member extensible attributes.

=over

=item B<Returns>

The method returns the attribute value. Attempting to modify the extensible attributes produces an error.

=item B<Example>

 #Get extensible attributes
 my $ref_extensible_attributes = $memberdns->extensible_attributes();

=back

=back

=head2 facility( )

=over

Use this method to specify a syslog facility. This is the location on the syslog server to which you want to sort the DNS logging messages. This setting overrides the grid logging facility settings.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Values are: C<"daemon", "local0", "local1", "local2", "local3", "local4", "local5", "local6", and  "local7">.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Get facility
   $memberdns->facility( );
   #Modify facility
   $memberdns->facility("local0");

=back

=back

=head2 file_transfer_setting( )

=over

Use this method to set or retrieve the DNS capture file transfer settings.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is an L<Infoblox::Grid::DNS::FileTransferSetting|Infoblox::Grid::DNS::FileTransferSetting> object.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get file_transfer_setting value
 my $file_transfer_setting = $object->file_transfer_setting();

 #Modify file_transfer_setting value
 $object->file_transfer_setting($file_transfer);

=back

=back

=head2 filter_aaaa( )

=over

Use this method to set or retrieve the type of AAAA filtering for this member DNS object.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

Specifying values in this parameter, such as "YES", implicitly sets the override_filter_aaaa attribute to "true". Setting this parameter and the "filter_aaaa" attribute to undefined causes the appliance to use the grid-level filter_aaaa settings and automatically sets the override_filter_aaaa attribute to "false". But if the "filter_aaaa" attribute contains a value, then the override_filter_aaaa attribute is set to "true".

Note that when filter_aaaa contains a valid value and override_filter_aaaa is set to "false", the last operation takes precedence. Thus the sequence $memberdns->filter_aaaa("YES"); $memberdns->override_filter_aaaa("false"); sets override_filter_aaaa to "false", and the sequence $memberdns->override_filter_aaaa("false"); $memberdns->filter_aaaa("true"); sets override_filter_aaaa to "true".

=over

=item B<Parameter>

Valid values are "YES", "NO" and "BREAK_DNSSEC". The default value is "NO".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get the filter aaaa type
 my $filter_aaaa = $memberdns->filter_aaaa();
 #Modify the filtering
 $memberdns->filter_aaaa("YES");

=back

=back

=head2 filter_aaaa_list( )

=over

Use this method to set or retrieve the list of IPv4 addresses and networks from which queries are received. AAAA filtering is applied to these addresses. This setting overrides the grid filter_aaaa_list if override_filter_aaaa is set to "true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

Specifying values in this parameter, such as ["10.0.0.10", "10.0.0.20"] or [], implicitly sets the override_filter_aaaa attribute to "true". Setting this parameter and the "filter_aaaa" attribute to undefined causes the appliance to use the grid-level filter_aaaa settings and automatically sets the override_filter_aaaa attribute to "false". But if the "filter_aaaa" attribute contains a value, then the override_filter_aaaa attribute is set to "true".

Note that when filter_aaaa_list contains a valid array reference and override_filter_aaaa is set to "false", the last operation takes precedence. Thus the sequence $memberdns->filter_aaaa_list(["10.0.0.10", "10.0.0.20"]); $memberdns->override_filter_aaaa("false"); sets override_filter_aaaa to "false", and the sequence $memberdns->override_filter_aaaa("false"); $memberdns->filter_aaaa_list(["10.0.0.10", "10.0.0.20"]); sets override_filter_aaaa to "true".

=over

=item B<Parameter>

A valid value is an L<Infoblox::Grid::NamedACL|Infoblox::Grid::NamedACL> object or an array reference that contains IPv4 addresses and networks. To return AAAA records for queries received from an IPv4 client, add "!" as the prefix to the IP addresses and networks. Specify "any" to allow AAAA records to be returned for any query received by an IPv4 client.

=item B<Returns>

When you specify a parameter and the modification succeeds, the method returns "true". When the operation fails, the method returns "false".

When you do not specify a parameter, the method returns the attribute value.

=item B<Example>

    #Getting filter_aaaa_list
    my $filter_aaaa_list = $memberdns->filter_aaaa_list( );
    #Modifying filter_aaaa_list
    $memberdns->filter_aaaa_list(["any"]);
    #Modifying filter_aaaa_list
    $memberdns->filter_aaaa_list(["10.0.0.10", "20.0.0.0/24", "!"."30.0.0.30", "!"."40.10.0.0/24"]);
    #Use Grid::DNS level filter_aaaa_list
    $memberdns->filter_aaaa_list(undef);
    $memberdns->enable_filter_aaaa(undef);
    #Use Infoblox::Grid::NamedACL
    $memberdns->filter_aaaa_list($nacl);

=back

=back

=head2 fixed_rrset_order_fqdns( )

=over

Use this method to set or retrieve configuration for fixed RRSET order for specified FQDNs.

Setting this method to a defined value implicitly sets the enable_fixed_rrset_order_fqdns and override_fixed_rrset_order_fqdns methods to "true". Setting the parameter to undefined causes the appliance to disable fixed RRset order of FQDNs and automatically resets the enable_fixed_rrset_order_fqdns method to "false".

Note that when fixed_rrset_order_fqdns is set to a defined value and enable_fixed_rrset_order_fqdns is set to "false", the last operation takes precedence. Thus the sequence $object->fixed_rrset_order_fqdns($fqdns); $object->enable_fixed_rrset_order_fqdns("false"); will set enable_fixed_rrset_order_fqdns to "false", and the sequence $object->enable_fixed_rrset_order_fqdns("false"); $object->fixed_rrset_order_fqdns($fqdns); will result in enable_fixed_rrset_order_fqdns="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is an array reference that contains L<Infoblox::Grid::DNS::FixedRRSetOrderFQDN|Infoblox::Grid::DNS::FixedRRSetOrderFQDN> objects.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get the fixed_rrset_order_fqdns list
 my $fixed_rrset_order_fqdns = $member_dns->fixed_rrset_order_fqdns();
 #Modify the fixed_rrset_order_fqdns list
 $member_dns->fixed_rrset_order_fqdns([$fqdn1, $fqdn2]);

=back

=back

=head2 forwarders( )

=over

Use this method to specify forwarders for the member. A forwarder is essentially a name server  to which other name servers first send all of their off-site  queries. The forwarder builds up a cache of information, avoiding the need for the other name servers to send queries off-site. This setting overrides the grid-level setting.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid value is an array reference that contains Infoblox::DNS::Member, Infoblox::DNS::Nameserver object(s), or IP addresses.

Specifying values in this parameter, such as ["10.0.0.10", "10.0.0.20"] or [], implicitly sets the override_forwarders attribute to "true". Setting this parameter and the "forward_only" attribute to undefined causes the appliance to use the grid-level forwarders settings and automatically sets the override_forwarders attribute to "false". But if the "forward_only" attribute contains a value, then the override_forwarders attribute is set to "true".

Note that when forwarders_redirect_addresses contains a valid array reference and override_forwarders is set to "false", the last operation takes precedence. Thus the sequence $memberdns->forwarders(["10.0.0.10", "10.0.0.20"]); $memberdns->override_forwarders("false"); sets override_forwarders to "false", and the sequence $memberdns->override_forwarders("false"); $memberdns->forwarders(["10.0.0.10", "10.0.0.20"]); sets override_forwarders to "true".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Getting forwarders
   $memberdns->forwarders( );
   #Modifying forwarders
   $memberdns->forwarders( [ "10.0.0.10" ] );

=back

=back

=head2 forward_only( )

=over

Use this method to configure this member to send queries to forwarders only. When the value is "true", the member sends queries to forwarders only, and not to other internal or Internet root servers.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to enable forward only or "false" to desable it.  Default is "false"

Setting this parameter to "true" or "false" implicitly sets the override_forwarders attribute to "true". Setting the parameter to undefined causes the appliance to use the grid-level forwarders settings and automatically sets the override_forwarders attribute to "false", if "forwarders" is also undefined.

Note that when forward_only is set to "true"/"false" and override_forwarders is set to "false", the last operation takes precedence. Thus the sequence $memberdns->forward_only("false"); $memberdns->override_forwarders("false"); sets override_forwarders to "false", and the sequence $memberdns->override_forwarders("false"); $memberdns->forward_only("false"); sets override_forwarders to "true".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Getting forward_only
   $memberdns->forward_only( );
   #Modifying forward_only
   $memberdns->forward_only("true");

=back

=back

=head2 forward_updates( )

=over

Use this method to allow/disallow secondary servers to forward updates to the DNS server.
This setting overrides grid update settings.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to enable forward updates or "false" desable it. Default is "false"

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Getting forward_updates
   $memberdns->forward_updates( );
   #Modifying forward_only
   $memberdns->forward_updates("true");

=back

=back

=head2 ftc_expired_record_ttl( )

=over

Use this method to set or retrieve the TTL value of the expired Fault Tolerant Caching (FTC) record in the DNS responses.

Setting this method to a defined value implicitly sets the override_ftc method to "true".
Setting the parameter to undefined if enable_ftc and ftc_expired_record_timeout are also undefined causes the appliance to use the Grid DNS default and automatically resets the override_ftc method to "false".

Note that when ftc_expired_record_ttl is set to a defined value and override_ftc is set to "false", the last operation takes precedence.
Thus the sequence $object->ftc_expired_record_ttl("true"); $object->override_ftc("false"); will set override_ftc to "false",
and the sequence $object->override_ftc("false"); $object->ftc_expired_record_ttl("true"); will result in override_ftc="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

A 32-bit integer, from 0 to 4294967295, that represents the TTL in seconds. The default value is 5.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Get ftc_expired_record_ttl
   my $ftc_expired_record_ttl = $memberdns->ftc_expired_record_ttl( );
   #Modify ftc_expired_record_ttl
   $memberdns->ftc_expired_record_ttl(60);

=back

=back

=head2 ftc_expired_record_timeout( )

=over

Use this method to set or retrieve the timeout value after which the expired Fault Tolerant Caching (FTC) record becomes stale and is no longer valid.

Setting this method to a defined value implicitly sets the override_ftc method to "true".
Setting the parameter to undefined if ftc_expired_record_ttl and enable_ftc are also undefined causes the appliance to use the Grid DNS default and automatically resets the override_ftc method to "false".

Note that when ftc_expired_record_timeout is set to a defined value and override_ftc is set to "false", the last operation takes precedence.
Thus the sequence $object->ftc_expired_record_timeout("true"); $object->override_ftc("false"); will set override_ftc to "false",
and the sequence $object->override_ftc("false"); $object->ftc_expired_record_timeout("true"); will result in override_ftc="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

A 32-bit integer, from 0 to 4294967295, that represents the timeout in seconds. The default value is 86400.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Get ftc_expired_record_timeout
   my $ftc_expired_record_timeout = $memberdns->ftc_expired_record_timeout( );
   #Modify ftc_expired_record_timeout
   $memberdns->ftc_expired_record_timeout(3600);

=back

=back

=head2 glue_record_addresses( )

=over

Use this method to specify which IP address the appliance uses when it generates the glue record. It can use the IP address of the appliance, the NAT IP address, or an IP address that you define.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid value is an array reference that contains Infoblox::DNS::GlueRecordAddr object(s).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 my $glue_record_addr1 = Infoblox::DNS::GlueRecordAddr->new(
     view                => "default",  #can only be one of existing views
     glue_record_address => "NAT",
 );
 $memberdns->glue_record_addresses([$glue_record_addr1]);

=back

=back

=head2 gss_tsig_keys( )

=over

Use this method to set or retrieve the list of GSS-TSIG keys for a member DNS object.

Setting this method to a defined value implicitly sets the override_gss_tsig_keys method to "true". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_gss_tsig_keys method to "false".

Note that when gss_tsig_keys is set to a defined value and override_gss_tsig_keys is set to "false", the last operation takes precedence. Thus the sequence $object->gss_tsig_keys($keys); $object->override_gss_tsig_keys("false"); will set override_gss_tsig_keys to "false", and the sequence $object->override_gss_tsig_keys("false"); $object->gss_tsig_keys($keys); will result in override_gss_tsig_keys="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is an array reference that contains L<Infoblox::Grid::KerberosKey|Infoblox::Grid::KerberosKey> objects.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get the Kerberos keys list
 my $kerberos_keys_list = $memberdns->gss_tsig_keys();
 #Modify the Kerberos keys list
 my $kerberos_key1 = Infoblox::Cluster::KerberosKey->new(
        principal => 'host/appliance.ivan.test1@LADYBUG.LOCAL',
        );
 my $kerberos_key2 = Infoblox::Cluster::KerberosKey->new(
        principal => 'host/appliance.ivan.test2@LADYBUG.LOCAL',
        );
 $memberdns->gss_tsig_keys([$kerberos_key1, $kerberos_key2]);

=back

=back

=head2 host_name_restriction_policy( )

=over

Use this method to set or retrieve the member-level host name restriction policy  that overrides  the grid-level settings.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid value is the name of record name policy defined at the grid level via L<Infoblox::Grid::RecordNamePolicy|Infoblox::Grid::RecordNamePolicy>

There are three  predefined  policies:

Policy Name                     Regex Applied

"Allow Any"                      .+

"Allow Underscore"               ^[-a-zA-Z0-9_.]+$

"Strict Hostname Checking"       ^[a-zA-Z0-9]$|^[a-zA-Z0-9][-a-zA-Z0-9.]*[a-zA-Z0-9]$

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Getting host_name_restriction_policy
 $memberdns->host_name_restriction_policy( );
 #Modifying host_name_restriction_policy
 $memberdns->host_name_restriction_policy("Allow Any");
 #Un-override host_name_restriction_policy
 $memberdns->host_name_restriction_policy(undef);

=back

=back

=head2 ipv6_glue_record_addresses( )

=over

Use this method to specify which IPv6 address the appliance uses when it generates the glue record. It can use the IPv6 address of the appliance, the NAT IPv6 address, or an IPv6 address that you define.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid value is an array of L<Infoblox::DNS::GlueRecordAddr|Infoblox::DNS::GlueRecordAddr> objects.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 my $v6_glue_record_addr1 = Infoblox::DNS::GlueRecordAddr->new(
     view                => "default",  #can only be one of existing views
     glue_record_address => "2001:db8::1",
 );

 $memberdns->ipv6_glue_record_addresses([$v6_glue_record_addr1]);

=back

=back

=head2 is_unbound_capable( )

=over

Use this method to retrieve the flag that indicates whether Member DNS supports unbound recursive resolver or not. This is a read-only attribute.

Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

None

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get is_unbound_capable
 my $is_unbound_capable = $memberdns->is_unbound_capable();

=back

=back

=head2 lame_ttl( )

=over

Use this method to set or retrieve the number of seconds to cache lame delegations or lame servers.

=over

=item B<Parameter>

The number of seconds to cache lame delegations or lame servers. The default value is 600.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get lame_ttl
 my $lame_ttl = $memberdns->lame_ttl();
 #Modify lame_ttl
 $memberdns->lame_ttl(700);

=back

=back

=head2 logging_categories( )

=over

Use this method to set logging categories for this member.  This setting overrides grid logging category settings.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid value is an array reference that contains one or more of the following values:

=over

=item

C<"general">: Records the BIND messages that are not specifically classified.

=item

C<"config">: Records the configuration file parsing messages.

C<"dnssec">: Records the DNSSEC-signed responses.

C<"network">: Records the network operation messages.

C<"queries">: Records the query messages.

C<"responses">: Records the response messages.

C<"security">: Records the approved and denied requests.

C<"xfer-in">: Records zone transfer messages from the remote name servers to the appliance.

C<"xfer-out">: Records zone transfer messages from the Infoblox appliance to remote name servers.

C<"update">: Records the dynamic update instances.

C<"resolver">: Records the DNS resolution instances, including recursive queries from resolvers.

C<"notify">: Records the asynchronous zone change notification messages.

C<"lame_servers">: Records bad delegation instances.

C<"database">: Records BIND's internal database processes.

C<"client">: Records client requests.

C<"rpz">: Records RPZ messages.

C<"dtc_gslb">: Records DTC GSLB activity.

C<"dtc_health">: Records DTC health monitoring.

=back

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Getting logging_categories
   $memberdns->logging_categories( );
   #Modifying logging_categories
   $memberdns->logging_categories( [ "general", "database" , "queries" ] );

=back

=back

=head2 max_cache_ttl( )

=over

Use this method to set or retrieve the maximum time (in seconds) for which the server will cache positive answers.

=over

=item B<Parameter>

The maximum time is specified in seconds. The default value is 604800.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get max_cache_ttl
 my $max_cache_ttl = $memberdns->max_cache_ttl();
 #Modify max_cache_ttl
 $memberdns->max_cache_ttl(400);

=back

=back

=head2 max_ncache_ttl( )

=over

Use this method to set or retrieve the maximum time (in seconds) for which the server will cache negative (NXDOMAIN) responses. This method applies for the defined member configuration.

=over

=item B<Parameter>

The maximum time is specified in seconds. The default value is 10800. The maximum allowed value is 604800.

Setting this parameter implicitle sets the override_max_ncache_ttl attribute to "true". Setting the parameter to undefined causes the appliance to use the Grid-level settings and automatically sets the override_max_ncache_ttl attribute to "false".

Note that when max_ncache_ttl is set and override_max_ncache_ttl is set to "false", the last operation takes precedence. Thus the sequence $firstview->max_ncache_ttl(10800); $firstview->override_max_ncache_ttl("false"); sets override_max_ncache_ttl to "false", and the sequence $firstview->override_max_ncache_ttl("false"); $firstview->max_ncache_ttl(30600); sets override_max_ncache_ttl to "true".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get max_ncache_ttl
 my $max_ncache_ttl = $memberdns->max_ncache_ttl();
 #Modify max_ncache_ttl
 $memberdns->max_ncache_ttl(400);

=back

=back

=head2 max_cached_lifetime( )

=over

Use this method to set or retrieve maximum time in seconds a DNS response can be stored in the hardware acceleration cache.

=over

=item B<Parameter>

Valid values are unsigned integer between 60 and 86400, inclusive. Default value is 86400.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get max_cached_lifetime
 my $max_cached_lifetime = $memberdns->max_cached_lifetime();
 #Modify max_cached_lifetime
 $memberdns->max_cached_lifetime(400);

=back

=back

=head2 minimal_resp( )

=over

Use this method to enable/disable the ability to return a minimal amount of data in response to a query. This capability speeds up the DNS services provided by the appliance.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to enable minimal responses or "false" to desable it. Default is "true"

=item B<Returns>

If you specified a parameter, the method returns 1 when the modification succeeds, and returns other values when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Getting minimal_resp
   $memberdns->minimal_resp( );
   #Modifying minimal_resp
   $memberdns->minimal_resp("true");

=back

=back

=head2 name( )

=over

Use this method to retrieve the grid name.

=over

=item B<Parameter>

None.

=item B<Returns>

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get name
 my $name = $memberdns->name();

=back

=back

=head2 notify_delay( )

=over

Use this method to specify with how many seconds of delay the notify messages are sent to secondaries.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid values are unsigned integer between 5 and 86400, inclusive. Default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Getting notify_delay
   my $notify_delay = $memberdns->notify_delay( );
   #Modifying notify_delay
   $memberdns->notify_delay(5);

=back

=back

=head2 notify_source_port( )

=over

Use this method to specify the source port for notify messages.
When requesting zone transfers from the primary server, some secondary DNS servers use the source port number (the primary server used to send the notify message) as the destination port number in the zone transfer request.
This setting overrides grid static source port settings.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Source port number for notify messages. Valid values are between 1 and 63999. The default is picked by BIND.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Getting notify_source_port
   $memberdns->notify_source_port( );
   #Modifying notify_source_port
   $memberdns->notify_source_port("2");

=back

=back

=head2 override_attack_mitigation( )

=over

The override_attack_mitigation attribute controls whether the attack_mitigation method values of the member are used, instead of the Grid default.

The override_attack_mitigation attribute can be specified explicitly. It is also set implicitly when attack_mitigation is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Set the parameter to "true" to override the Grid-level setting for attack_mitigation. Set the parameter to "false" to inherit the Grid-level setting for attack_mitigation.

The default value of this parameter is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

    #Getting override_attack_mitigation
    my $override_attack_mitigation = $memberdns->override_attack_mitigation( );
    #Modifying override_attack_mitigation
    $memberdns->override_attack_mitigation("true");

=back

=back

=head2 override_auto_blackhole( )

=over

The override_auto_blackhole attribute controls whether the auto_blackhole method values of the member are used, instead of the Grid default.

The override_auto_blackhole attribute can be specified explicitly. It is also set implicitly when auto_blackhole is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Set the parameter to "true" to override the Grid-level setting for auto_blackhole. Set the parameter to "false" to inherit the Grid-level setting for auto_blackhole.

The default value of this parameter is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

    #Getting override_auto_blackhole
    my $override_auto_blackhole = $memberdns->override_auto_blackhole( );
    #Modifying override_auto_blackhole
    $memberdns->override_auto_blackhole("true");

=back

=back

=head2 override_bind_hostname_directive( )

=over

The override_bind_hostname_directive attribute controls whether the bind_hostname_directive method values of the member are used, instead of the Grid default.

The override_bind_hostname_directive attribute can be specified explicitly. It is also set implicitly when bind_hostname_directive is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Set the parameter to "true" to override the Grid-level setting for bind_hostname_directive. Set the parameter to "false" to inherit the Grid-level setting for bind_hostname_directive.

The default value of this parameter is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

    #Getting override_bind_hostname_directive
    my $override_bind_hostname_directive = $memberdns->override_bind_hostname_directive( );
    #Modifying override_bind_hostname_directive
    $memberdns->override_bind_hostname_directive("true");

=back

=back

=head2 override_server_id_directive( )

=over

The override_server_id_directive attribute controls whether the server_id_directive method values of the member are used, instead of the Grid default.

The override_server_id_directive attribute can be specified explicitly. It is also set implicitly when server_id_directive is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Set the parameter to "true" to override the Grid-level setting for server_id_directive. Set the parameter to "false" to inherit the Grid-level setting for server_id_directive.

The default value of this parameter is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

    #Getting override_server_id_directive
    my $override_server_id_directive = $memberdns->override_server_id_directive( );
    #Modifying override_server_id_directive
    $memberdns->override_server_id_directive("true");

=back

=back

=head2 override_capture_dns_queries_on_all_domains( )

=over

The override_capture_dns_queries_on_all_domains attribute controls whether the capture_dns_queries_on_all_domains method values of the member are used, instead of the Grid default.

The override_capture_dns_queries_on_all_domains attribute can be specified explicitly. It is also set implicitly when capture_dns_queries_on_all_domains is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Set the parameter to "true" to override the Grid-level setting for capture_dns_queries_on_all_domains. Set the parameter to "false" to inherit the Grid-level setting for capture_dns_queries_on_all_domains.

The default value of this parameter is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get override_capture_dns_queries_on_all_domains value
 my $override_capture_dns_queries_on_all_domains = $object->override_capture_dns_queries_on_all_domains();

 #Modify override_capture_dns_queries_on_all_domains value
 $object->override_capture_dns_queries_on_all_domains("true");

=back

=back

=head2 override_copy_xfer_to_notify( )

=over

The override_copy_xfer_to_notify attribute controls whether the copy_xfer_to_notify method values of the member are used, instead of the grid default.

The override_copy_xfer_to_notify attribute can be specified explicitly. It is also set implicitly when copy_xfer_to_notify is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Set the parameter to "true" to override the grid-level setting for copy_xfer_to_notify. Set the parameter to "false" to inherit the grid-level setting for copy_xfer_to_notify.

The default value of this parameter is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

    #Getting override_copy_xfer_to_notify
    my $override_copy_xfer_to_notify = $memberdns->override_copy_xfer_to_notify( );
    #Modifying override_copy_xfer_to_notify
    $memberdns->override_copy_xfer_to_notify("true");

=back

=back

=head2 override_disable_edns( )

=over

The override_disable_edns attribute controls whether the disable_edns method values of the member are used, instead of the Grid default.

The override_disable_edns attribute can be specified explicitly. It is also set implicitly when disable_edns is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Set the parameter to "true" to override the grid-level setting for disable_edns. Set the parameter to "false" to inherit the grid-level setting for disable_edns. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get override_disable_edns
 my $override_disable_edns = $memberdns->override_disable_edns();
 #Modify override_disable_edns
 $memberdns->override_disable_edns("true");

=back

=back

=head2 override_dns64( )

=over

The override_dns64 attribute controls whether the DNS64 method values of the member are used, instead of the grid default.

The override_dns64 attribute can be specified explicitly. It is also set implicitly when enable_dns64 or dns64_groups are set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Set the parameter to "true" to override the grid-level setting for enable_dns64 and dns64_groups. Set the parameter to "false" to inherit the grid-level setting for enable_dns64 and dns64_groups.

The default value of this parameter is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

    #Getting override_dns64
    my $override_dns64=$memberdns->override_dns64( );
    #Modifying override_dns64
    $memberdns->override_dns64("true");

=back

=back

=head2 override_dns_health_check( )

=over

The override_dns_health_check attribute controls whether the DNS health check settings Member are used, instead of the Grid default.

The override_dns_health_check attribute can be specified explicitly. It is also set implicitly when following fields are set to a defined value:

 dns_health_check_domain_list
 dns_health_check_recursion_flag
 dns_health_check_anycast_control
 dns_health_check_interval
 dns_health_check_retries
 dns_health_check_timeout
 enable_dns_health_check

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify 'true' to override the Grid-level DNS health check setting or 'false' to inherit the Grid-level DNS health check setting.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get override_dns_health_check value
 my $value = $object->override_dns_health_check();

 #Modify override_dns_health_check value
 $object->override_dns_health_check('true');

=back

=back

=head2 override_filter_aaaa( )

=over

The override_filter_aaaa attribute controls whether the AAAA filter method values of the member are used, instead of the grid default.

The override_filter_aaaa attribute can be specified explicitly. It is also set implicitly when filter_aaaa or filter_aaaa_list are set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Set the parameter to "true" to override the grid-level setting for filter_aaaa and filter_aaaa_list. Set the parameter to "false" to inherit the grid-level setting for filter_aaaa and filter_aaaa_list.

The default value of this parameter is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

    #Getting override_filter_aaaa
    my $override_filter_aaaa=$memberdns->override_filter_aaaa( );
    #Modifying override_filter_aaaa
    $memberdns->override_filter_aaaa("true");

=back

=back

=head2 override_dns_cache_acceleration_ttl( )

=over

The override_dns_cache_acceleration_ttl attribute controls whether the dns_cache_acceleration_ttl method values of the member are used, instead of the grid default.

The override_dns_cache_acceleration_ttl attribute can be specified explicitly. It is also set implicitly when dns_cache_acceleration_ttl is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Set the parameter to "true" to override the grid-level setting for dns_cache_acceleration_ttl. Set the parameter to "false" to inherit the grid-level setting for dns_cache_acceleration_ttl.

The default value of this parameter is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

    #Getting override_dns_cache_acceleration_ttl
    my $override_dns_cache_acceleration_ttl=$memberdns->override_dns_cache_acceleration_ttl( );
    #Modifying override_dns_cache_acceleration_ttl
    $memberdns->override_dns_cache_acceleration_ttl("true");

=back

=back

=head2 override_ftc( )

=over

The override_ftc attribute controls whether the values of the Fault Tolerant Caching (FTC) feature are used for the member, instead of the Grid default.

The override_ftc attribute can be specified explicitly. It is also set implicitly when the following fields are set to a defined value:

 enable_ftc
 ftc_expired_record_ttl
 ftc_expired_record_timeout

=over

=item B<Parameter>

Set the parameter to "true" to override the Grid-level setting for FTC feature.
Set the parameter to "false" to inherit the Grid-level setting for FTC. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get override_ftc
 my $override_ftc = $memberdns->override_ftc();
 #Modify override_ftc
 $memberdns->override_ftc('true');

=back

=back

=head2 override_gss_tsig_keys( )

=over

The override_gss_tsig_keys attribute controls whether the gss_tsig_keys method values for the member are used, instead of the Grid default.

The override_gss_tsig_keys attribute can be specified explicitly. It is also set implicitly when gss_tsig_keys is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Set the parameter to "true" to override GSS-TSIG keys. Set the parameter to "false" to inherit the grid-level GSS-TSIG keys.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Getting override_gss_tsig_keys
 my $override_gss_tsig_keys = $memberdns->override_gss_tsig_keys();
 #Modyfying override_gss_tsig_keys
 $memberdns->override_gss_tsig_keys("true");

=back

=back

=head2 override_enable_capture_dns( )

=over

The override_enable_capture_dns attribute controls whether the enable_capture_dns_queries and enable_capture_dns_responses method values of the member are used, instead of the Grid default.

The override_enable_capture_dns attribute can be specified explicitly. It is also set implicitly when enable_capture_dns_queries or enable_capture_dns_responses is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Set the parameter to "true" to override the Grid-level setting for enable_capture_dns_queries and enable_capture_dns_responses. Set the parameter to "false" to inherit the Grid-level setting for enable_capture_dns_queries and enable_capture_dns_responses.

The default value of this parameter is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get override_enable_capture_dns value
 my $override_enable_capture_dns = $object->override_enable_capture_dns();

 #Modify override_enable_capture_dns value
 $object->override_enable_capture_dns("true");

=back

=back

=head2 override_enable_excluded_domain_names( )

=over

The override_enable_excluded_domain_names attribute controls whether the capture_dns_queries_on_all_domains method values of the member are used, instead of the Grid default.

The override_enable_excluded_domain_names attribute can be specified explicitly. It is also set implicitly when capture_dns_queries_on_all_domains is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Set the parameter to "true" to override the Grid-level setting for capture_dns_queries_on_all_domains. Set the parameter to "false" to inherit the Grid-level setting for capture_dns_queries_on_all_domains.

The default value of this parameter is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get override_enable_excluded_domain_names value
 my $override_enable_excluded_domain_names = $object->override_enable_excluded_domain_names();

 #Modify override_enable_excluded_domain_names value
 $object->override_enable_excluded_domain_names("true");

=back

=back

=head2 override_enable_gss_tsig( )

=over

The override_enable_gss_tsig attribute controls whether the enable_gss_tsig method value for the member is used, instead of the Grid default.

The override_enable_gss_tsig attribute can be specified explicitly. It is also set implicitly when enable_gss_tsig is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Set the parameter to "true" to override the grid-level setting for enable_gss_tsig. Set the parameter to "false" to inherit the grid-level setting for enable_gss_tsig value.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Getting override_enable_gss_tsig
 my $override_enable_gss_tsig = $memberdns->override_enable_gss_tsig();
 #Modyfying override_enable_gss_tsig
 $memberdns->override_enable_gss_tsig("true");

=back

=back

=head2 override_max_cache_ttl( )

=over

The override_max_cache_ttl attribute controls whether the max_cache_ttl method values of the member are used, instead of the grid default.

The override_max_cache_ttl attribute can be specified explicitly. It is also set implicitly when max_cache_ttl is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Set the parameter to "true" to override the grid-level setting for max_cache_ttl. Set the parameter to "false" to inherit the grid-level setting for max_cache_ttl.

The default value of this parameter is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

    #Getting override_max_cache_ttl
    my $override_max_cache_ttl = $memberdns->override_max_cache_ttl( );
    #Modifying override_max_cache_ttl
    $memberdns->override_max_cache_ttl("true");

=back

=back

=head2 override_max_ncache_ttl( )

=over

The override_max_ncache_ttl attribute controls whether the max_ncache_ttl method values of the member are used, instead of the Grid default.

The override_max_ncache_ttl attribute can be specified explicitly. It is also set implicitly when max_ncache_ttl is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Set the parameter to "true" to override the grid-level setting for max_ncache_ttl. Set the parameter to "false" to inherit the Grid-level setting for max_ncache_ttl.

The default value of this parameter is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

    #Getting override_max_ncache_ttl
    my $override_max_ncache_ttl = $memberdns->override_max_ncache_ttl( );
    #Modifying override_max_ncache_ttl
    $memberdns->override_max_ncache_ttl("true");

=back

=back

=head2 override_max_cached_lifetime( )

=over

The override_max_cached_lifetime attribute controls whether the max_cached_lifetime method values of the member are used, instead of the grid default.

The override_max_cached_lifetime attribute can be specified explicitly. It is also set implicitly when max_cached_lifetime is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Set the parameter to "true" to override the grid-level setting for max_cached_lifetime. Set the parameter to "false" to inherit the grid-level setting for max_cached_lifetime.

The default value of this parameter is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

    #Getting override_max_cached_lifetime
    my $override_max_cached_lifetime = $memberdns->override_max_cached_lifetime( );
    #Modifying override_max_cached_lifetime
    $memberdns->override_max_cached_lifetime("true");

=back

=back

=head2 override_nxdomain_redirect( )

=over

The "override_nxdomain_redirect" attribute controls whether the "nxdomain_redirect", "nxdomain_redirect_addresses", "nxdomain_redirect_addresses_ipv6", "nxdomain_redirect_ttl", "nxdomain_log_query", and "nxdomain_rulesets" values for this member are used. Note that these values can be overridden at the DNS view level as well.

The "override_nxdomain_redirect" attribute can be specified explicitly. It is also set implicitly as follows:
"nxdomain_redirect" => "true"|"false" or "nxdomain_redirect_addresses" => ["10.0.0.10", "10.0.0.20"]|[] or "nxdomain_redirect_addresses" => ["2001:db8::1", "2002:ffff::1"]|[] result in "override_nxdomain_redirect" => "true", "nxdomain_redirect" => undef and "nxdomain_redirect_addresses" => undef and "nxdomain_redirect_addresses_ipv6" => undef result in "override_nxdomain_redirect" => "false".
If "override_nxdomain_redirect" is specified explicitly as "true", and "nxdomain_redirect" => undef, "nxdomain_redirect_addresses" => undef and "nxdomain_redirect_addresses_ipv6" => undef, then the explicit value takes precedence; and "override_nxdomain_redirect"=>"true", "nxdomain_redirect", "nxdomain_redirect_addresses", and "nxdomain_redirect_addresses" remain unchanged in the database.

Specifying the "nxdomain_redirect_ttl", "nxdomain_log_query", or "nxdomain_rulesets" attributes does not affect the "override_nxdomain_redirect" value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Set the parameter to "true" to override the grid-level setting of the NXDOMAIN redirection attributes. Set the parameter to "false" to inherit the grid-level settings.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Get override_nxdomain_redirect
   my $override_nxdomain_redirect=$memberdns->override_nxdomain_redirect( );
   #Modify override_nxdomain_redirect
   $memberdns->override_nxdomain_redirect("true");

=back

=back

=head2 override_lame_ttl( )

=over

Use this method to set or retrieve the override_lame_ttl attribute that controls whether the lame_ttl method values of the member are used, instead of the Grid default

=over

=item B<Parameter>

Set the parameter to "true" to override the grid-level setting for lame_ttl. Set the parameter to "false" to inherit the grid-level setting for lame_ttl. The default value is 'false'.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get override_lame_ttl
 my $override_lame_ttl = $memberdns->override_lame_ttl();
 #Modify override_lame_ttl
 $memberdns->override_lame_ttl('true');

=back

=back

=head2 override_rpz_qname_wait_recurse( )

=over

The override_rpz_qname_wait_recurse attribute controls whether the rpz_qname_wait_recurse method value for the member is used, instead of the Grid default.

The "override_rpz_qname_wait_recurse" attribute can be specified explicitly. It is also established implicitly as follows: "rpz_qname_wait_recurse" => "true"|"false" results in "override_rpz_qname_wait_recurse" => "true"; "rpz_qname_wait_recurse" => undef results in "override_rpz_qname_wait_recurse" => "false"; If "override_rpz_qname_wait_recurse" is specified explicitly as "true", while "rpz_qname_wait_recurse"=>undef, the explicit value takes precedence, and "override_rpz_qname_wait_recurse"=>"true" while "rpz_qname_wait_recurse" remains unchanged in the database.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Set the parameter to "true" to override the Grid-level setting for rpz_qname_wait_recurse. Set the parameter to "false" to inherit the Grid-level setting for rpz_qname_wait_recurse value.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Getting override_rpz_qname_wait_recurse
 my $override_rpz_qname_wait_recurse = $memberdns->override_rpz_qname_wait_recurse();
 #Modyfying override_rpz_qname_wait_recurse
 $memberdns->override_rpz_qname_wait_recurse("true");

=back

=back

=head2 override_transfers_in( )

=over

Use this method to set or retrieve the override_transfers_in attribute that controls whether the transfers_in method values of the member are used, instead of the Grid default.

=over

=item B<Parameter>

Set the parameter to "true" to override the grid-level setting for transfers_in. Set the parameter to "false" to inherit the grid-level setting for transfers_in. The default value is 'false'.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get override_transfers_in
 my $override_transfers_in = $memberdns->override_transfers_in();
 #Modify override_transfers_in
 $memberdns->override_transfers_in('true');

=back

=back

=head2 override_transfers_out( )

=over

Use this method to set or retrieve the override_transfers_out attribute that controls whether the transfers_out method values of the member are used, instead of the Grid default.

=over

=item B<Parameter>

Set the parameter to "true" to override the grid-level setting for transfers_out. Set the parameter to "false" to inherit the grid-level setting for transfers_out. The default value is '

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get override_transfers_out
 my $override_transfers_out = $memberdns->override_transfers_out();
 #Modify override_transfers_out
 $memberdns->override_transfers_out('true');

=back

=back

=head2 override_transfers_per_ns( )

=over

Use this method to set or retrieve the transfers_per_ns attribute that controls whether the transfers_per_ns method values of the member are used, instead of the Grid default.

=over

=item B<Parameter>

Set the parameter to "true" to override the grid-level setting for transfers_per_ns. Set the parameter to "false" to inherit the grid-level setting for transfers_per_ns. The default value is 'false'.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get override_transfers_per_ns
 my $override_transfers_per_ns = $memberdns->override_transfers_per_ns();
 #Modify override_transfers_per_ns
 $memberdns->override_transfers_per_ns('true');

=back

=back

=head2 override_serial_query_rate( )

=over

Use this method to set or retrieve the override_serial_query_rate attribute that controls whether the serial_query_rate method values of the member are used, instead of the Grid default.

=over

=item B<Parameter>

Set the parameter to "true" to override the grid-level setting for serial_query_rate. Set the parameter to "false" to inherit the grid-level setting for serial_query_rate. The default value is 'false'.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get override_serial_query_rate
 my $override_serial_query_rate = $memberdns->override_serial_query_rate();
 #Modify override_serial_query_rate
 $memberdns->override_serial_query_rate('true');

=back

=back

=head2 override_query_rewrite( )

=over

Use this method to set or retrieve the override_query_rewrite that controls whether the enable_query_rewrite method values of the member are used, instead of the grid-level enable_query_rewrite value.

=over

=item B<Parameter>

Set the parameter to "true" to override the grid-level DNS query rewrite settings. Set the parameter to "false" to inherit the grid-level DNS query rewrite settings. The default is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get override_query_rewrite
 my $override_query_rewrite = $memberdns->override_query_rewrite();
 #Modify override_query_rewrite
 $memberdns->override_query_rewrite("true");

=back

=back

=head2 nxdomain_redirect( )

=over

Use this method to enable or disable NXDOMAIN redirection.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to set the nxdomain_redirect flag or "false" to deactivate/unset it. The default is "false".

Setting this parameter to "true" or "false" implicitly sets the override_nxdomain_redirect attribute to "true". Setting the parameter to undefined causes the appliance to use the grid-level NXDOMAIN redirection settings and automatically sets the override_nxdomain_redirect attribute to "false" if nxdomain_redirect_addresses or nxdomain_redirect_addresses_ipv6 is also undefined. But if nxdomain_redirect_addresses or nxdomain_redirect_addresses_ipv6 contains a value, then the override_nxdomain_redirect attribute is set to true.

Note that when nxdomain_redirect is set to "true"/"false" and override_nxdomain_redirect is set to "false", the last operation takes precedence. Thus the sequence $grid_member->nxdomain_redirect("false"); $grid_member->override_nxdomain_redirect("false"); sets override_nxdomain_redirect to "false", and the sequence $grid_member->override_nxdomain_redirect("false"); $grid_member->nxdomain_redirect("false"); sets override_nxdomain_redirect to "true".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Getting nxdomain_redirect
   my $nxdomain_redirect = $grid_member->nxdomain_redirect( );
   #Modifying nxdomain_redirect
   $grid_member->nxdomain_redirect("true");

=back

=back

=head2 nxdomain_redirect_addresses( )

=over

Use this method to set the NXDOMAIN redirection addresses.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is an array of IPv4 addresses. The default value is undefined.

Setting this parameter to a defined value implicitly sets the override_nxdomain_redirect attribute to "true". Setting the parameter to undefined causes the appliance to use the grid-level NXDOMAIN redirection settings and automatically sets the override_nxdomain_redirect attribute to "false" if nxdomain_redirect and nxdomain_redirect_addresses_ipv6 is also undefined. But if nxdomain_redirect or nxdomain_redirect_addresses_ipv6 contains a value, then the override_nxdomain_redirect attribute is set to true.

Note that when nxdomain_redirect_addresses contains a valid array reference and override_nxdomain_redirect is set to "false", the last operation takes precedence. Thus the sequence $grid_member->nxdomain_redirect_addresses(["10.0.0.10", "10.0.0.20"]); $grid_member->override_nxdomain_redirect("false"); sets override_nxdomain_redirect to "false", and the sequence $grid_member->override_nxdomain_redirect("false"); $grid_member->nxdomain_redirect_addresses(["10.0.0.10", "10.0.0.20"]); sets override_nxdomain_redirect to "true".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Get nxdomain_redirect_addresses
   my $nxdomain_redirect_addresses = $grid_member->nxdomain_redirect_addresses( );
   #Modify nxdomain_redirect_addresses
   $grid_member->nxdomain_redirect_addresses(["10.0.0.10", "10.0.0.20"]);

=back

=back

=head2 nxdomain_redirect_addresses_ipv6( )

=over

Use this method to set the NXDOMAIN redirection IPv6 addresses.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is an array of IPv6 addresses. The default value is undefined.

Setting this parameter to a defined value implicitly sets the override_nxdomain_redirect attribute to "true". Setting the parameter to undefined causes the appliance to use the grid-level NXDOMAIN redirection settings and automatically sets the override_nxdomain_redirect attribute to "false" if nxdomain_redirect and nxdomain_redirect_addresses is also undefined. But if nxdomain_redirect or nxdomain_redirect_addresses contains a value, then the override_nxdomain_redirect attribute is set to true.

Note that when nxdomain_redirect_addresses_ipv6 contains a valid array reference and override_nxdomain_redirect is set to "false", the last operation takes precedence. Thus the sequence $grid_member->nxdomain_redirect_addresses_ipv6(["2001:db8::1", "2002:ffff::1"]); $grid_member->override_nxdomain_redirect("false"); sets override_nxdomain_redirect to "false", and the sequence $grid_member->override_nxdomain_redirect("false"); $grid_member->nxdomain_redirect_addresses_ipv6(["2001:db8::1", "2002:ffff::1"]); sets override_nxdomain_redirect to "true".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Get nxdomain_redirect_addresses_ipv6
   my $nxdomain_redirect_addresses_ipv6 = $grid_member->nxdomain_redirect_addresses_ipv6( );
   #Modify nxdomain_redirect_addresses_ipv6
   $grid_member->nxdomain_redirect_addresses_ipv6(["2001:db8::1", "2002:ffff::1"]);

=back

=back

=head2 nxdomain_redirect_ttl( )

=over

Use this method to set or retrieve the TTL value of synthetic DNS responses that result from NXDOMAIN redirection.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

A 32-bit integer, from 0 to 4294967295, that represents the TTL in seconds. The default value is 60.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Get nxdomain_redirect_ttl
   my $nxdomain_redirect_ttl = $grid_member->nxdomain_redirect_ttl( );
   #Modify nxdomain_redirect_ttl
   $grid_member->nxdomain_redirect_ttl(60);

=back

=back

=head2 nxdomain_log_query( )

=over

Use this method to set or retrieve the flag that indicates whether NXDOMAIN redirection queries are logged.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to enable logging, or "false" to deactivate it. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Get nxdomain_log_query
   my $nxdomain_log_query = $grid_member->nxdomain_log_query( );
   #Modify nxdomain_log_query
   $grid_member->nxdomain_log_query("true");

=back

=back

=head2 nxdomain_rulesets( )

=over

Use this method to specify or retrieve L<Infoblox::DNS::Ruleset|Infoblox::DNS::Ruleset> object names assigned at the grid level for NXDOMAIN redirection.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is an array reference that contains the names of the L<Infoblox::DNS::Ruleset|Infoblox::DNS::Ruleset> objects assigned to the grid. The names must be in string format.  The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Get nxdomain_rulesets
   my $nxdomain_rulesets = $grid_member->nxdomain_rulesets();
   #Modify nxdomain_rulesets
   $grid_member->nxdomain_rulesets(["ruleset1", "ruleset2"]);

=back

=back

=head2 override_blacklist( )

=over

The "override_blacklist" attribute controls whether the "enable_blacklist", "blacklist_redirect_addresses", "blacklist_redirect_ttl", "blacklist_log_query", and "blacklist_rulesets" values in the database are used.

The "override_blacklist" attribute can be specified explicitly. It is also set implicitly as follows: "enable_blacklist" => "true"|"false" or "blacklist_redirect_addresses" => ["10.0.0.10", "10.0.0.20"]|[] results in "override_blacklist" => "true"; "enable_blacklist" => undef and "blacklist_redirect_addresses" => undef result in "override_blacklist" => "false". If "override_blacklist" is specified explicitly as "true", and "enable_blacklist" => undef or "blacklist_redirect_addresses" => undef, then the explicit value takes precedence. Therefore, "override_blacklist"=>"true", "enable_blacklist"=>undef, and "blacklist_redirect_addresses"=>undef remain unchanged in the database.

Specifying the "blacklist_redirect_ttl", "blacklist_log_query", or "blacklist_rulesets" attributes does not affect the "override_blacklist" value. It is implicitly set only by "enable_blacklist" and "blacklist_redirect_addresses".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Set the parameter to "true" to override the grid-level settings of the blacklist redirect attributes. Set the parameter to "false" to inherit the grid-level settings. The default is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Get override_blacklist
   my $override_blacklist=$memberdns->override_blacklist( );
   #Modify override_blacklist
   $memberdns->override_blacklist("true");

=back

=back

=head2 override_dnssec( )

=over

The "override_dnssec" attribute controls whether  the "dnssec_enabled", "dnssec_validation_enabled",
"dnssec_expired_signatures_enabled", and "dnssec_trusted_keys" values in the
database are used. Note that these values can be  overridden at the DNS view  level as well.

The "override_dnssec" attribute can be specified explicitly. It is also established
implicitly as follows:
    "dnssec_enabled" => "true"|"false" results in "override_dnssec" => "true"
    "dnssec_enabled" => undef results in "override_dnssec" => "false"
If "override_dnssec" is specified explicitly as "true", while "dnssec_enabled"=>undef,
the explicit  value takes precedence, and "override_dnssec"=>"true" while
"dnssec_enabled" remains unchanged in the  database.

Supplying the "dnssec_validation_enabled", "dnssec_expired_signatures_enabled", or
"dnssec_trusted_keys" attributes does not affect the "override_dnssec" value. It is
implicitly affected only by "dnssec_enabled".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Set the parameter to "true" to override the  grid-level setting of  DNSSEC attributes. Set the parameter to "false" to inherit the  grid-level settings.

The default value of this parameter is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

    #Getting override_dnssec
    my $override_dnssec=$memberdns->override_dnssec( );
    #Modifying override_dnssec
    $memberdns->override_dnssec("true");

=back

=back

=head2 override_dtc_edns_prefer_client_subnet( )

=over

The override_dtc_edns_prefer_client_subnet attribute controls whether the dtc_edns_prefer_client_subnet method values of the member are used, instead of the Grid default.

The override_dtc_edns_prefer_client_subnet attribute can be specified explicitly. It is also set implicitly when dtc_edns_prefer_client_subnet is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Set the parameter to "true" to override the grid-level setting for dtc_edns_prefer_client_subnet. Set the parameter to "false" to inherit the Grid-level setting for dtc_edns_prefer_client_subnet. The default value is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get override_dtc_edns_prefer_client_subnet
 my $override_dtc_edns_prefer_client_subnet = $memberdns->override_dtc_edns_prefer_client_subnet();
 #Modify override_dtc_edns_prefer_client_subnet
 $memberdns->override_dtc_edns_prefer_client_subnet("true");

=back

=back

=head2 override_forwarders( )

=over

The "override_forwarders" attribute controls whether the "forward_only" and "forwarders" values in the database are used.

The "override_forwarders" attribute can be specified explicitly. It is also set implicitly as follows: "forward_only" => "true"|"false" or "forwarders" => ["10.0.0.10", "10.0.0.20"]|[] results in "override_forwarders" => "true"; "forward_only" => undef and "forwarders" => undef result in "override_forwarders" => "false". If "override_forwarders" is specified explicitly as "true", and "forward_only" => undef or "forwarders" => undef, then the explicit value takes precedence. Therefore, "override_forwarders"=>"true", "forward_only"=>undef, and "forwarders"=>undef remain unchanged in the database.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Set the parameter to "true" to override the grid-level settings of the forwarders attributes. Set the parameter to "false" to inherit the grid-level settings. The default is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Get override_forwarders
   my $override_forwarders=$memberdns->override_forwarders( );
   #Modify override_forwarders
   $memberdns->override_forwarders("true");

=back

=back

=head2 override_fixed_rrset_order_fqdns( )

=over

The override_fixed_rrset_order_fqdns controls whether the enable_fixed_rrset_order_fqdns and fixed_rrset_order_fqdns values in the database are used. Note that these values can be overridden at the DNS View level as well.

The override_fixed_rrset_order_fqdns can be specified explicitly. It is also set implicitly as follows: enable_fixed_rrset_order_fqdns => "true" | "false" or fixed_rrset_order_fqdns => $fqdns results in override_fixed_rrset_order_fqdns => "true";

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Set the parameter to "true" to override the Grid-level fixed RRset order settings. Set the parameter to "false" to inherit the Grid-level settings. The default is "false".

=item B<Returns>

When you specify a parameter and the modification succeeds, the method returns "true". When the operation fails, the method returns "false".

When you do not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get override_fixed_rrset_order_fqdns flag
 my $override_fixed_rrset_order_fqdns = $member_dns->override_fixed_rrset_order_fqdns();
 #Modify override_fixed_rrset_order_fqdns flag
 $member_dns->override_fixed_rrset_order_fqdns("true");

=back

=back

=head2 query_source_port( )

=over

Use this method to specify the source port for queries.
Specifying a source port number for recursive queries ensures that a firewall will allow the response.
This setting overrides grid static source port settings.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Source port number for queries. Valid values are between 1 and 63999. The default is picked by BIND.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

    #Getting query_source_port
    $memberdns->query_source_port( );
    #Modifying notify_source_port
    $memberdns->query_source_port("2");

=back

=back

=head2 recursive_client_limit( )

=over

Use this method to set  a limit on the number of concurrent recursive clients.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Maximum number of concurrent recursive clients. Range is from 0 to 4294967295

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Getting recursive_client_limit
   $memberdns->recursive_client_limit( );
   #Modifying recursive_client_limit
   $memberdns->recursive_client_limit("10");

=back

=back

=head2 recursive_query_list( )

=over

Use this method to set or retrieve the list of IPv4 or IPv6 addresses, networks or hosts authenticated by Transaction signature (TSIG) key from which recursive queries are allowed or denied. This setting overrides grid recursive query list settings.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid value is an L<Infoblox::Grid::NamedACL|Infoblox::Grid::NamedACL> object or an array reference that contains IPv4/IPv6 addresses, networks and/or L<Infoblox::DNS::TSIGKey|Infoblox::DNS::TSIGKey> objects. To deny queries, add '!' as a  prefix to IP addresses and networks. Specify "any" to allow any recursive query, or undefine to use the Grid::DNS level recursive_query_list list. Note: You should also undefine the allow_recursive_query list to use Grid::DNS level settings.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

    #Getting recursive_query_list
    $memberdns->recursive_query_list( );
    #Modifying recursive_query_list
    $memberdns->recursive_query_list(["any"]);

    #Creating TSIG key object
    my $tsig_key2 = $session->gen_tsig_key();
    my $key2 = Infoblox::DNS::TSIGKey->new(
       name => "rcl_key",
       key  => $tsig_key2
    );
    #Modifying recursive_query_list
    $memberdns->recursive_query_list(["10.0.0.10", $key2, "20.0.0.0/24","2010::256/64","!"."2011::23cb/64","!"."30.0.0.30", "!"."40.10.0.0/24"]);

    #Use Grid::DNS level recursive_query_list
    $memberdns->recursive_query_list(undef);
    $memberdns->allow_recursive_query(undef);

    #Use Infoblox::Grid::NamedACL
    $memberdns->recursive_query_list($nacl);

=back

=back

=head2 resolver_query_timeout( )

=over

Use this method to set or retrieve recursive query timeout for the member.

Setting this method to a defined value implicitly sets the override_resolver_query_timeout method to "true". Setting the parameter to undefined causes the appliance to use the Grid DNS default and automatically resets the override_resolver_query_timeout method to "false".

Note that when resolver_query_timeout is set to a defined value and override_resolver_query_timeout is set to "false", the last operation takes precedence. Thus the sequence $object->resolver_query_timeout(29); $object->override_resolver_query_timeout("false"); will set override_resolver_query_timeout to "false", and the sequence $object->override_resolver_query_timeout("false"); $object->resolver_query_timeout(29); will result in override_resolver_query_timeout="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is an unsigned integer that contains the recursive query time (in seconds) for the resolver.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get resolver_query_timeout
 my $resolver_query_timeout = $memberdns->resolver_query_timeout();
 #Modify resolver_query_timeout
 $memberdns->resolver_query_timeout(29);

=back

=back

=head2 response_rate_limiting( )

=over

Use this method to set or retrieve response rate limiting settings for the member.

Setting this method to a defined value implicitly sets the override_response_rate_limiting method to "true". Setting the parameter to undefined causes the appliance to use the Grid DNS default and automatically resets the override_response_rate_limiting method to "false".

Note that when response_rate_limiting is set to a defined value and override_response_rate_limiting is set to "false", the last operation takes precedence. Thus the sequence $object->response_rate_limiting($response_rate_limiting); $object->override_response_rate_limiting("false"); will set override_response_rate_limiting to "false", and the sequence $object->override_response_rate_limiting("false"); $object->response_rate_limiting($response_rate_limiting); will result in override_response_rate_limiting="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is an L<Infoblox::Grid::DNS::ResponseRateLimiting|Infoblox::Grid::DNS::ResponseRateLimiting> object.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get response_rate_limiting
 my $response_rate_limiting = $memberdns->response_rate_limiting();
 #Modify response_rate_limiting
 $memberdns->response_rate_limiting($response_rate_limiting);

=back

=back

=head2 recursive_resolver( )

=over

Use this method to set or retrieve the recursive resolver for Member DNS.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is 'BIND' or 'UNBOUND'. The default value is 'BIND'.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get recursive_resolver
 my $recursive_resolver = $memberdns->recursive_resolver();

 #Modify recursive_resolver
 $memberdns->recursive_resolver('UNBOUND');

=back

=back

=head2 serial_query_rate( )

=over

Use this method to set or retrieve the number of maximum concurrent SOA queries per second for the Member.

=over

=item B<Parameter>

Valid values are unsigned integer between 20 and 1000, inclusive. Default value is 20.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 # Get attribute value
 my $value = $memberdns->serial_query_rate();
 # Modify attribute value
 $memberdns->serial_query_rate(30);

=back

=back

=head2 server_id_directive( )

=over

Use this method to set or retrieve the value for the BIND and UNBOUND 'server-id' directive.

Setting this method to a defined value implicitly sets the override_server_id_directive method to "true". Setting the parameter to undefined causes the appliance to use the Grid DNS default and automatically resets the override_server_id_directive method to "false".

Note that when server_id_directive is set to a defined value and override_server_id_directive is set to "false", the last operation takes precedence. Thus the sequence $object->server_id_directive("HOSTNAME"); $object->override_server_id_directive("false"); will set override_server_id_directive to "false", and the sequence $object->override_server_id_directive("false"); $object->server_id_directive("true"); will result in override_server_id_directive="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid values are "NONE", "HOSTNAME" and "USER_DEFINED". The default value is "NONE".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Get server_id_directive
   my $server_id_directive = $memberdns->server_id_directive();
   #Modify server_id_directive
   $memberdns->server_id_directive("HOSTNAME");

=back

=back

=head2 server_id_directive_string( )

=over

Use this method to set or retrieve the value for the BIND and UNBOUND user-defined server ID for 'server-id' directive.

Note that to enable user-defined 'server-id' the server_id_directive should be set to "USER_DEFINED".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is a desired server ID in a string format. The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Get server_id_directive_string
   my $server_id_directive_string = $memberdns->server_id_directive_string();
   #Modify server_id_directive_string
   $memberdns->server_id_directive_string("test-server-id-1");

=back

=back

=head2 skip_in_grid_rpz_queries( )

=over

Use this method to set or retrieve the flag that indicates whether the RPZ rules are applied to queries originating from this
member received by other members of the Grid or not.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify 'true' to allow other members to recieve RPZ queries by other members and 'false' to forbid it.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get skip_in_grid_rpz_queries value
 my $value = $object->skip_in_grid_rpz_queries();

 #Modify skip_in_grid_rpz_queries value
 $memberdns->skip_in_grid_rpz_queries('false');

=back

=back

=head2 sortlist( )

=over

Use this method to create a  sort list.

A  sort list determines the order of addresses in responses made to DNS queries. This setting overrides grid  sort list settings.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid value is an array reference that contains Infoblox::DNS::Sortlist object(s).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   my $sort1 = Infoblox::DNS::Sortlist->new (
                           "source_ipv4addr" => "1.2.3.4",
                           "match_list"      => [ "10.20.1.0/24" , "10.20.2.0/24"]
                );
   $memberdns_object->sortlist( [ $sort1 ] );

=back

=back

=head2 store_locally( )

=over

Use this method to set or retrieve the flag that indicates whether the storing of query capture reports on the appliance is enabled or disabled.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify 'true' to enable storing of query capture reports on the appliance or 'false' to disable it. The default value is 'false'.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get store_locally value
 my $store_locally = $object->store_locally();

 #Modify store_locally value
 $object->store_locally('true');

=back

=back

=head2 transfer_excluded_servers( )

=over

Use this method to exclude specified DNS servers during zone transfers.
This setting overrides grid zone transfer settings.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is an array reference that contains IP addresses of the DNS  server.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #This means that it will set zone transfer format to Many answers except these servers.
   $memberdns->transfer_format("many_answers");
   $memberdns->transfer_excluded_servers(["10.0.0.10", "20.0.0.0"]);

=back

=back

=head2 transfer_format( )

=over

Use this method to set or retrieve the BIND format for a zone transfer. This provides tracking capabilities for single or multiple transfers and their associated servers.
This setting overrides grid zone transfer format settings.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Valid value is one of the following values:

=over

=item

C<"Many Answers" (Secondaries run BIND 8/9)>: includes as many records as the packet size allows.

C<"Many Answers" Except for these servers>: includes as many records as the packet size allows.

C<"One Answer" (Secondaries run BIND 4)>: includes one record per packet.

C<"One Answer" Except for these servers>: includes one record per packet.

If you specified servers in the transfer_excluded_servers method, the Many Answers or One Answer zone format (depending on transfer_format method setting) will allow zone transfers, except from the specified servers.

=back

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

    #Getting transfer_format
    $memberdns->transfer_format( );
    #Modifying transfer_format
    $memberdns->transfer_format("many_answers");

=back

=back

=head2 transfers_in( )

=over

Use this method to set or retrieve the number of maximum concurrent transfers for the Member.

=over

=item B<Parameter>

Valid values are unsigned integer between 10 and 100, inclusive. Default value is 10.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 # Get attribute value
 my $value = $memberdns->transfers_in();
 # Modify attribute value
 $memberdns->transfers_in(20);

=back

=back

=head2 transfers_out( )

=over

Use this method to set or retrieve the number of maximum outbound concurrent zone transfers for the member.

=over

=item B<Parameter>

Valid values are unsigned integers between 1 and 100, inclusive. The default value is 10.

Specifying value in this parameter sets the override_transfers_out attribute to "true". Setting this parameter attribute to undefined causes a member to use the grid-level transfers_out value and automatically sets the override_transfers_out attribute to "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 # Get attribute value
 my $value = $memberdns->transfers_out();
 # Modify attribute value
 $memberdns->transfers_out(20);

=back

=back

=head2 transfers_per_ns( )

=over

Use this method to set or retrieve the number of maximum concurrent transfers per member for the Member.

=over

=item B<Parameter>

Valid values are unsigned integer between 2 and 100, inclusive. Default value is 2.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 # Get attribute value
 my $value = $memberdns->transfers_per_ns();
 # Modify attribute value
 $memberdns->transfers_per_ns(3);

=back

=back

=head2 unbound_logging_level( )

=over

Use this method to set or retrieve the logging level for the unbound recursive resolver.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is 'ERRORS_ONLY', 'OPERATIONS', 'DETAILED_OPERATIONS', 'QUERY', 'ALGORITHM' or 'CACHE_MISSES'.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get unbound_logging_level 
 my $unbound_logging_level = $memberdns->unbound_logging_level();

 #Modify unbound_logging_level
 $memberdns->unbound_logging_level('ALGORITHM');

=back

=back

=head2 use_lan_ipv6_port( )

=over

Use this method to enable/disable DNS service on the IPv6 LAN port.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to enable DNS service on the IPv6 LAN port or "false" to disable it. Default is "false"

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Getting use_lan_ipv6_port
   $memberdns->use_lan_ipv6_port( );
   #Modifying use_lan_ipv6_port
   $memberdns->use_lan_ipv6_port("true");

=back

=back

=head2 use_lan2_port( )

=over

Use this method to enable/disable DNS service on the LAN2 port.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to enable DNS service on the LAN2 port or "false" to disable it. Default is "false"

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Getting use_lan2_port
   $memberdns->use_lan2_port( );
   #Modifying use_lan2_port
   $memberdns->use_lan2_port("true");

=back

=back

=head2 use_lan2_ipv6_port( )

=over

Use this method to enable/disable DNS service on the IPv6 LAN2 port.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to enable DNS service on the IPv6 LAN2 port or "false" to disable it. Default is "false"

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Getting use_lan2_ipv6_port
   $memberdns->use_lan2_ipv6_port( );
   #Modifying use_lan2_ipv6_port
   $memberdns->use_lan2_ipv6_port("true");

=back

=back

=head2 use_mgmt_port( )

=over

Use this method to enable/disable DNS services on the MGMT port.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to enable DNS services on the MGMT port or "false" to disable it. Default is "false"

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Getting use_mgmt_port
   $memberdns->use_mgmt_port( );
   #Modifying enable_dns
   $memberdns->use_mgmt_port("true");

=back

=back

=head2 use_mgmt_ipv6_port( )

=over

Use this method to enable/disable DNS services on the IPv6 MGMT port.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to enable DNS services on the IPv6 MGMT port or "false" to disable it. Default is "false"

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Getting use_mgmt_ipv6_port
   $memberdns->use_mgmt_ipv6_port( );
   #Modifying enable_dns
   $memberdns->use_mgmt_ipv6_port("true");

=back

=back

=head2 use_root_name_servers( )

=over

Use this method to enable/disable custom or Internet root name servers. This setting overrides the grid root name server settings. Specify "False" to indicate that the member overrides the grid root server setting and uses Internet root name servers. Specify "True" to indicate that the member overrides the grid root server setting and uses custom root name servers. Specify "undef" to indicate that the member does not override the grid root server settings.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to allow custom root name servers. Specify "false" to use Internet root name servers. Set it to undef to use the grid root name server settings.

=item B<Returns>

If you specify a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
If you do not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Get use_root_name_servers
   my $useRootNS = $memberdns->use_root_name_servers( );
   #Modify use_root_name_servers
   $memberdns->use_root_name_servers("false");
   #Use grid root server settings
   $memberdns->use_root_name_servers(undef);

=back

=back

=head2 rpz_disable_nsdname_nsip( )

=over

Use this method to disable NSDNAME and NSIP resource records from RPZ feeds at member level.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to enable the filter (to filter out NSDNAME and NSIP resource records). Specify "false" to disable the filter. The default value is "false".

Note that if both rpz_disable_nsdname_nsip and override_rpz_disable_nsdname_nsip are set to some value, the last operation takes precedence.
Thus the sequence
    $grid_member->rpz_disable_nsdname_nsip("true");
    $grid_member->override_rpz_disable_nsdname_nsip("false");
results in inheriting rpz_disable_nsdname_nsip value from the Grid.
And the sequence
    $grid_member->override_rpz_disable_nsdname_nsip("false");
    $grid_member->rpz_disable_nsdname_nsip("true");
sets override_rpz_disable_nsdname_nsip to "true".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

   #Getting rpz_disable_nsdname_nsip
   $my $rpz_filter = $memberdns->rpz_disable_nsdname_nsip( );
   #Modifying rpz_disable_nsdname_nsip
   $memberdns->rpz_disable_nsdname_nsip("true");

=back

=back

=head2 rpz_drop_ip_rule_enabled( )

=over

Use this method to set or retreive the flag that indicates whether the DNS server ignores RPZ-IP triggers with large prefix lengths or not.

Setting this method to a defined value implicitly sets the override_rpz_drop_ip_rule method to "true". Setting the parameter to undefined if rpz_drop_ip_rule_min_prefix_length_ipv4 and rpz_drop_ip_rule_min_prefix_length_ipv6 are undefined causes the appliance to use the Grid default and automatically resets the override_rpz_drop_ip_rule attribute to "false".

Note that when rpz_drop_ip_rule_enabled is set to a defined value and override_rpz_drop_ip_rule is set to "false", the last operation takes precedence. Thus the sequence $object->rpz_drop_ip_rule_enabled("true"); $object->override_rpz_drop_ip_rule("false"); will set override_rpz_drop_ip_rule to "false", and the sequence $object->override_rpz_drop_ip_rule("false"); $object->rpz_drop_ip_rule_enabled("true"); will result in override_rpz_drop_ip_rule="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify 'true' to enable ignoring of RPZ-IP triggers with large prefix lengths or 'false' to disable it. The default value is 'false'.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 # Get attribute value
 my $value = $memberdns->rpz_drop_ip_rule_enabled();
 # Modify attribute value
 $memberdns->rpz_drop_ip_rule_enabled("true");

=back

=back

=head2 rpz_drop_ip_rule_min_prefix_length_ipv4( )

=over

Use this method to set or retreive minimum prefix length for IPv4 RPZ-IP triggers.

Setting this method to a defined value implicitly sets the override_rpz_drop_ip_rule method to "true". Setting the parameter to undefined if rpz_drop_ip_rule_enabled and rpz_drop_ip_rule_min_prefix_length_ipv6 are undefined causes the appliance to use the Grid default and automatically resets the override_rpz_drop_ip_rule attribute to "false".

Note that when rpz_drop_ip_rule_min_prefix_length_ipv4 is set to a defined value and override_rpz_drop_ip_rule is set to "false", the last operation takes precedence. Thus the sequence $object->rpz_drop_ip_rule_min_prefix_length_ipv4("20"); $object->override_rpz_drop_ip_rule("false"); will set override_rpz_drop_ip_rule to "false", and the sequence $object->override_rpz_drop_ip_rule("false"); $object->rpz_drop_ip_rule_min_prefix_length_ipv4("20"); will result in override_rpz_drop_ip_rule="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is an unsigned integer between 1 and 31 that represents prefix length (in bits) for IPv4 RPZ-IP triggers.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 # Get attribute value
 my $value = $member_dns->rpz_drop_ip_rule_min_prefix_length_ipv4();
 # Modify attribute value
 $member_dns->rpz_drop_ip_rule_min_prefix_length_ipv4("16");

=back

=back

=head2 rpz_drop_ip_rule_min_prefix_length_ipv6( )

=over

Use this method to set or retreive minimum prefix length for IPv6 RPZ-IP triggers.

Setting this method to a defined value implicitly sets the override_rpz_drop_ip_rule method to "true". Setting the parameter to undefined if rpz_drop_ip_rule_enabled and rpz_drop_ip_rule_min_prefix_length_ipv4 are undefined causes the appliance to use the Grid default and automatically resets the override_rpz_drop_ip_rule attribute to "false".

Note that when rpz_drop_ip_rule_min_prefix_length_ipv6 is set to a defined value and override_rpz_drop_ip_rule is set to "false", the last operation takes precedence. Thus the sequence $object->rpz_drop_ip_rule_min_prefix_length_ipv6("20"); $object->override_rpz_drop_ip_rule("false"); will set override_rpz_drop_ip_rule to "false", and the sequence $object->override_rpz_drop_ip_rule("false"); $object->rpz_drop_ip_rule_min_prefix_length_ipv6("20"); will result in override_rpz_drop_ip_rule="true".

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The valid value is an unsigned integer between 1 and 127 that represents prefix length (in bits) for IPv6 RPZ-IP triggers.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 # Get attribute value
 my $value = $member_dns->rpz_drop_ip_rule_min_prefix_length_ipv6();
 # Modify attribute value
 $member_dns->rpz_drop_ip_rule_min_prefix_length_ipv6("120");

=back

=back

=head2 rpz_qname_wait_recurse( )

=over

Use this method to enable or disable recursive RPZ lookups.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify "true" to enable recursive RPZ lookups or "false" to disable them. The default value is "false".

Note that if both rpz_qname_wait_recurse and override_rpz_qname_wait_recurse are set to some values, the last operation takes precedence. Thus the sequence $grid_member->rpz_qname_wait_recurse("true"); $grid_member->override_rpz_qname_wait_recurse("false"); results in inheriting rpz_qname_wait_recurse value from the Grid. And the sequence $grid_member->override_rpz_qname_wait_recurse("false"); $grid_member->rpz_qname_wait_recurse("true"); sets override_rpz_qname_wait_recurse to "true".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 # Get attribute value
 my $value = $grid_member->rpz_qname_wait_recurse();
 # Modify attribute value
 $grid_member->rpz_qname_wait_recurse("true");

=back

=back

=head2 override_resolver_query_timeout( )

=over

The override_resolver_query_timeout attribute controls whether the resolver_query_timeout method values of the member are used, instead of the Grid default.

The override_resolver_query_timeout attribute can be specified explicitly. It is also set implicitly when resolver_query_timeout is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Set the parameter to "true" to override the Grid-level setting for resolver_query_timeout. Set the parameter to "false" to inherit the Grid-level setting for resolver_query_timeout.

The default value of this parameter is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

    #Getting override_resolver_query_timeout
    my $override_resolver_query_timeout = $memberdns->override_resolver_query_timeout( );
    #Modifying override_resolver_query_timeout
    $memberdns->override_resolver_query_timeout("true");

=back

=back

=head2 override_response_rate_limiting( )

=over

The override_response_rate_limiting attribute controls whether the response_rate_limiting method values of the member are used, instead of the Grid default.

The override_response_rate_limiting attribute can be specified explicitly. It is also set implicitly when response_rate_limiting is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Set the parameter to "true" to override the Grid-level setting for response_rate_limiting. Set the parameter to "false" to inherit the Grid-level setting for response_rate_limiting.

The default value of this parameter is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

    #Getting override_response_rate_limiting
    my $override_response_rate_limiting = $memberdns->override_response_rate_limiting( );
    #Modifying override_response_rate_limiting
    $memberdns->override_response_rate_limiting("true");

=back

=back

=head2 override_rpz_disable_nsdname_nsip( )

=over

The override_rpz_disable_nsdname_nsip attribute controls whether the rpz_disable_nsdname_nsip method value for the member is used, instead of the Grid default.

The "override_rpz_disable_nsdname_nsip" attribute can be specified explicitly. It is also established implicitly as follows:
    "rpz_disable_nsdname_nsip" => "true"|"false"
        results in "override_rpz_disable_nsdname_nsip" => "true"
    "rpz_disable_nsdname_nsip" => undef
        results in "override_rpz_disable_nsdname_nsip" => "false"
If "override_rpz_disable_nsdname_nsip" is specified explicitly as "true", while "rpz_disable_nsdname_nsip"=>undef, the explicit value takes precedence, and "override_rpz_disable_nsdname_nsip"=>"true" while "rpz_disable_nsdname_nsip"
remains unchanged in the database.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Set the parameter to "true" to override the Grid-level setting for rpz_disable_nsdname_nsip. Set the parameter to "false" to inherit the grid-level setting for rpz_disable_nsdname_nsip value.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Getting override_rpz_disable_nsdname_nsip
 my $override_rpz_filter = $memberdns->override_rpz_disable_nsdname_nsip();
 #Modyfying override_rpz_disable_nsdname_nsip
 $memberdns->override_disable_nsdname_nsip("true");

=back

=back

=head2 override_rpz_drop_ip_rule( )

=over

The override_rpz_drop_ip_rule attribute controls whether the rpz_drop_ip_rule_enabled, rpz_drop_ip_rule_min_prefix_length_ipv4 and rpz_drop_ip_rule_min_prefix_length_ipv6 method values of the member are used, instead of the Grid default.

The override_rpz_drop_ip_rule attribute can be specified explicitly. It is also set implicitly when one of rpz_drop_ip_rule_enabled, rpz_drop_ip_rule_min_prefix_length_ipv4 or rpz_drop_ip_rule_min_prefix_length_ipv6 methods is set to a defined value.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Set the parameter to "true" to override the Grid-level setting for rpz_drop_ip_rule_enabled, rpz_drop_ip_rule_min_prefix_length_ipv4 and rpz_drop_ip_rule_min_prefix_length_ipv6 methods. Set the parameter to "false" to inherit the Grid-level setting for rpz_drop_ip_rule_enabled, rpz_drop_ip_rule_min_prefix_length_ipv4 and rpz_drop_ip_rule_min_prefix_length_ipv6 methods.

The default value of this parameter is "false".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

    #Getting override_rpz_drop_ip_rule
    my $override_rpz_drop_ip_rule = $memberdns->override_rpz_drop_ip_rule( );
    #Modifying override_rpz_drop_ip_rule
    $memberdns->override_rpz_drop_ip_rule("true");

=back

=back

=head2 use_lan_port( )

=over

Use this method to set or retrieve the status of the use of DNS services on the IPv4 LAN1 port.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Specify true to enable DNS services on the IPv4 LAN1 port of false to disable it.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Getting use_lan_port
 my $use_lan_port = $memberdns->use_lan_port();
 #Modyfying use_lan_port
 $memberdns->use_lan_port("true");

=back

=back

=head2 views( )

=over

Use this method to specify or retrieve the view of this member.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
The default value is the "default" view, which means the DNS member object is located under the default view.

=over

=item B<Parameter>

Valid value is an array reference that contains the names of the DNS views associated with the member. The names must be in string format.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

  #Get views
  my $ref_views = $object->views();
  #Modify DNS views, list of DNS view names in string format
  $object->views(["view1","view2","view3"]);

=back

=back

=head1 SAMPLE CODE

The following sample code demonstrates the different functions that can be applied to an object,such as modify and get. This sample also includes error handling for the operations.

B<#Preparation prior to member DNS  object operations>

 #PROGRAM STARTS: Include all the modules that will be used

 use strict;
 use Infoblox;

 #Create a session to the Infoblox appliance
 my $session = Infoblox::Session->new(
     master   => "192.168.1.2",
     username => "admin",
     password => "infoblox"
 );
 unless ($session) {
    die("Construct session failed: ",
        Infoblox::status_code() . ":" . Infoblox::status_detail());
 }
 print "Session created successfully\n";

 # Get and modify the member DNS property object. Considering the id grid member named infoblox.localdomain was previously created.
 my $object = $session->get(
     object => "Infoblox::Grid::Member::DNS",
     name   => "infoblox.localdomain"
 );

  unless ($object) {
       die("get member DNS failed: ",
       $session->status_code() . ":" . $session->status_detail());
 }
  print "member DNS get  successfull\n";

 #Modifying the value of the specified object
 $object->enable_dns("true");
 $object->forward_only("false");
 $object->minimal_resp("true");
 $object->use_mgmt_port("true");
 $object->notify_source_port(53);
 $object->query_source_port(53);

  #Apply the changes
  $session->modify($object)
   or die("modify member DNS failed: ",
       $session->status_code() . ":" . $session->status_detail());

 print "DNS member object modified successfully \n";

 ####PROGRAM ENDS####

=head1 AUTHOR

Infoblox Inc. L<http://www.infoblox.com/>

=head1 SEE ALSO

L<Infoblox::DNS::View|Infoblox::DNS::View>, 
L<Infoblox::Session|Infoblox::Session>, 
L<Infoblox::Grid::Member::DNS|Infoblox::Grid::Member::DNS>, 
L<Infoblox::DNS::DnssecTrustedKey|Infoblox::DNS::DnssecTrustedKey>, 
L<Infoblox::DNS::Ruleset|Infoblox::DNS::Ruleset>, 
L<Infoblox::Session-E<gt>get()|Infoblox::Session/get()/>, 
L<Infoblox::Session-E<gt>modify()|Infoblox::Session/modify()/>, 
L<Infoblox::Grid::NamedACL|Infoblox::Grid::NamedACL>, 
L<Infoblox::Grid::DNS::AutoBlackHole|Infoblox::Grid::DNS::AutoBlackHole>, 
L<Infoblox::Grid::DNS::AttackMitigation|Infoblox::Grid::DNS::AttackMitigation>, 
L<Infoblox::Grid::DNS::ResponseRateLimiting|Infoblox::Grid::DNS::ResponseRateLimiting>, 
L<Infoblox::Grid::Member::DNS::ViewAddressSetting|Infoblox::Grid::Member::DNS::ViewAddressSetting>,
L<Infoblox::Grid::DNS::FileTransferSetting|Infoblox::Grid::DNS::FileTransferSetting>

=head1 COPYRIGHT

Copyright (c) 2017 Infoblox Inc.

=cut
