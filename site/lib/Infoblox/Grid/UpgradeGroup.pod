=head1 NAME

Infoblox::Grid::UpgradeGroup - Upgrade Group object.

=head1 DESCRIPTION

This object enables the configuration of upgrade groups for the Infoblox Grid.

=head1 CONSTRUCTOR

 my $group = Infoblox::Grid::UpgradeGroup->new(
         name                         => $string, #Required
         comment                      => $string, #Optional / Default is undefined
         distribution_policy          => "simultaneously" | "sequentially", #Optional / Default is simultaneously
         upgrade_policy               => "simultaneously" | "sequentially", #Optional / Default is simultaneously
         distribution_dependent_group => $string, #Optional / Default is undefined
         upgrade_dependent_group      => $string, #Optional / Default is undefined
         distribution_time            => $timestamp, #See below
         upgrade_time                 => $timestamp, #See below
         members                      => [$m1, $m2, ...], #Optional / Default is undefined
 );

=head1 SESSION METHODS

This section describes all the methods in the Infoblox::Session module that you can apply to an Upgrade Group object.

=head2 Infoblox::Session->add( )

=over

Use this method to add an object to the Infoblox appliance. See L<Infoblox::Session-E<gt>add()|Infoblox::Session/add()/> for parameters and return values.

=over

=item B<Example>

 my $member1 = Infoblox::Grid::UpgradeGroup::Member->new(
                                                        member => '192.168.1.2',
                                                       );
 unless($member1) {
      die("Construct member failed: ",
            Infoblox::status_code() . ":" . Infoblox::status_detail());
 }
 print "Member object created successfully\n";

 #Create the upgrade group object with this member
 my $sgu = Infoblox::Grid::UpgradeGroup->new(
                                             name                         => "groupname1",
                                             comment                      => "group name 1 comment",
                                             distribution_policy          => "sequentially",
                                             upgrade_policy               => "simultaneously",
                                             distribution_dependent_group => 'distgroup1',
                                             upgrade_dependent_group      => 'distgroup2',
                                             distribution_time            => '2020-12-22T11:22:33Z',
                                             upgrade_time                 => '2021-12-22T11:22:33Z',
                                             members                      => [$member1],
                                             );

 my $response = $session->add($sgu)
 unless($response) {
      die("Add upgrade group failed: ",
            session->status_code() . ":" . session->status_detail());
 }
 print "Upgrade group created successfully\n";

=back

=back

=head2 Infoblox::Session->get( )

=over

Use this method to retrieve all the matching objects from the Infoblox appliance. See L<Infoblox::Session-E<gt>get()|Infoblox::Session/get()/> for parameters and return values.

=over

=item B<Key References>

 Apply the following attributes to get a specific Upgrade Group object:

  name          - Optional. Group name in string format.
  comment       - Optional. Comment in string format.

=item B<Example>

 my @retrieved_objs = $session->get(
     object      => "Infoblox::Grid::UpgradeGroup",
     name        => "testgroup" );

=back

=back

=head2 Infoblox::Session->modify( )

=over

Use this method to modify an object in the Infoblox appliance. See L<Infoblox::Session-E<gt>modify()|Infoblox::Session/modify()/> for parameters and return values.

=over

=item B<Example>

 # Use this method to modify the comment.
 $upgradegroup->comment("This is a modified comment");
 # Submit modification
 my $response = $session->modify( $upgradegroup );

=back

=back

=head2 Infoblox::Session->remove( )

=over

Use this method to remove an object from the Infoblox appliance. See L<Infoblox::Session-E<gt>remove()|Infoblox::Session/remove()/> for parameters and return values.

To remove a specific object, use get() or search() to retrieve the specific object first, and then submit this object for removal.

=over

=item B<Example>

 # Get the group object
 my @retrieved_objs = $session->get(
     object      => "Infoblox::Grid::UpgradeGroup",
     name        => "testgroup" );
 # Find the desired object from the retrieved list.
 my $desired_group = $retrieved_objs[0];
 # Submit for removal
 my $response = $session->remove( $desired_group );

=back

=back

=head2 Infoblox::Session->search( )

=over

Use this method to search for Upgrade Group objects in the Infoblox appliance. See L<Infoblox::Session-E<gt>search()|Infoblox::Session/search()/> for parameters and return values.

=over

=item B<Key References>

 Apply the following attributes to search for a specific Upgrade Group object:

  name          - Optional. Group name in string format (regular expression).
  comment       - Optional. Comment in string format (regular expression).

=item B<Example>

 # Search for all Upgrade Group objects that start with "test"
 my @retrieved_objs = $session->search(
     object      => "Infoblox::Grid::UpgradeGroup",
     name        => "test.*",
 );

=back

=back

=head2 Infoblox::Grid::UpgradeSchedule->groups( )

=over

Use this function to specify the groups that belong to this upgrade schedule. See L<Infoblox::Grid::UpgradeSchedule-E<gt>groups()|Infoblox::Grid::UpgradeSchedule/groups()/> for parameters and return values.

=over

=back

=back

=head2 Infoblox::Grid::DistributionSchedule->groups( )

=over

Use this function to specify the groups that belong to this distribution schedule. See L<Infoblox::Grid::DistributionSchedule-E<gt>groups()|Infoblox::Grid::DistributionSchedule/groups()/> for parameters and return values.

=over

=back

=back

=head1 METHODS

This section describes all the methods that you can use to set and retrieve the attribute values of an upgrade group object.

=head2 comment( )

=over

Use this method to set or retrieve the comment.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Comment in string format with a maximum of 256 bytes. The default value is undefined.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get comment
 my $comment = $upgradegroup->comment();
 #Modify comment
 $upgradegroup->comment("descriptive comment");

=back

=back

=head2 distribution_policy( )

=over

Use this method to set or retrieve the distribution policy of this Upgrade Group.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The distribution policy. Valid values are "sequentially" and "simultaneously". The default is "simultaneously".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get distribution_policy
 my $distribution_policy = $upgradegroup->distribution_policy();
 #Modify distribution_policy
 $upgradegroup->distribution_policy("sequentially");

=back

=back

=head2 distribution_dependent_group( )

=over

Use this method to set or retrieve the distribution dependent group.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The name of the distribution dependent group.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get distribution_dependent_group
 my $distribution_dependent_group = $upgradegroup->distribution_dependent_group();
 #Modify distribution_dependent_group
 $upgradegroup->distribution_dependent_group("group2");

=back

=back

=head2 distribution_time( )

=over

Use this method to set or retrieve the distribution time.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

Note this member is inserted only if the Upgrade Group is submitted for modification as part of an L<Infoblox::Grid::DistributionSchedule|Infoblox::Grid::DistributionSchedule/> update, this member will not be changed if the Upgrade Group is submitted for modification as a stand-alone object.

Note that if distribution_dependent_group is set, distribution_time will be ignored.

=over

=item B<Parameter>

The start time of the distribution in L<ISO 8601 extended format|Infoblox::Grid::ScheduledTask/SCHEDULED DATE AND TIME FORMAT> (e.g. 2008-10-21T10:56:00Z or 2008-10-21T10:56:00.001Z).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get distribution_time
 my $distribution_time = $upgradegroup->distribution_time();
 #Modify distribution_time
 $upgradegroup->distribution_time("2008-10-21T10:56:00.001Z");

=back

=back

=head2 members( )

=over

Use this method to set or retrieve the members of this upgrade group.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

Array reference that contains L<Infoblox::Grid::UpgradeGroup::Member|Infoblox::Grid::UpgradeGroup::Member> object. The default value is empty.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get members
 my $members = $upgradegroup->members();
 #Modify members
 $upgradegroup->members([$ug1, $ug2, $ug3]);

=back

=back

=head2 name( )

=over

Use this method to set or retrieve the name of this upgrade group.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The name in string format.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get name
 my $name = $upgradegroup->name();
 #Modify name
 $upgradegroup->name("group2");

=back

=back

=head2 time_zone( )

=over

Use this method to retrieve the time_zone for this upgrade group.

=over

=item B<Parameter>

None.

=item B<Returns>

The method returns the attribute value.

=item B<Example>

 #Get time_zone
 my $time_zone = $upgradegroup->time_zone();

=back

=back

=head2 upgrade_dependent_group( )

=over

Use this method to set or retrieve the upgrade dependent group.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The name of the upgrade dependent group.

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get upgrade_dependent_group
 my $upgrade_dependent_group = $upgradegroup->upgrade_dependent_group();
 #Modify upgrade_dependent_group
 $upgradegroup->upgrade_dependent_group("group2");

=back

=back

=head2 upgrade_policy( )

=over

Use this method to set or retrieve the upgrade_policy.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

=over

=item B<Parameter>

The upgrade policy. Valid values are "sequentially" and "simultaneously". The default is "simultaneously".

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get upgrade_policy
 my $upgrade_policy = $upgradegroup->upgrade_policy();
 #Modify upgrade_policy
 $upgradegroup->upgrade_policy("sequentially");

=back

=back

=head2 upgrade_time( )

=over

Use this method to set or retrieve the upgrade time.

Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.

Note this member is inserted only if the Upgrade Group is submitted for modification as part of an L<Infoblox::Grid::UpgradeSchedule|Infoblox::Grid::UpgradeSchedule/> update, this member will not be changed if the Upgrade Group is submitted for modification as a stand-alone object.

=over

=item B<Parameter>

The start time of the upgrade in L<ISO 8601 extended format|Infoblox::Grid::ScheduledTask/SCHEDULED DATE AND TIME FORMAT> (e.g. 2008-10-21T10:56:00Z or 2008-10-21T10:56:00.001Z).

=item B<Returns>

If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.

If you did not specify a parameter, the method returns the attribute value.

=item B<Example>

 #Get upgrade_time
 my $upgrade_time = $upgradegroup->upgrade_time();
 #Modify upgrade_time
 $upgradegroup->upgrade_time("2008-10-21T10:56:00.001Z");

=back

=back

=head1 SAMPLE CODE

The following sample code demonstrates the different functions that can be applied to an object, such as add, search, modify, and remove. This sample also includes error handling for the operations.

B<#Preparation prior to an Upgrade Group insertion>

 #PROGRAM STARTS: Include all the modules that will be used
 use strict;
 use Infoblox;

 #Create a session to the Infoblox appliance

 my $session = Infoblox::Session->new(
                master   => "127.0.0.1", #appliance host ip
                username => "admin",       #appliance user login
                password => "infoblox"     #appliance password
                );

 unless ($session) {
        die("Construct session failed: ",
                Infoblox::status_code() . ":" . Infoblox::status_detail());
 }
 print "Session created successfully\n";

B<#Create a few Upgrade Group objects>

 my $group1 = Infoblox::Grid::UpgradeGroup->new(
                                             name => "group1",
                                            );

 unless ($group1) {
        die("Construct group object failed: ",
                Infoblox::status_code() . ":" . Infoblox::status_detail());
 }
 print "Group object created successfully\n";

 my $group2 = Infoblox::Grid::UpgradeGroup->new(
                                             name => "group2",
                                            );

 $session->add($group1)
        or die("Add Upgrade Group object failed: ",
                        $session->status_code() . ":" . $session->status_detail());
 print "Upgrade Group object added to server successfully\n";

 unless ($group2) {
        die("Construct group object failed: ",
                Infoblox::status_code() . ":" . Infoblox::status_detail());
 }
 print "Group object created successfully\n";

 $session->add($group2)
        or die("Add Upgrade Group object failed: ",
                        $session->status_code() . ":" . $session->status_detail());
 print "Upgrade Group object added to server successfully\n";

 # Note that this has to be a valid Grid member name
 my $member = Infoblox::Grid::UpgradeGroup::Member->new(
                                                        member      => 'grid_member.com',
                                                       );

 my $group3 = Infoblox::Grid::UpgradeGroup->new(
                                             name                         => "group3",
                                             comment                      => "descriptive comment",
                                             distribution_policy          => "sequentially",
                                             upgrade_policy               => "simultaneously",
                                             distribution_dependent_group => 'group1',
                                             upgrade_dependent_group      => 'group2',
                                             distribution_time            => '2020-12-22T11:22:33Z',
                                             upgrade_time                 => '2021-12-22T11:22:33Z',
                                             members                      => [$member],
                                            );

 unless ($group3) {
        die("Construct group object failed: ",
                Infoblox::status_code() . ":" . Infoblox::status_detail());
 }
 print "Group object created successfully\n";

 #Add the upgrade group object to the Infoblox appliance through a session
 $session->add($group3)
        or die("Add Upgrade Group object failed: ",
                        $session->status_code() . ":" . $session->status_detail());
 print "Upgrade Group object added to server successfully\n";

B<#Search for all groups>

 my @retrieved_objs = $session->search(
                object      => "Infoblox::Grid::UpgradeGroup",
                name        => "group.*",
               );
 my $object = $retrieved_objs[0];

 unless ($object) {
        die("Search Group object failed: ",
                $session->status_code() . ":" . $session->status_detail());
 }
 print "Search Upgrade Group objects found at least 1 matching entry\n";

B<#Get and modify a Group object>

 #Get the object from an Infoblox appliance through a session
 my @retrieved_objs = $session->get(
             object      => "Infoblox::Grid::UpgradeGroup",
             name        => "group3",
 );
 my $object = $retrieved_objs[0];

 unless ($object) {
        die("Get Group object failed: ",
                $session->status_code() . ":" . $session->status_detail());
 }
 print "Get Upgrade Group object found at least 1 matching entry\n";

 #Modify the upgrade policy of the Group object
 $object->upgrade_policy("sequentially");

 #Apply the changes.
 $session->modify($object)
        or die("Modify Group object failed: ",
                $session->status_code() . ":" . $session->status_detail());
 print "Group object modified successfully \n";

B<#Remove the Group object>

 #Get the Group object through the session
 my @retrieved_objs = $session->get(
             object      => "Infoblox::Grid::UpgradeGroup",
             name        => "group3",
 );
 my $object = $retrieved_objs[0];
 unless ($object) {
     die("Get Group object failed: ",
         $session->status_code() . ":" . $session->status_detail());
 }
 print "Get Group object found at least 1 matching entry\n";

 #Submit the object for removal
 $session->remove($object)
        or die("Remove Group object failed: ",
                $session->status_code() . ":" . $session->status_detail());
 print "Upgrade Group object removed successfully \n";

B<#Remove the other created objects>

 $session->remove($group2)
        or die("Remove Group object failed: ",
                $session->status_code() . ":" . $session->status_detail());

 $session->remove($group1)
        or die("Remove Group object failed: ",
                $session->status_code() . ":" . $session->status_detail());

 ####PROGRAM ENDS####

=head1 AUTHOR

Infoblox Inc. L<http://www.infoblox.com/>

=head1 SEE ALSO

L<Infoblox::Grid::UpgradeGroup::Member|Infoblox::Grid::UpgradeGroup::Member>,L<Infoblox::Session-E<gt>add()|Infoblox::Session/add()/>, L<Infoblox::Session-E<gt>get()|Infoblox::Session/get()/>, L<Infoblox::Session-E<gt>modify()|Infoblox::Session/modify()/>, L<Infoblox::Session-E<gt>remove()|Infoblox::Session/remove()/>, L<Infoblox::Session-E<gt>search()|Infoblox::Session/search()/>, L<Infoblox::Session|Infoblox::Session>

=head1 COPYRIGHT

Copyright (c) 2017 Infoblox Inc. 

=cut
